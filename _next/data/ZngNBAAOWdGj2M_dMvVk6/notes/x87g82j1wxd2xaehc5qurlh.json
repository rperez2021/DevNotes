{"pageProps":{"note":{"id":"x87g82j1wxd2xaehc5qurlh","title":"Mutability","desc":"Notes on Mutability in JS","updated":1650151243141,"created":1650149904968,"custom":{},"fname":"devnotes.javascript.mutability","type":"note","vault":{"fsPath":"vault"},"contentHash":"f883aeb58b2d45b5455997d0e9972441","links":[],"anchors":{"general-info":{"type":"header","text":"General Info","value":"general-info","line":7,"column":0,"depth":2},"addition-with-mutation":{"type":"header","text":"Addition with Mutation","value":"addition-with-mutation","line":14,"column":0,"depth":3},"addition-without-mutation":{"type":"header","text":"Addition without Mutation","value":"addition-without-mutation","line":27,"column":0,"depth":3},"removal-with-mutation":{"type":"header","text":"Removal with Mutation","value":"removal-with-mutation","line":51,"column":0,"depth":3},"removal-without-mutating":{"type":"header","text":"Removal without Mutating","value":"removal-without-mutating","line":78,"column":0,"depth":3},"replacing-with-mutation":{"type":"header","text":"Replacing with Mutation","value":"replacing-with-mutation","line":109,"column":0,"depth":3},"replace-without-mutating":{"type":"header","text":"Replace without Mutating","value":"replace-without-mutating","line":128,"column":0,"depth":3},"transforming-data-with-arraymap":{"type":"header","text":"Transforming Data with array.map()","value":"transforming-data-with-arraymap","line":146,"column":0,"depth":3}},"children":[],"parent":"cOSLT6ncEiScjLx1bEQKH","data":{}},"body":"<h1 id=\"mutability\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#mutability\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Mutability</h1>\n<h2 id=\"general-info\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#general-info\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>General Info</h2>\n<p>JavaScript offers several ways to add, remove, and replace items in an array â€“ but some of these ways mutate the array, and others are non-mutating; they produce a new array.</p>\n<ul>\n<li><code>array.splice()</code> mutates the original array</li>\n<li><code>array.slice()</code> does not mutate the original array</li>\n</ul>\n<h3 id=\"addition-with-mutation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#addition-with-mutation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Addition with Mutation</h3>\n<p>The mutating methods for adding to an array are <code>array.push()</code> which adds an item to the end of the array and <code>array.ushift()</code> which adds an item to the beginning of the array..</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since the array will be mutated, </span>\n<span class=\"token comment\">// use 'let' rather than 'const'</span>\n<span class=\"token keyword\">let</span> mutatingAdd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\nmutatingAdd<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e', 'f']</span>\nmutatingAdd<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['z', 'a', 'b', 'c', 'd', 'e' 'f']</span>\n</code></pre>\n<h3 id=\"addition-without-mutation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#addition-without-mutation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Addition without Mutation</h3>\n<p>The non-mutating method <code>array.concat()</code> is one way</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since we will not be mutating, </span>\n<span class=\"token comment\">// use const</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e'. 'f']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e']</span>\n</code></pre>\n<p>Using the <code>...spread</code> operator is another:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since we will not be mutating, </span>\n<span class=\"token comment\">// use const</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e', 'f']</span>\n<span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['z', 'a', 'b', 'c', 'd', 'e']</span>\n</code></pre>\n<h3 id=\"removal-with-mutation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#removal-with-mutation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Removal with Mutation</h3>\n<p>The mutating methods for removing from an array are <code>array.pop()</code> which removes an item at the end of the array, <code>array.shift()</code> which removes an item at the beginning of the array and <code>array.splice()</code> which can accept several parameters.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since the array will be mutated, </span>\n<span class=\"token comment\">// use 'let' rather than 'const'</span>\n<span class=\"token keyword\">let</span> mutatingRemove <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmutatingRemove<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd']</span>\nmutatingRemove<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['b', 'c', 'd']</span>\n</code></pre>\n<p><code>array.pop()</code> and <code>array.shift()</code> return the item that is removed. This means you can 'catch' the deleted item in a variable.</p>\n<ol>\n<li>The first parameter is the starting point of the splice.</li>\n<li>The second parameter is the number of items to remove from the array.</li>\n<li>The third parameter can be used to add items in the place of the removes items.</li>\n</ol>\n<p>Like array.pop() and array.shift(), array.splice() returns the items it removes.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> mutatingRemove <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> returnedItems <span class=\"token operator\">=</span> mutatingRemove<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>mutatingRemove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['c', 'd', 'e']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>returnedItems<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['a', 'b'] </span>\n</code></pre>\n<h3 id=\"removal-without-mutating\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#removal-without-mutating\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Removal without Mutating</h3>\n<p>JavaScript's <code>array.filter()</code> method creates a new array from an original array, but the new array only contains items that match the specified criteria. Another way is with <code>array.slice()</code> <strong>Dont Confuse with <code>array.splice()</code></strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since we will not be mutating, </span>\n<span class=\"token comment\">// use const</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">!==</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd']</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">!==</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd']</span>\n</code></pre>\n<p><code>array.slice()</code> takes two parameters.</p>\n<ol>\n<li>The first parameter is the index where the copy should begin.</li>\n<li>The second parameter is the index where the copy should end. This end index is non-inclusive.</li>\n</ol>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since we will not be mutating, </span>\n<span class=\"token comment\">// use const</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['b', 'c', 'd', 'e']</span>\n<span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['c', 'd', 'e']</span>\n</code></pre>\n<p>Line 5 <code>(const arr3 = arr1.slice(2))</code> shows a handy trick. If the second parameter of array.slice() is not provided, the method makes a copy from the beginning index to the end of the array.</p>\n<h3 id=\"replacing-with-mutation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#replacing-with-mutation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Replacing with Mutation</h3>\n<p>If you know the index of the item you want to replace, you can use <code>array.splice()</code> to replace it with something else.</p>\n<p>In order to do this, we need to use at least three parameters:</p>\n<ol>\n<li>The first parameter is the index to start replacing.</li>\n<li>The second parameter is the number of items to remove.</li>\n<li>The third and all other parameters are what will be inserted into the array.</li>\n</ol>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since the array will be mutated, </span>\n<span class=\"token comment\">// use 'let' rather than 'const'</span>\n<span class=\"token keyword\">let</span> mutatingReplace <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmutatingReplace<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 30, 'd', 'e']</span>\n<span class=\"token comment\">// OR</span>\nmutatingReplace<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 30, 31, 'd', 'e']</span>\n</code></pre>\n<h3 id=\"replace-without-mutating\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#replace-without-mutating\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Replace without Mutating</h3>\n<p>We can use <code>array.map()</code> to create a new array, but we can also check each item and replace items that match a specified criterion.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since we will not be mutating, </span>\n<span class=\"token comment\">// use const</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    item <span class=\"token operator\">=</span> <span class=\"token string\">'CAT'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'CAT', 'd', 'e']</span>\n</code></pre>\n<p>The code above creates a new array based on arr1, but replaces all 'c's with CATs.</p>\n<h3 id=\"transforming-data-with-arraymap\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#transforming-data-with-arraymap\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Transforming Data with <code>array.map()</code></h3>\n<p><code>array.map()</code> is a powerful method, and can be used to transform data without compromising the integrity of the original data set.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// since we will not be mutating, </span>\n<span class=\"token comment\">// use const</span>\n<span class=\"token keyword\">const</span> origArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> transformedArr <span class=\"token operator\">=</span> origArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['aHi!', 'bHi!', 'cHi!', 'dHi!', 'eHi!']</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">const</span> transformedArr <span class=\"token operator\">=</span> origArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// ['aHi!', 'bHi!', 'cHi!', 'dHi!', 'eHi!']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>origArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e']; // orignal array is intact</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1605266684036,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"cf4622cd4e7841f93fb3051e6203c8e6","links":[],"anchors":{},"children":["uRNDWirv66xgHSdrPwMcw","lcTujcWsxBfPEpzP49YbQ","FTV8hEHhyid0DiEvv9gNj","ph4ta0hoi7x0vch4uoz72hn","boufkx25rro7ysodpanan5g","01u0co3RYjOM1bjpc2qIU","xt9womgr90xi5ui5nezev7b","qpngd6ap92mmahr4bh4gc47","hobifg8vvmmg17kt2z5p36a"],"parent":null,"data":{},"body":"\nThis is the root for your Dendron vault.\n\nIf you decide to publish your entire vault, it will be your landing page. You are free to customize any part of this page except the frontmatter at the top, between the `---`. \n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.88.0","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":true,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevNotes","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://rperez2021.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"root","enableTaskNotes":true}}},"__N_SSG":true}