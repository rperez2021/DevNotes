{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"root","n":1},"1":{"v":"\nThis is the root for your Dendron vault.\n\nIf you decide to publish your entire vault, it will be your landing page. You are free to customize any part of this page except the frontmatter at the top, between the `---`. \n","n":0.156}}},{"i":2,"$":{"0":{"v":"Personal","n":1}}},{"i":3,"$":{"0":{"v":"Travels","n":1},"1":{"v":"## Countries Visited\n\n1. Kosovo\n2. Egypt\n3. Albania\n4. Mexico\n5. USA\n6. Canada\n7. Spain\n8. Iraq\n9. Kuwait\n10. Denmark\n11. Finland\n12. Norway\n13. Sweden\n14. Serbia\n15. Australia\n16. China\n17. Croatia\n18. France\n19. Netherlands\n20. Belgium\n21. Macedonia\n22. Turkey\n23. Checz Republic\n24. Slovenia\n25. Montenegro\n26. Austria\n27. Hungary\n28. Singapore\n29. UAE\n\n## Chronological Timeline\n\n1. USA\n2. Mexico\n3. China (Hong Kong)\n4. Singapore\n5. Australia\n6. Kuwait\n7. Iraq\n8. Egypt\n9. United Arab Emirates\n\n","n":0.144}}},{"i":4,"$":{"0":{"v":"Networking","n":1}}},{"i":5,"$":{"0":{"v":"Ethernet Cables","n":0.707},"1":{"v":"\n## General Info\n\nEthernet over twisted-pair technologies use twisted-pair cables for the physical layer of an Ethernet computer network. They are a subset of all Ethernet physical layers.\n\n## Cable Catergories\n\n| Category | Max Speeds | Bandwidth |\n| ---------| -----------| ----------|\n| Cat 5    | 100 Mbps   | 100 MHz   |\n| Cat 5e   | 1,000 Mbps | 100 MHz   |\n| Cat 6    | 1,000 Mbps | 250 MHz   |\n| Cat 6a   | 10,000 Mbps| 500 MHz   |\n| Cat 7a   | 10,000 Mbps| 600 MHz   |\n| Cat 7a   | 10,000 Mbps| 1,000 MHz |\n| Cat 8    | 40,000 Mbps| 2,000 MHz |\n","n":0.101}}},{"i":6,"$":{"0":{"v":"Mythology","n":1}}},{"i":7,"$":{"0":{"v":"Greek","n":1},"1":{"v":"## Troy\n\nDestroyed sometime between - 1299 to 1100 BCE\n\n**Priam** - Last King of Troy, had 50 sons and 50 daughters\n    - Hector\n    - Paris\n    - Cassandra\n\n**Helen of Troy** - but wife of King Menelaus of Sparta, fell in love with Paris and ran away with him to Troy which sets the stage for the Trojan War\n\n## Sparta\n","n":0.132}}},{"i":8,"$":{"0":{"v":"Timeline","n":1},"1":{"v":"\n1243 - Hercules puts Priam on the throne of Troy\n\n1193-1183 - Siege of Troy\n\n480 - Battle of Thermopylae\n\n470-399 - Life of Socrates\n\n356-323 - Life of Alexander the Great\n","n":0.189}}},{"i":9,"$":{"0":{"v":"Tutorial","n":1},"1":{"v":"\n## Welcome to Dendron\n\nThis guide will help you learn the basics of Dendron. You can also follow the Getting Started guides on our [website](https://wiki.dendron.so/notes/678c77d9-ef2c-4537-97b5-64556d6337f1.html).\n\nBy the end of the tutorial, you will also see how Dendron can help you manage your knowledge with super fast lookup, flexible hierarchies, and powerful linking.\n\nIf you close VS Code, you can always get back to this workspace by going to `File > Open Workspace` in VS Code's menu and then selecting your workspace file: `C:\\Users\\rob_s\\Dendron\\dendron.code-workspace`\n\nThe tutorial steps take about 10 minutes to complete. Let's get started!\n\n#### Steps to get started with Dendron:\n\n- [x] Install Dendron\n- [x] Create your first workspace\n- [x] Complete the Tutorial (Ctrl+Click on the links to go to each tutorial note)\n  - [x] One: [[tutorial.1-navigation-basics]]\n\t- [x] Two: [[tutorial.2-taking-notes]]\n\t- [x] Three: [[tutorial.3-linking-your-notes]]\n\t- [x] Four:  [[tutorial.4-rich-formatting]]\n\t- [x] Five:  [[tutorial.5-conclusion]]\n\n#### Getting Help\n\n- If you get stuck, take a look at our full documentation on our [wiki](https://wiki.dendron.so/). Don't hesitate to reach out to our community of Dendrologists on [Discord](https://discord.com/invite/AE3NRw9) or message us on Twitter at [@dendronhq](https://twitter.com/dendronhq)\n\n---\n\n##### Icon Guide\n\n🌱 - Try out this feature now in the editor!\n💡 - Important to note\n","n":0.074}}},{"i":10,"$":{"0":{"v":"Conclusion","n":1},"1":{"v":"\n**Congratulations!** You've completed the Dendron Tutorial 🙌.\n\nWith fast lookup, flexible hierarchies, note linking, and rich formatting, you're now ready to organize, reference, and work with any amount of knowledge.\n\nFrom here, you can start adding your notes to this workspace, or if you'd like to start fresh you can create a new workspace for your notes with the `Dendron: Initialize Workspace` Command.\n\n## Next Steps\n\n### Join the community!\n\nWe welcome you to our [Discord](https://link.dendron.so/6drD) where you can connect with other Dendrologists, chat with the team, and exchange cat pictures.\n\n^discord-block-ref\n\n### Explore the full potential of Dendron\n\nThere is much more that Dendron offers. When you're ready, learn more about our additional features:\n\n- [ ] Import your existing notes from existing tools with [Pods](https://wiki.dendron.so/notes/66727a39-d0a7-449b-a10d-f6c438185d7f.html)\n- [ ] Create your own Digital Garden with [Dendron Publishing](https://wiki.dendron.so/notes/4ushYTDoX0TYQ1FDtGQSg.html)\n- [ ] Find your ideal workflow by checking out existing [Workflows](https://wiki.dendron.so/notes/9313b845-d9bf-42c9-aad1-0da34794ce26.html)\n- [ ] Explore all the functional aspects of Dendron by browsing the [user guide](https://wiki.dendron.so/notes/FWtrGfE4YJc3j0yMNjBn5.html)\n\nA complete set of our documentation can be found on our [Wiki Site](https://wiki.dendron.so/).\n\n---\n\n[[Tutorial Home Page| tutorial]]\n","n":0.077}}},{"i":11,"$":{"0":{"v":"Rich Formatting","n":0.707},"1":{"v":"\nDendron supports an extended Markdown syntax, which provides a lot of options for rich formatting. Take a look at some examples in this note to see what's possible. Have the preview pane opened (`Dendron: Show Preview`) to see how these will get rendered.\n\n#### Markdown Formatting Options\n\n| Formatting    |     Example     |\n| :------------ | :-------------: |\n| Bold          | **Hello World** |\n| Italics       |  _Hello World_  |\n| Strikethrough | ~~Hello World~~ |\n\n#### Images\n\n> 🌱 Copy any image onto your clipboard, and then use the `Paste Image` command while focused in your editor pane. This will automatically create a link for you and copy the file contents into the assets directory in your workspace.\n\nSample Image Link:\n![Dendron Logo](/assets/images/logo_small.png)\n\n#### Equations\n\nMath typesetting can be written through [Katex](https://wiki.dendron.so/notes/b1919663-cc48-4054-b0cf-4b26fe444907.html)\n\n$$\n\\int_{-\\infty}^\\infty f(x)dx\n$$\n\n#### Diagrams\n\nVarious types of diagrams are supported with the [mermaid](https://mermaid-js.github.io/mermaid/#/) visualization syntax.\n\n##### Flow Charts\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n```\n\n##### Sequence Diagrams\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n### Note References\n\nYou can link to a specific section of a different note and have the content in-lined into the current note.\n\n![[tutorial#welcome-to-dendron:#*]]\n\n[References Docs](https://wiki.dendron.so/notes/f1af56bb-db27-47ae-8406-61a98de6c78c.html#note-reference)\n\n### Next Steps\n\n- [[Conclude the Tutorial|tutorial.5-conclusion]]\n\n---\n\n[[Tutorial Home Page| tutorial]]\n","n":0.073}}},{"i":12,"$":{"0":{"v":"Linking Your Notes","n":0.577},"1":{"v":"\n### Links\n\nDendron supports links between your notes, which can help you organically connect your thoughts and build up a powerful and **personal** knowledge graph.\n\n> 🌱 To create a link, just start typing [[ and Dendron will show you a list of notes in your workspace that you can link to. Try it in the editor pane now. \n\nExample: [[tutorial]]\n\nTo navigate to the note in the link, you can just click on the link in the preview pane. In the editor pane, you can move the cursor into the link and hit `CTRL+ENTER`.\n\nYou can switch back to the previous note with the tab switching shortcut (`Ctrl+Tab` on most systems).\n\n#### Backlinks\n\nTake a look at the backlinks panel on the bottom left section of your sidebar. The backlinks panel shows you all notes that have linked to the current note. This is useful for helping to establish context.\n\n![Backlinks](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-backlinks.png)\n\n### Explore Your Knowledge Graph\n\n> 🌱 To get a visual representation of your notes, use the `Dendron: Show Note Graph` command.\n\nYou can explore the hierarchical organization of your notes and how your notes are linked together. We're continually working to improve this feature so keep on the lookout for new capabilities in the graph view in the future!\n\n![Graph View](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-graph-view.png)\n\n### Next Steps\n\n- Tutorial Step 4: [[Rich Formatting|tutorial.4-rich-formatting]]\n- Try out some additional features of links:\n  - Create a note directly from a link - place your cursor inside this link `[[recipes.new-recipes-to-try]]`, hit `CTRL+ENTER`.\n  - Add an alias to a link to change how it shows in the preview. Example: [[My Alias|tutorial]]\n  - Relative Links - Link to a specific section of a page with a `#` suffix. Example: [[Additional Link Features|tutorial.3-links-and-graphs#additional-link-features]]\n  - Note References - Add a section from another note with its content inlined into the current note. [References Docs](https://wiki.dendron.so/notes/f1af56bb-db27-47ae-8406-61a98de6c78c.html#note-reference)\n\n---\n\n[[Tutorial Home Page| tutorial]]\n","n":0.058}}},{"i":13,"$":{"0":{"v":"Taking Notes","n":0.707},"1":{"v":"\n### Create a Note\n\nTo create a note, use `Ctrl+L` to bring up Dendron's lookup. This is a shortcut for the `Dendron: Lookup Note` command.\n\n> 💡 The lookup command is the main way to interact with Dendron. It is used for both looking up your notes and creating new notes. When you do a lookup on a note that hasn't been created, Dendron will create it for you. Remember the `Ctrl+L` shortcut.\n> 🌱 Try it yourself - bring up the lookup bar with Ctrl+L. Type `recipes` and hit Enter. Afterward, you can use the `Ctrl+Tab` shortcut to get back to this note.\n\nThis should have created a note named `recipes.md`. Notes in Dendron are just plaintext markdown. They live in your file system and are portable across any platform, which makes it very easy to import/ export your notes and even to publish your notes to a hosted website. You can try to add some content to the body of your `recipes` note now.\n\nThe --- section at the top of each note is frontmatter. Frontmatter are custom attributes at the top of each markdown file. Dendron uses it to store metadata about each note for features like publishing. Don't modify the id attribute on the front matter.\n\n### Creating a hierarchy\n\nDendron uses flexible hierarchies to help you organize your notes. It's how people are able to manage tens of thousands of notes inside Dendron.\n\n> 🌱 To create a hierarchy, bring up lookup again `(Ctrl+L)`. Type `recipes.vegetarian` and then press enter.\n\nYou have now created your first hierarchy. Hierarchies in Dendron are created by having a `.` delimiter in the file name. Take a look at the tree view in the side panel to see that the `vegetarian` note exists under the `recipes` hierarchy. You can also see in the Workspace panel that the note file is stored as `recipes.vegetarian.md`.\n\nYou can create a hierarchy at any level:\n\n> 🌱 Type the following into lookup and hit enter: `recipes.italian.desserts.tiramisu`\n\nYou'll notice in the tree view that there is now a `+` sign next to `italian` and `desserts`. The plus sign indicates that this note is a stub. A stub is a placeholder for a note that hasn't actually been created. Dendron uses stubs to avoid cluttering your file system with empty notes when creating hierarchies.\n\n![Tree View](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-tree-view.png)\n\nFollowing this recipes example, you can try creating other notes that might be relevant. Some examples:\n\n- `recipes.italian.appetizers`\n- `recipes.chinese`\n- `recipes.chinese.appetizers`\n- `recipes.ingredients.favorites`\n- `recipes.ingredients.shopping-list`\n\nHierarchies are flexible, and you can create them in whichever way works best for you. Dendron allows you to easily change the hierarchies later if you change your mind on how to organize your notes.\n\n### Finding Notes\n\nTo find notes, we use the same lookup interface that we used to create them.\n\n> 🌱 Open Lookup, and type `vege`. This will find your `recipes.vegetarian` note. Hit `Enter` to open that note.\n\nThe lookup uses fuzzy search which means you can type out partial results and still see the results. Searching with \\* wildcards is also supported.\n\nWhen combined with hierarchies, this fast lookup system enables you to find your notes very quickly, even if you have thousands of notes in your vaults.\n\nIf you want to search for content within the notes, you can use VS Code's built-in search tools with `Ctrl+Shift+F`.\n\n### Next Steps\n\n- Tutorial Step 3: [[Linking Your Notes|tutorial.3-linking-your-notes]]\n\n---\n\n[[Tutorial Home Page| tutorial]]\n","n":0.043}}},{"i":14,"$":{"0":{"v":"Navigation Basics","n":0.707},"1":{"v":"\nLet's do a brief overview on how to navigate the Dendron UI.\n\n_Quick note on running commands in VS Code:_\n\n>If you're unfamiliar with VS Code, the command palette is used to quickly run commands, including the commands for Dendron. To bring up the command palette, use `Ctrl+Shift+P` and start typing the command. Throughout the tutorial, if you see instructions telling you to run a command, remember to bring up the command palette and then type the command name to run it.\n\n![Basic UI](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-layout.png)\n\n#### 1. Editor Pane\n\nThis is where you can write and edit your notes. Notes in Dendron are Markdown files.\n\n#### 2. Preview Pane\n\nThis shows the rendered Markdown of what your currently opened note looks like. If you close this pane, you can always bring it back by opening the command palette `Ctrl+Shift+P` and running the `Dendron: Show Preview` command.\n\n>💡 The preview pane is read-only and cannot be used to edit notes. All editing must be done in the editor pane.\n\n#### 3. Dendron Workspace\n\nThis shows the files in your vault. A vault is where Dendron stores your markdown notes, assets, and some other helper files. Clicking on a note here will open it into the editor pane.\n\n#### 4. Outline\n\nShows an outline of the currently opened note. This observes the header levels in the Markdown of the note.\n\n#### 5. Tree View\n\nThis shows a hierarchical view of your notes, similar to how a folder structure would appear in your filesystem. You can also click in the tree view to navigate around your notes.\n\n#### 6. Backlinks\n\nThis shows a list of other notes that have links to the current note. More on links in Section 3 of the tutorial.\n\n> 💡 VS Code lets you reposition any of these windows as you'd like, so feel free to rearrange the windows into the view that works best for you!\n\n### Next Steps\n\n- You've completed navigation basics! You can go back to the [[tutorial]] page and check off the Navigation Basics checkbox to mark your progress.\n- Next is Tutorial Step 2: [[tutorial.2-taking-notes]]\n\n---\n[[Tutorial Home Page| tutorial]]\n","n":0.055}}},{"i":15,"$":{"0":{"v":"Things to Learn","n":0.577},"1":{"v":"\n## Under AI/ML Stuff\n\n- Normalized root mean squared error\n- Spearman correlation\n- R2 score\n- Normalized mean absolute error\n\n### Models\n\n- Random Forest\n- KNN\n- LassoLars\n\n### Programming Stuff\n\n- Review Treeshaking\n- Race condition\n- 4 Principles of OOP\n- Checksum\n- SHA1\n","n":0.171}}},{"i":16,"$":{"0":{"v":"Home Automation","n":0.707},"1":{"v":"## PiHole\n\n## Home Assistant\n\n## Smart Meter\n\n- Centron Openway Itron\n- [Dev Kit Link](https://developer.itron.com/dev-kit-catalog)\n\n## Smart Meter HAN Device\n\n- Rainforest Eagle-200\n\n## Open Energy Monitor Website\n\nGood source of general information about all things home electriicty\n\n[Open Energy Monitor Website](https://learn.openenergymonitor.org/electricity-monitoring/ac-power-theory/introduction)\n\n## Solar Edge API\n","n":0.164}}},{"i":17,"$":{"0":{"v":"General","n":1}}},{"i":18,"$":{"0":{"v":"Math","n":1}}},{"i":19,"$":{"0":{"v":"Graph Theory","n":0.707},"1":{"v":"## General Info\n\nIn mathematics, graph theory is the study of graphs, which are mathematical structures used to model pairwise relations between objects. A graph in this context is made up of vertices (also called nodes or points) which are connected by edges (also called links or lines). A distinction is made between undirected graphs, where edges link two vertices symmetrically, and directed graphs, where edges link two vertices asymmetrically. Graphs are one of the principal objects of study in discrete mathematics.\n\n![Grap Map](/assets/graph-map.png){width: 300px}\n","n":0.11}}},{"i":20,"$":{"0":{"v":"Gauss Summation","n":0.707},"1":{"v":"## Gauss Summation\n\nAdding total number of pairs is done with the help of this formula:\n\n$\nn(n+1)/2\n$\n","n":0.258}}},{"i":21,"$":{"0":{"v":"Devnotes","n":1},"1":{"v":"\n## Here be all the Notes!\n\nThis section is devoted to all software / web dev info I have compiled in my brain!\n","n":0.213}}},{"i":22,"$":{"0":{"v":"Azure","n":1}}},{"i":23,"$":{"0":{"v":"Ai","n":1}}},{"i":24,"$":{"0":{"v":"Natural Language Processing","n":0.577},"1":{"v":"## General Info\n\nNLP enables you to create software that can:\n\n- Analyze and interpret text in documents, email messages, and other sources.\n- Interpret spoken language, and synthesize speech responses.\n- Automatically translate spoken or written phrases between languages.\n- Interpret commands and determine appropriate actions.\n\n## Natural language processing in Microsoft Azure\n\n<table aria-label=\"Natural language processing in Microsoft Azure\" class=\"table\">\n<thead>\n<tr>\n<th>Service</th>\n<th>Capabilities</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Language</strong></td>\n<td>Use this service to access features for understanding and analyzing text, training language models that can understand spoken or text-based commands, and building intelligent applications.</td>\n</tr>\n<tr>\n<td><strong>Translator</strong></td>\n<td>Use this service to translate text between more than 60 languages.</td>\n</tr>\n<tr>\n<td><strong>Speech</strong></td>\n<td>Use this service to recognize and synthesize speech, and to translate spoken languages.</td>\n</tr>\n</tbody>\n</table>\n\n## Microsoft Luis Demo\n\n[Microsoft Luis](https://aidemos.microsoft.com/luis/demo)\n\nConversational AI in Microsoft Azure\n\n<table aria-label=\"Conversational AI in Microsoft Azure\" class=\"table\">\n<thead>\n<tr>\n<th>Service</th>\n<th>Capabilities</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>QnA Maker</strong></td>\n<td>This cognitive service enables you to quickly build a <em>knowledge base</em> of questions and answers that can form the basis of a dialog between a human and an AI agent.</td>\n</tr>\n<tr>\n<td><strong>Azure Bot Service</strong></td>\n<td>This service provides a platform for creating, publishing, and managing bots. Developers can use the <em>Bot Framework</em> to create a bot and manage it with Azure Bot Service - integrating back-end services like QnA Maker and LUIS, and connecting to channels for web chat, email, Microsoft Teams, and others.</td>\n</tr>\n</tbody>\n</table>\n\n## Conversational AI\n\nWhile many organizations publish support information and answers to frequently asked questions (FAQs) that can be accessed through a web browser or dedicated app. The complexity of the systems and services they offer means that answers to specific questions are hard to find. Often, these organizations find their support personnel being overloaded with requests for help through phone calls, email, text messages, social media, and other channels.\n\nA Language Understanding application defines a model consisting of intents and entities. Utterances are used to train the model to identify the most likely intent and the entities to which it should be applied based on a given input.\n\n### Utterances\n\nAn utterance is an example of something a user might say, and which your application must interpret. *Ex: (\"Switch the fan on.\" or \"Turn on the light.\")*\n\n### Entities\n\nAn entity is an item to which an utterance refers. *Ex: (\"Switch the **fan** on.\" or \"Turn on the **light**.\"*)\n\n### Intents\n\nAn intent represents the purpose, or goal, expressed in a user's utterance. For example, for both of the previously considered utterances, the intent is to turn a device on; so in your Conversational Language Understanding application, you might define a TurnOn intent that is related to these utterances.\n\nThe intent should be a concise way of grouping the utterance tasks. Of special interest is the None intent. You should consider always using the None intent to help handle utterances that do not map any of the utterances you have entered. The None intent is considered a fallback, and is typically used to provide a generic response to users when their requests don't match any other intent.\n\n## Text Analysis\n\nText analytics is a process where an artificial intelligence (AI) algorithm, running on a computer, evaluates these same attributes in text, to determine specific insights. A person will typically rely on their own experiences and knowledge to achieve the insights. A computer must be provided with similar knowledge to be able to perform the task. There are some commonly used techniques that can be used to build software to analyze text, including:\n\n- Statistical analysis of terms used in the text. For example, removing common \"stop words\" (words like \"the\" or \"a\", which reveal little semantic information about the text), and performing frequency analysis of the remaining words (counting how often each word appears) can provide clues about the main subject of the text.\n- Extending frequency analysis to multi-term phrases, commonly known as N-grams (a two-word phrase is a bi-gram, a three-word phrase is a tri-gram, and so on).\n- Applying stemming or lemmatization algorithms to normalize words before counting them - for example, so that words like \"power\", \"powered\", and \"powerful\" are interpreted as being the same word.\n- Applying linguistic structure rules to analyze sentences - for example, breaking down sentences into tree-like structures such as a noun phrase, which itself contains nouns, verbs, adjectives, and so on.\n- Encoding words or terms as numeric features that can be used to train a machine learning model. For example, to classify a text document based on the terms it contains. This technique is often used to perform sentiment analysis, in which a document is classified as positive or negative.\n- Creating vectorized models that capture semantic relationships between words by assigning them to locations in n-dimensional space. This modeling technique might, for example, assign values to the words \"flower\" and \"plant\" that locate them close to one another, while \"skateboard\" might be given a value that positions it much further away.\n","n":0.036}}},{"i":25,"$":{"0":{"v":"Model Evaluation","n":0.707},"1":{"v":"## Model Eval Metrics\n\n### For Clustering Models\n\n- **Average Distance to Other Center**: This indicates how close, on average, each point in the cluster is to the centroids of all other clusters.\n- **Average Distance to Cluster Center**: This indicates how close, on average, each point in the cluster is to the centroid of the cluster.\n- **Number of Points**: The number of points assigned to the cluster.\n- **Maximal Distance to Cluster Center**: The maximum of the distances between each point and the centroid of that point’s cluster. If this number is high, the cluster may be widely dispersed. This statistic in combination with the Average Distance to Cluster Center helps you determine the cluster’s spread.\n\n### For Classification Models\n\n- **Accuracy**: The ratio of correct predictions (true positives + true negatives) to the total number of predictions. In other words, what proportion of diabetes predictions did the model get right?\n- **Precision**: The fraction of positive cases correctly identified (the number of true positives divided by the number of true positives plus false positives). In other words, out of all the patients that the model predicted as having diabetes, how many are actually diabetic?\n- **Recall**: The fraction of the cases classified as positive that are actually positive (the number of true positives divided by the number of true positives plus false negatives). In other words, out of all the patients who actually have diabetes, how many did the model identify?\n- **F1 Score**: An overall metric that essentially combines precision and recall.\n- **AUC**:\n\nOf these metric, accuracy is the most intuitive. However, you need to be careful about using simple accuracy as a measurement of how well a model works. Suppose that only 3% of the population is diabetic. You could create a model that always predicts 0 and it would be 97% accurate - just not very useful! For this reason, most data scientists use other metrics like precision and recall to assess classification model performance.\n\nAbove the list of metrics, note that there's a Threshold slider. Remember that what a classification model predicts is the probability for each possible class. In the case of this binary classification model, the predicted probability for a positive (that is, diabetic) prediction is a value between 0 and 1. By default, a predicted probability for diabetes including or above 0.5 results in a class prediction of 1, while a prediction below this threshold means that there's a greater probability of the patient not having diabetes (remember that the probabilities for all classes add up to 1), so the predicted class would be 0. Try moving the threshold slider and observe the effect on the confusion matrix. If you move it all the way to the left (0), the Recall metric becomes 1, and if you move it all the way to the right (1), the Recall metric becomes 0.\n\nLook above the Threshold slider at the ROC curve (ROC stands for receiver operating characteristic, but most data scientists just call it a ROC curve). Another term for recall is True positive rate, and it has a corresponding metric named False positive rate, which measures the number of negative cases incorrectly identified as positive compared the number of actual negative cases. Plotting these metrics against each other for every possible threshold value between 0 and 1 results in a curve. In an ideal model, the curve would go all the way up the left side and across the top, so that it covers the full area of the chart. The larger the area under the curve (which can be any value from 0 to 1), the better the model is performing - this is the AUC metric listed with the other metrics below. To get an idea of how this area represents the performance of the model, imagine a straight diagonal line from the bottom left to the top right of the ROC chart. This represents the expected performance if you just guessed or flipped a coin for each patient - you could expect to get around half of them right, and half of them wrong, so the area under the diagonal line represents an AUC of 0.5. If the AUC for your model is higher than this for a binary classification model, then the model performs better than a random guess.\n","n":0.038}}},{"i":26,"$":{"0":{"v":"Ml Model as a Service","n":0.447},"1":{"v":"## General Info\n\nIn Azure Machine Learning, you can deploy a service as an Azure Container Instances (ACI) or to an Azure Kubernetes Service (AKS) cluster. For production scenarios, an AKS deployment is recommended, for which you must create an inference cluster compute target. In this exercise, you'll use an ACI service, which is a suitable deployment target for testing, and does not require you to create an inference cluster.\n","n":0.12}}},{"i":27,"$":{"0":{"v":"Machine Learning","n":0.707},"1":{"v":"## General Info\n\nMachine Learning is the foundation for most artificial intelligence solutions, and the creation of an intelligent solution often begins with the use of machine learning to train a predictive model using historic data that you have collected.\n\n### Supervised Machine Learning\n\n- Regression - Historic Data to predict a numeric value\n- Classification - Model predicts a class to which an item belongs\n\n### Unsupervised Machine Learning\n\n- Clustering types of data bits\n\n### Regression\n\n*Regression* is a form of machine learning that is used to predict a numeric label based on an item's features. For example, an automobile sales company might use the characteristics of a car (such as engine size, number of seats, mileage, and so on) to predict its likely selling price. In this case, the characteristics of the car are the features, and the selling price is the label.\n\n#### Regression Performance Metrics\n\n**Mean Absolute Error (MAE)**: The average difference between predicted values and true values. This value is based on the same units as the label, in this case dollars. The lower this value is, the better the model is predicting.\n\n**Root Mean Squared Error (RMSE)**: The square root of the mean squared difference between predicted and true values. The result is a metric based on the same unit as the label (dollars). When compared to the MAE (above), a larger difference indicates greater variance in the individual errors (for example, with some errors being very small, while others are large).\n\n**Relative Squared Error (RSE)**: A relative metric between 0 and 1 based on the square of the differences between predicted and true values. The closer to 0 this metric is, the better the model is performing. Because this metric is relative, it can be used to compare models where the labels are in different units.\n\n**Relative Absolute Error (RAE)**: A relative metric between 0 and 1 based on the absolute differences between predicted and true values. The closer to 0 this metric is, the better the model is performing. Like RSE, this metric can be used to compare models where the labels are in different units.\n\n**Coefficient of Determination (R2)**:This metric is more commonly referred to as R-Squared, and summarizes how much of the variance between predicted and true values is explained by the model. The closer to 1 this value is, the better the model is performing.\n\n### Clustering\n\nClustering is a form of machine learning that is used to group similar items into clusters based on their features. For example, a researcher might take measurements of penguins, and group them based on similarities in their proportions.\n\nClustering is an example of unsupervised machine learning, in which you train a model to separate items into clusters based purely on their characteristics, or features. There is no previously known cluster value (or label) from which to train the model.\n\n### Normalizing Values\n\nWhen training a machine learning model, it is sometimes possible for larger values to dominate the resulting predictive function, reducing the influence of features that on a smaller scale. Typically, data scientists mitigate this possible bias by normalizing the numeric columns so they're on the similar scales.\n\n### Computer Vision\n\nComputer vision is one of the core areas of artificial intelligence (AI), and focuses on creating solutions that enable AI applications to \"see\" the world and make sense of it.\n\nOf course, computers don't have biological eyes that work the way ours do, but they are capable of processing images; either from a live camera feed or from digital photographs or videos. This ability to process images is the key to creating software that can emulate human visual perception.\n\nSome potential uses for computer vision include:\n\n- **Content Organization**: Identify people or objects in photos and organize them based on that identification. Photo recognition applications like this are commonly used in photo storage and social media applications.\n- **Text Extraction**: Analyze images and PDF documents that contain text and extract the text into a structured format.\n- **Spatial Analysis**: Identify people or objects, such as cars, in a space and map their movement within that space.\n\nTo an AI application, an image is just an array of pixel values. These numeric values can be used as features to train machine learning models that make predictions about the image and its contents.\n\nTo use the Computer Vision service, you need to create a resource for it in your Azure subscription. You can use either of the following resource types:\n\n- **Computer Vision**: A specific resource for the Computer Vision service. Use this resource type if you don't intend to use any other cognitive services, or if you want to track utilization and costs for your Computer Vision resource separately.\n- **Cognitive Services**: A general cognitive services resource that includes Computer Vision along with many other cognitive services; such as Text Analytics, Translator Text, and others. Use this resource type if you plan to use multiple cognitive services and want to simplify administration and development.\n\n## Cheat Sheet\n\n[Azure ML Cheat Sheet for Model Selection](https://docs.microsoft.com/en-us/azure/machine-learning/algorithm-cheat-sheet)\n","n":0.035}}},{"i":28,"$":{"0":{"v":"Computer Vision","n":0.707},"1":{"v":"## Computer Vision Models and Capabilities\n\n- Image Classification\n\n- Object Detection\n\n- Semantic Segmentation - Semantic segmentation is an advanced machine learning technique in which individual pixels in the image are classified according to the object to which they belong.\n\n- Image Analysis - You can create solutions that combine machine learning models with advanced image analysis techniques to extract information from images, including \"tags\" that could help catalog the image or even descriptive captions that summarize the scene shown in the image.\n\n- Face detection, analysis and recognition\n\n- Optical Character Recognition - is a technique used to detect and read text in images. You can use OCR to read text in photographs (for example, road signs or store fronts) or to extract information from scanned documents such as letters, invoices, or forms.\n\n## Computer vision services in Microsoft Azure\n\n<table aria-label=\"Computer vision services in Microsoft Azure\" class=\"table\">\n<thead>\n<tr>\n<th>Service</th>\n<th>Capabilities</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Computer Vision</strong></td>\n<td>You can use this service to analyze images and video, and extract descriptions, tags, objects, and text.</td>\n</tr>\n<tr>\n<td><strong>Custom Vision</strong></td>\n<td>Use this service to train custom image classification and object detection models using your own images.</td>\n</tr>\n<tr>\n<td><strong>Face</strong></td>\n<td>The Face service enables you to build face detection and facial recognition solutions.</td>\n</tr>\n<tr>\n<td><strong>Form Recognizer</strong></td>\n<td>Use this service to extract information from scanned forms and invoices.</td>\n</tr>\n</tbody>\n</table>\n\n## Analyzing images with the CV Service\n\n### Describing an image\n\nComputer Vision has the ability to analyze an image, evaluate the objects that are detected, and generate a human-readable phrase or sentence that can describe what was detected in the image. Depending on the image contents, the service may return multiple results, or phrases. Each returned phrase will have an associated confidence score, indicating how confident the algorithm is in the supplied description. The highest confidence phrases will be listed first.\n\nTo help you understand this concept, consider the following image of the Empire State building in New York. The returned phrases are listed below the image in the order of confidence.\n\n![NYC Skyline](/assets/black-white-buildings.png)\n\n- A black and white photo of a city\n- A black and white photo of a large city\n- A large white building in a city\n\n### Tagging visual features\n\nThe image descriptions generated by Computer Vision are based on a set of thousands of recognizable objects, which can be used to suggest tags for the image. These tags can be associated with the image as metadata that summarizes attributes of the image; and can be particularly useful if you want to index an image along with a set of key terms that might be used to search for images with specific attributes or contents.\n\nFor example, the tags returned for the Empire State building image include:\n\n- skyscraper\n- tower\n- building\n\n### Detecting objects\n\nThe object detection capability is similar to tagging, in that the service can identify common objects; but rather than tagging, or providing tags for the recognized objects only, this service can also return what is known as bounding box coordinates. Not only will you get the type of object, but you will also receive a set of coordinates that indicate the top, left, width, and height of the object detected, which you can use to identify the location of the object in the image, like this:\n\n![NYC Skyline Objects Highlighted](/assets/black-white-buildings-objects.png)\n\n### Detecting brands\n\nThis feature provides the ability to identify commercial brands. The service has an existing database of thousands of globally recognized logos from commercial brands of products.\n\nWhen you call the service and pass it an image, it performs a detection task and determine if any of the identified objects in the image are recognized brands. The service compares the brands against its database of popular brands spanning clothing, consumer electronics, and many more categories. If a known brand is detected, the service returns a response that contains the brand name, a confidence score (from 0 to 1 indicating how positive the identification is), and a bounding box (coordinates) for where in the image the detected brand was found.\n\nFor example, in the following image, a laptop has a Microsoft logo on its lid, which is identified and located by the Computer Vision service.\n\n![Laptop Brand](/assets/laptop.png)\n\n### Detecting faces\n\nThe Computer Vision service can detect and analyze human faces in an image, including the ability to determine age and a bounding box rectangle for the location of the face(s). The facial analysis capabilities of the Computer Vision service are a subset of those provided by the dedicated Face Service. If you need basic face detection and analysis, combined with general image analysis capabilities, you can use the Computer Vision service; but for more comprehensive facial analysis and facial recognition functionality, use the Face service.\n\nThe following example shows an image of a person with their face detected and approximate age estimated.\n\n![Face Recognition](/assets/face.png)\n\n### Categorizing an image\n\nComputer Vision can categorize images based on their contents. The service uses a parent/child hierarchy with a \"current\" limited set of categories. When analyzing an image, detected objects are compared to the existing categories to determine the best way to provide the categorization. As an example, one of the parent categories is `people_`. This image of a person on a roof is assigned a category of `people_`.\n\n### Computer Vision 86 Catergory Taxonomy\n\n[Link to Microsoft Docs List](https://docs.microsoft.com/en-us/azure/cognitive-services/computer-vision/category-taxonomy)\n\n### Detecting domain-specific content\n\nWhen categorizing an image, the Computer Vision service supports two specialized domain models:\n\n- **Celebrities** - The service includes a model that has been trained to identify thousands of well-known celebrities from the worlds of sports, entertainment, and business.\n- **Landmarks** - The service can identify famous landmarks, such as the Taj Mahal and the Statue of Liberty.\n\nFor example, when analyzing the following image for landmarks, the Computer Vision service identifies the Eiffel Tower, with a confidence of 99.41%.\n\n### Optical character recognition\n\nThe Computer Vision service can use optical character recognition (OCR) capabilities to detect printed and handwritten text in images. This capability is explored in the Read text with the Computer Vision service module on Microsoft Learn.\n\n### Additional capabilities\n\nIn addition to these capabilities, the Computer Vision service can:\n\n- **Detect image types** - for example, identifying clip art images or line drawings.\n- **Detect image color schemes** - specifically, identifying the dominant foreground, background, and overall colors in an image.\n- **Generate thumbnails** - creating small versions of images.\n- **Moderate content** - detecting images that contain adult content or depict violent, gory scenes.\n\n## Classifying Images with CV\n\nImage classification is a machine learning technique in which the object being classified is an image, such as a photograph.\n\nTo create an image classification model, you need data that consists of features and their labels. The existing data is a set of categorized images. Digital images are made up of an array of pixel values, and these are used as features to train the model based on the known image classes.\n\nYou can use a machine learning classification technique to predict which category, or class, something belongs to. Classification machine learning models use a set of inputs, which we call features, to calculate a probability score for each possible class and predict a label that indicates the most likely class that an object belongs to.\n\nThe model is trained to match the patterns in the pixel values to a set of class labels. After the model has been trained, you can use it with new sets of features to predict unknown label values.\n\nMost modern image classification solutions are based on deep learning techniques that make use of convolutional neural networks (CNNs) to uncover patterns in the pixels that correspond to particular classes. Training an effective CNN is a complex task that requires considerable expertise in data science and machine learning.\n\n### Model Evaluation\n\nModel training process is an iterative process in which the Custom Vision service repeatedly trains the model using some of the data, but holds some back to evaluate the model. At the end of the training process, the performance for the trained model is indicated by the following evaluation metrics:\n\n- **Precision**: What percentage of the class predictions made by the model were correct? For example, if the model predicted that 10 images are oranges, of which eight were actually oranges, then the precision is 0.8 (80%).\n- **Recall**: What percentage of class predictions did the model correctly identify? For example, if there are 10 images of apples, and the model found 7 of them, then the recall is 0.7 (70%).\n- **Average Precision (AP)**: An overall metric that takes into account both precision and recall).\n\n## Object Detection\n\nObject detection is a form of machine learning based computer vision in which a model is trained to recognize individual types of objects in an image, and to identify their location in the image.\n\n### Object detection vs. image classification\n\nImage classification is a machine learning based form of computer vision in which a model is trained to categorize images based on the primary subject matter they contain. Object detection goes further than this to classify individual objects within the image, and to return the coordinates of a bounding box that indicates the object's location.\n\n### Image Tagging\n\nBefore you can train an object detection model, you must tag the classes and bounding box coordinates in a set of training images.\n\n### Model training and evaluation\n\n- **Precision**: What percentage of class predictions did the model correctly identify? For example, if the model predicted that 10 images are oranges, of which eight were actually oranges, then the precision is 0.8 (80%).\n- **Recall**: What percentage of the class predictions made by the model were correct? For example, if there are 10 images of apples, and the model found 7 of them, then the recall is 0.7 (70%).\n- **Mean Average Precision (mAP)**: An overall metric that takes into account both precision and recall across all classes).\n\n## Face Detection\n\nFace detection involves identifying regions of an image that contain a human face, typically by returning bounding box coordinates that form a rectangle around the face, like this:\n\n![Face Detection](/assets/face-detection.png)\n\n### Facial Analysis\n\nMoving beyond simple face detection, some algorithms can also return other information, such as facial landmarks (nose, eyes, eyebrows, lips, and others).\n\n![Facial Landmarks](/assets/facial-landmarks.png)\n\nhese facial landmarks can be used as features with which to train a machine learning model from which you can infer information about a person, such as their perceived age or perceived emotional state.\n\n### Facial recognition\n\nA further application of facial analysis is to train a machine learning model to identify known individuals from their facial features. This usage is more generally known as facial recognition, and involves using multiple images of each person you want to recognize to train a model so that it can detect those individuals in new images on which it wasn't trained.\n\n### Use Cases for Face Detection and Analysis\n\n- **Security** - facial recognition can be used in building security applications, and increasingly it is used in smart phones operating systems for unlocking devices.\n- **Social media** - facial recognition can be used to automatically tag known friends in photographs.\n- **Intelligent monitoring** - for example, an automobile might include a system that monitors the driver's face to determine if the driver is looking at the road, looking at a mobile device, or shows signs of tiredness.\n- **Advertising** - analyzing faces in an image can help direct advertisements to an appropriate demographic audience.\n- **Missing persons** - using public cameras systems, facial recognition can be used to identify if a missing person is in the image frame.\n- **Identity validation** - useful at ports of entry kiosks where a person holds a special entry permit.\n\n## Text Detection\n\n### Optical Character Recognition (OCR)\n\nThe basic foundation of processing printed text is optical character recognition (OCR), in which a model can be trained to recognize individual shapes as letters, numerals, punctuation, or other elements of text. Much of the early work on implementing this kind of capability was performed by postal services to support automatic sorting of mail based on postal codes. Since then, the state-of-the-art for reading text has moved on, and it's now possible to build models that can detect printed or handwritten text in an image and read it line-by-line or even word-by-word.\n\n### Machine Reading Comprehension (MRC)\n\nAt the other end of the scale, there is machine reading comprehension (MRC), in which an AI system not only reads the text characters, but can use a semantic model to interpret what the text is about.\n","n":0.022}}},{"i":29,"$":{"0":{"v":"Challenges and Risks","n":0.577},"1":{"v":"\n## Challenges and risks with AI\n\n<table aria-label=\"Challenges and risks with AI\" class=\"table\">\n<thead>\n<tr>\n<th>Challenge or Risk</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bias can affect results</td>\n<td>A loan-approval model discriminates by gender due to bias in the data with which it was trained</td>\n</tr>\n<tr>\n<td>Errors may cause harm</td>\n<td>An autonomous vehicle experiences a system failure and causes a collision</td>\n</tr>\n<tr>\n<td>Data could be exposed</td>\n<td>A medical diagnostic bot is trained using sensitive patient data, which is stored insecurely</td>\n</tr>\n<tr>\n<td>Solutions may not work for everyone</td>\n<td>A home automation assistant provides no audio output for visually impaired users</td>\n</tr>\n<tr>\n<td>Users must trust a complex system</td>\n<td>An AI-based financial tool makes investment recommendations -  what are they based on?</td>\n</tr>\n<tr>\n<td>Who's liable for AI-driven decisions?</td>\n<td>An innocent person is convicted of a crime based on evidence from facial recognition – who's responsible?</td>\n</tr>\n</tbody>\n</table>\n\n## 6 Principles of Responsible AI\n\n1. Fairness\n2. Reliability and Safety\n3. Privacy and Security\n4. Inclusiveness\n5. Transparency\n6. Accountability\n","n":0.088}}},{"i":30,"$":{"0":{"v":"UX","n":1}}},{"i":31,"$":{"0":{"v":"User Story","n":0.707},"1":{"v":"## Definition\n\nA **user story** is a fictional one-sentence story told from the persona’s point of view to inspire and inform design decisions.\n\n![User Story](/assets/user-story.png)\n\n### The Happy Path\n\nThe user reaches their goal without issue because everything goes as expected.\n\n### Edge Case\n\nAn edge case is a rare situation or unexpected problem that interrupts a standard user experience. Good UX anticipates edge cases and reroute users back to the happy path when things don't go as planned. In edge cases, the obstacle is often beyond the user's control to fix.\n\n- Create personas and user stories\n- Thoroughly review the project before launch\n- Use Wireframes\n\n## User Journey\n\nA user journey is the series of experiences a user has as they achieve a specific goal. User journeys built off the personas and stories you've already created.\n\n### User Journey Map\n\nA journey map is just what it sounds like, an illustration of what the user goes through to achieve their goals. Think of it like reading a book. If the persona is your character, the user story is your plot, and the journey map is your story outline.\n\n#### Benefits of User Journey Mapping\n\n- Helps UX Designer create obstacle free paths for users\n- Reduces impact of designer bias\n- Highlights new painpoints\n- Identifies improvment opportunities\n","n":0.07}}},{"i":32,"$":{"0":{"v":"Unix","n":1}}},{"i":33,"$":{"0":{"v":"File Structure","n":0.707},"1":{"v":"## /bin (Binary) and /sbin (System Binary)\n\nBinary folders stuff like `ls` `cat`\n\n`/sbin` is for system binaries\n\n## /boot (Boot Folder)\n\nBoot files go here (ex Grub)\n\n## /cdrom (CDROM Folder)\n\nA legacy mounting folder for cdrom not used very often.\n\n## /dev (Devices Folder)\n\nRemember that in Unix everything is a file. This includes stuff like your hard drives (and their partitions), mouse, keyboard, etc.\n\n## /etc (Etcetera Folder)\n\nSome people call it the edit to configure folder.\n\nThis is where all the configs are stored for system wide applications (like `apt`)\n\n## /lib /lib32 /lib64 (Library Folders)\n\nFiles that give added functionality and can be shared by programs.\n\n## /mnt (Mount Folder) /media (External Media)\n\nThis is where you would find other mounted drives, external drives, usb sticks, sdcards.\n\nMost external store will be automatically installed to media.\n\nIf you need to install something manually mount it in the `/mnt` folder\n\n## /opt (Optional Folder)\n\nUser installed software. A good place to also place user developed software.\n\n## /proc (Process Folder)\n\nFolder containing all the processes that the system is running and is sorted by their `pid`\n\n## /root (Root User Folder)\n\nPretty self explanatory\n\n## /run\n\nNewer folder not in all distros, files here are generally stored in ram and gets wiped on reboot.\n\n## /snap (Snap Package Folder)\n\nSnaps are self-contained packages that work across a range of Linux distributions. This is unlike traditional Linux package management approaches, which require specifically adapted packages for each Linux distribution.\n\n## /srv (Service Folder)\n\nIf you run a webserver, accessed files will be found here.\n\n## /sys (System Folder)\n\nA way to interact with the kernel, this directory is similar to the run directory and is created every time if boots up.\n\n## /tmp (Temporary Folder)\n\nTemporary files, usually emptied during reboot\n\n## /usr\n\nUser Application Space, stuff that is installed that is only used by users.\n\nAlso known as Unix System Resource which means non essential applications\n\nAlso has child `/bin /sbin /etc /src /lib` subfolders\n\n## /var\n\nVariable directory, contains files and directories that are expected to grow in size.\n\n## /home\n\nPersonal files and documents sorted by users. Also contained theme config files.\n","n":0.055}}},{"i":34,"$":{"0":{"v":"Programming","n":1}}},{"i":35,"$":{"0":{"v":"Zero Knowledge Proofs","n":0.577},"1":{"v":"## General Info\n\nIn cryptography, a zero-knowledge proof or zero-knowledge protocol is a method by which one party (the prover) can prove to another party (the verifier) that a given statement is true while the prover avoids conveying any additional information apart from the fact that the statement is indeed true. The essence of zero-knowledge proofs is that it is trivial to prove that one possesses knowledge of certain information by simply revealing it; the challenge is to prove such possession without revealing the information itself or any additional information.\n\n## Examples\n\n1. Penguin and the Peephole\n2. Note in the Combo Box\n3. 3 Color Maps\n\n## NP Completeness\n\nNP Complete Problem - a complex problem that when solved proves a lot of similar problems.\n","n":0.092}}},{"i":36,"$":{"0":{"v":"Solid","n":1},"1":{"v":"## SOLID\n\n- Single Responsibility Principle\n- Open/Closed Principle\n- Liskov Substitution Principle\n- Interface Segregation Principle\n- Dependency Inversion Principle\n\n### S - Single Responsibility\n\nStates that a class (or object or module.. you get the point) should only have one responsibility. This doesn’t mean that an object can only do one thing, but it does mean that everything an object does should be part of one responsibility.\n\nA class should have only one reason to change:\n\nThis description can be a little misleading as it would seem to suggest that an object should only do one thing. What is meant by this assertion, however, is that an object should have a cohesive set of behaviors, together comprising a single responsibility that, if changed, would require the modification of the object’s definition.  More simply, an object’s definition should only have to be modified due to changes to a single responsibility within the system.\n\n#### Object Role Stereotypes\n\nOne approach which can aid in the organization of behavior within a system is the use of Object Role Stereotypes.  Object Role Stereotypes are a set of general, pre-established roles which commonly occur across object-oriented architectures.  By establishing a set of role stereotypes, developers can provide themselves with a set of templates which they can use as they go through the mental exercise of decomposing behavior into cohesive components.\n\n- Information holder – an object designed to know certain information and provide that information to other objects.\n- Structurer – an object that maintains relationships between objects and information about those relationships.\n- Service provider – an object that performs specific work and offers services to others on demand.\n- Controller – an object designed to make decisions and control a complex task.\n- Coordinator – an object that doesn’t make many decisions but, in a rote or mechanical way, delegates work to other objects.\n- Interfacer – an object that transforms information or requests between distinct parts of a system.\n\nWhile not prescriptive, this set of role stereotypes provides an excellent mental framework for aiding in the software design process.  Once you have an established  set of role stereotypes to work within, you’ll find it easier to group behaviors into cohesive groups of responsibilities related to the object’s intended role.\n\n### O - Open-Closed Principle\n\nOpen-Closed Principle means our JavaScript modules should be open to extension, but closed to modification.\n\nMeaning that if someone wants to extend our module’s behavior, they won’t need to modify existing code if they don’t want to.\n\nThere’s a very easy rule of thumb you can follow here. If I have to open the JS file your module and make a modification in order to extend it, you’ve failed the open closed principle.\n\n### L - Liskov Substitution Principle\n\nThe Liskov substitution principle (LSP) is a particular definition of a subtyping relation, called strong behavioral subtyping, that was initially introduced by Barbara Liskov in a 1988 conference keynote address titled Data abstraction and hierarchy. It is based on the concept of \"substitutability\" – a principle in object-oriented programming stating that an object (such as a class) and a sub-object (such as a class that extends the first class) must be interchangeable without breaking the program. It is a semantic rather than merely syntactic relation, because it intends to guarantee semantic interoperability of types in a hierarchy, object types in particular.\n\nA great example illustrating LSP was how sometimes something that sounds right in natural language doesn't quite work in code.\n\nIn mathematics, a Square is a Rectangle. Indeed it is a specialization of a rectangle. The \"is a\" makes you want to model this with inheritance. However if in code you made Square derive from Rectangle, then a Square should be usable anywhere you expect a Rectangle. This makes for some strange behavior.\n\nImagine you had `SetWidth` and `SetHeight` methods on your `Rectangle` base class; this seems perfectly logical. However if your `Rectangle` reference pointed to a `Square`, then `SetWidth` and `SetHeight` doesn't make sense because setting one would change the other to match it. In this case Square fails the Liskov Substitution Test with `Rectangle` and the abstraction of having `Square` inherit from Rectangle is a bad one.\n\nFor example, if `MySubclass` is a subclass of `MyClass`, you should be able to replace `MyClass` with `MySubclass` without bunging up the program.\n\n### I - Interface Segregation\n\nClients should not be forced to depend on methods they do not use.\n\nWhen clients depend upon objects which contain methods used only by other clients, or are forced to implement unused methods with degenerate functionality (potentially leading to Liskov Substitution Principle violations), this can lead to fragile code. This occurs when an object serves as an implementation for a non-cohesive interface.\n\nThe Interface Segregation Principle is similar to the Single Responsibility Principle in that both deal with the cohesion of responsibilities. In fact, the ISP can be understood as the application of the SRP to an object’s public interface.\n\n### - Dependency Inversion Principle\n\nDependency Injection and Inversion of Controls also mean the same thing. This is the most famous principle out of the bunch.\n\nDependency Injection is all about handing over control from the function itself to the caller of the function. In our case its defining who controls the type of parameters the function receives.\n\nA. High-level modules should not depend on low-level modules. Both should depend on abstractions.\n\nB. Abstractions should not depend upon details.  Details should depend upon abstractions.\n\nThe primary concern of the Dependency Inversion Principle is to ensure that the main components of an application or framework remain decoupled from the ancillary components providing low-level implementation details.  This ensures that the important parts of an application or framework aren’t affected when the low level components need to change.\n\nBad:\n\n```javascript\nfunction awesomeSauce(dispatcher) {\n  dispatcher.trigger('awesome/sauce');\n}\n\nfunction awesomeSauceListener(dispatcher) {\n  dispatcher.on('awesome/sauce', () => {\n    alert('awesome!');\n  });\n}\n```\n\nGood:\n\n```javascript\nfunction awesomeSauce(dispatch) {\n  dispatch('awesome/sauce');\n}\n\nfunction awesomeSauceListener(listen) {\n  listen('awesome/sauce', () => {\n    alert('awesome!');\n  });\n}\n```\n","n":0.032}}},{"i":37,"$":{"0":{"v":"Serialization","n":1}}},{"i":38,"$":{"0":{"v":"Princicples","n":1},"1":{"v":"## Composition Over Inheretance\n\nIs the principle that classes should achieve polymorphic behavior and code reuse by their composition (by containing instances of other classes that implement the desired functionality) rather than inheritance from a base or parent class. This is an often-stated principle of OOP, such as in the influential book Design Patterns (1994).\n\n## SOLID JavaScript\n\n- Single Responsibility Principle\n- Open/Closed Principle\n- Liskov Substitution Principle\n- Interface Segregation Principle\n- Dependency Inversion Principle\n\n### S - Single Responsibility\n\nStates that a class (or object or module.. you get the point) should only have one responsibility. This doesn’t mean that an object can only do one thing, but it does mean that everything an object does should be part of one responsibility.\n\nA class should have only one reason to change:\n\nThis description can be a little misleading as it would seem to suggest that an object should only do one thing. What is meant by this assertion, however, is that an object should have a cohesive set of behaviors, together comprising a single responsibility that, if changed, would require the modification of the object’s definition.  More simply, an object’s definition should only have to be modified due to changes to a single responsibility within the system.\n\n#### Object Role Stereotypes\n\nOne approach which can aid in the organization of behavior within a system is the use of Object Role Stereotypes.  Object Role Stereotypes are a set of general, pre-established roles which commonly occur across object-oriented architectures.  By establishing a set of role stereotypes, developers can provide themselves with a set of templates which they can use as they go through the mental exercise of decomposing behavior into cohesive components.\n\n- Information holder – an object designed to know certain information and provide that information to other objects.\n- Structurer – an object that maintains relationships between objects and information about those relationships.\n- Service provider – an object that performs specific work and offers services to others on demand.\n- Controller – an object designed to make decisions and control a complex task.\n- Coordinator – an object that doesn’t make many decisions but, in a rote or mechanical way, delegates work to other objects.\n- Interfacer – an object that transforms information or requests between distinct parts of a system.\n\nWhile not prescriptive, this set of role stereotypes provides an excellent mental framework for aiding in the software design process.  Once you have an established  set of role stereotypes to work within, you’ll find it easier to group behaviors into cohesive groups of responsibilities related to the object’s intended role.\n\n### O - Open-Closed Principle\n\nOpen-Closed Principle means our JavaScript modules should be open to extension, but closed to modification.\n\nMeaning that if someone wants to extend our module’s behavior, they won’t need to modify existing code if they don’t want to.\n\nThere’s a very easy rule of thumb you can follow here. If I have to open the JS file your module and make a modification in order to extend it, you’ve failed the open closed principle.\n\n### L - Liskov Substitution Principle\n\nThe Liskov substitution principle (LSP) is a particular definition of a subtyping relation, called strong behavioral subtyping, that was initially introduced by Barbara Liskov in a 1988 conference keynote address titled Data abstraction and hierarchy. It is based on the concept of \"substitutability\" – a principle in object-oriented programming stating that an object (such as a class) and a sub-object (such as a class that extends the first class) must be interchangeable without breaking the program. It is a semantic rather than merely syntactic relation, because it intends to guarantee semantic interoperability of types in a hierarchy, object types in particular.\n\nA great example illustrating LSP was how sometimes something that sounds right in natural language doesn't quite work in code.\n\nIn mathematics, a Square is a Rectangle. Indeed it is a specialization of a rectangle. The \"is a\" makes you want to model this with inheritance. However if in code you made Square derive from Rectangle, then a Square should be usable anywhere you expect a Rectangle. This makes for some strange behavior.\n\nImagine you had `SetWidth` and `SetHeight` methods on your `Rectangle` base class; this seems perfectly logical. However if your `Rectangle` reference pointed to a `Square`, then `SetWidth` and `SetHeight` doesn't make sense because setting one would change the other to match it. In this case Square fails the Liskov Substitution Test with `Rectangle` and the abstraction of having `Square` inherit from Rectangle is a bad one.\n\nFor example, if `MySubclass` is a subclass of `MyClass`, you should be able to replace `MyClass` with `MySubclass` without bunging up the program.\n\n### I - Interface Segregation\n\nClients should not be forced to depend on methods they do not use.\n\nWhen clients depend upon objects which contain methods used only by other clients, or are forced to implement unused methods with degenerate functionality (potentially leading to Liskov Substitution Principle violations), this can lead to fragile code. This occurs when an object serves as an implementation for a non-cohesive interface.\n\nThe Interface Segregation Principle is similar to the Single Responsibility Principle in that both deal with the cohesion of responsibilities. In fact, the ISP can be understood as the application of the SRP to an object’s public interface.\n\n### - Dependency Inversion Principle\n\nDependency Injection and Inversion of Controls also mean the same thing. This is the most famous principle out of the bunch.\n\nDependency Injection is all about handing over control from the function itself to the caller of the function. In our case its defining who controls the type of parameters the function receives.\n\nA. High-level modules should not depend on low-level modules. Both should depend on abstractions.\n\nB. Abstractions should not depend upon details.  Details should depend upon abstractions.\n\nThe primary concern of the Dependency Inversion Principle is to ensure that the main components of an application or framework remain decoupled from the ancillary components providing low-level implementation details.  This ensures that the important parts of an application or framework aren’t affected when the low level components need to change.\n\nBad:\n\n```javascript\nfunction awesomeSauce(dispatcher) {\n  dispatcher.trigger('awesome/sauce');\n}\n\nfunction awesomeSauceListener(dispatcher) {\n  dispatcher.on('awesome/sauce', () => {\n    alert('awesome!');\n  });\n}\n```\n\nGood:\n\n```javascript\nfunction awesomeSauce(dispatch) {\n  dispatch('awesome/sauce');\n}\n\nfunction awesomeSauceListener(listen) {\n  listen('awesome/sauce', () => {\n    alert('awesome!');\n  });\n}\n```\n\n## Publish / Subscribe Pattern\n\nIn software architecture, publish–subscribe is a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers, but instead categorize published messages into classes without knowledge of which subscribers, if any, there may be. Similarly, subscribers express interest in one or more classes and only receive messages that are of interest, without knowledge of which publishers, if any, there are.\n\nPublish–subscribe is a sibling of the message queue paradigm, and is typically one part of a larger message-oriented middleware system. Most messaging systems support both the pub/sub and message queue models in their API; e.g., Java Message Service (JMS).\n\nThis pattern provides greater network scalability and a more dynamic network topology, with a resulting decreased flexibility to modify the publisher and the structure of the published data.\n","n":0.03}}},{"i":39,"$":{"0":{"v":"Memoization","n":1},"1":{"v":"## Definition\n\nIn computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again. Memoization has also been used in other contexts (and for purposes other than speed gains), such as in simple mutually recursive descent parsing. Although related to caching, memoization refers to a specific case of this optimization, distinguishing it from forms of caching such as buffering or page replacement. In the context of some logic programming languages, memoization is also known as tabling.\n\nA memoized function \"remembers\" the results corresponding to some set of specific inputs. Subsequent calls with remembered inputs return the remembered result rather than recalculating it, thus eliminating the primary cost of a call with given parameters from all but the first call made to the function with those parameters. The set of remembered associations may be a fixed-size set controlled by a replacement algorithm or a fixed set, depending on the nature of the function and its use. A function can only be memoized if it is referentially transparent; that is, only if calling the function has exactly the same effect as replacing that function call with its return value. (Special case exceptions to this restriction exist, however.) While related to lookup tables, since memoization often uses such tables in its implementation, memoization populates its cache of results transparently on the fly, as needed, rather than in advance.\n\nMemoization is a way to lower a function's time cost in exchange for space cost; that is, memoized functions become optimized for speed in exchange for a higher use of computer memory space. The time/space \"cost\" of algorithms has a specific name in computing: computational complexity. All functions have a computational complexity in time (i.e. they take time to execute) and in space.\n\nAlthough a space–time tradeoff occurs (i.e., space used is speed gained), this differs from some other optimizations that involve time-space trade-off, such as strength reduction, in that memoization is a run-time rather than compile-time optimization. Moreover, strength reduction potentially replaces a costly operation such as multiplication with a less costly operation such as addition, and the results in savings can be highly machine-dependent (non-portable across machines), whereas memoization is a more machine-independent, cross-platform strategy.\n\n### Example Memoization Function in JS\n\n```javascript\n// a simple pure function to get a value adding 10\nconst add = (n) => (n + 10);\nconsole.log('Simple call', add(3));\n// a simple memoize function that takes in a function\n// and returns a memoized function\nconst memoize = (fn) => {\n  let cache = {};\n  return (...args) => {\n    let n = args[0];  // just taking one argument here\n    if (n in cache) {\n      console.log('Fetching from cache');\n      return cache[n];\n    }\n    else {\n      console.log('Calculating result');\n      let result = fn(n);\n      cache[n] = result;\n      return result;\n    }\n  }\n}\n// creating a memoized function for the 'add' pure function\nconst memoizedAdd = memoize(add);\nconsole.log(memoizedAdd(3));  // calculated\nconsole.log(memoizedAdd(3));  // cached\nconsole.log(memoizedAdd(4));  // calculated\nconsole.log(memoizedAdd(4));  // cached\n```\n\n### Is memoization same as caching?\n\nYes, kind of. Memoization is actually a specific type of caching. While caching can refer in general to any storing technique (like HTTP caching) for future use, memoizing specifically involves caching the return values of a function.\n\n## Use Cases\n\n- In order to memoize a function, it should be pure so that return values are the same for same inputs every time\n- Memoizing is a trade-off between added space and added speed and thus only significant for functions having a limited input range so that cached values can be made use of more frequently\n- It might look like you should memoize your API calls however it isn’t necessary because the browser automatically caches them for you. See HTTP caching for more detail\n- The best use case I found for memoized functions is for heavy computational functions which can significantly improve performance (factorial and fibonacci are not really good real world examples)\n- If you’re into React/Redux you can check out reselect which uses a memoized selector to ensure that calculations only happen when a change happens in a related part of the state tree.\n","n":0.039}}},{"i":40,"$":{"0":{"v":"Inversion of Control","n":0.577},"1":{"v":"## General Info\n\nWe call this \"inversion of control,\" when you take part of your program and give over control of its execution to another third party. There's an unspoken \"contract\" that exists between your code and the third-party utility -- a set of things you expect to be maintained.\n\nIn software engineering, inversion of control (IoC) is a programming principle. IoC inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework. A software architecture with this design inverts control as compared to traditional procedural programming: in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.\n\nInversion of control is used to increase modularity of the program and make it extensible, and has applications in object-oriented programming and other programming paradigms. The term was used by Michael Mattsson in a thesis,taken from there by Stefano Mazzocchi and popularized by him in 1999 in a defunct Apache Software Foundation project, Avalon, then further popularized in 2004 by Robert C. Martin and Martin Fowler.\n\nThe term is related to, but different from, the dependency inversion principle, which concerns itself with decoupling dependencies between high-level and low-level layers through shared abstractions. The general concept is also related to event-driven programming in that it is often implemented using IoC so that the custom code is commonly only concerned with the handling of events, whereas the event loop and dispatch of events/messages is handled by the framework or the runtime environment.\n","n":0.06}}},{"i":41,"$":{"0":{"v":"Aws","n":1}}},{"i":42,"$":{"0":{"v":"AWS X-Ray","n":0.707},"1":{"v":"## General Info\n\nX-Ray helps developers analyze and debug applications that utilize microservice architecture.\n","n":0.277}}},{"i":43,"$":{"0":{"v":"Amazon Simple Queue System (SQS)","n":0.447},"1":{"v":"## General Info\n\n- Fully managed queuing service\n- Decouple and scale serverless applications, microsystems, distributed systems\n\n### Limitations\n\n- Single consumer\n- Message replay ability\n","n":0.218}}},{"i":44,"$":{"0":{"v":"Amazon Simple Notification Service","n":0.5},"1":{"v":"## General Info\n\n- Pub / Sub Service\n- From many publishers to many subscribers\n- Can be used to trigger notification with push notifications and emails\n\n### Use Case\n\n- Storing, collecting and using real time data streams.\n- They can contain thousands of data sources.","n":0.156}}},{"i":45,"$":{"0":{"v":"AWS Kinesis","n":0.707},"1":{"v":"## General Info\n\nMakes it easy to collect, process and analyze realtime streaming data.\n\n- Real time\n- Fully managed\n- Scalable\n- Pay as you go\n\nThere are four types of service offerings:\n\n1. Kinesis Data Streams\n2. Kinesis Video Streams\n3. Kinesis Data Firehouse\n4. Kinesis Data Analytics\n\n## Use Cases\n\n- Log and Event Data Collection\n- Real time analytics\n- Mobile data capture\n- Gaming data feed\n\n## Key Concepts\n\n**Shard**: base throughput unit of the stream.\n\n- Append only log\n- Ordered sequence of records\n- Can ingest 1 MB/Sec\n- More shards means more ingestion capacity\n\n**Data Stream**:\n\n- Logical grouping of shards no bound on number of shards\n- Data is retained for retain data for 24hrs to 7 days\n\n**Partition Key**:\n\n- Meaningful identifier\n- Used to route data records to different shards\n\n**Sequence Number**:\n\n- Unique Identifier for each data record assigned by Kinesis on record creation\n\n**Data Record**:\n\n- Unit of data stored\n- Composed of a sequence number, partition key and data blob.\n- Max size of the blob is 1 MB\n\n**Data Producer**:\n\n- Application that emits data records to the stream\n- It assigns partition keys to records\n- Partition keys determine which shard consumes the data\n\n**Data Consumer**:\n\n- Application or AWS Service that gets the data from the stream\n","n":0.074}}},{"i":46,"$":{"0":{"v":"AWS Elastic Container Service","n":0.5}}},{"i":47,"$":{"0":{"v":"AWS Elastic BeanStalk","n":0.577},"1":{"v":"## Cheat Sheet\n\n- EBS Handles deployment from capacity provisioning, load balancing, auto-scaling to application health monitoring.\n- When you want to run an application but you dont want to have to think about the underlying infrastructure.\n- It costs nothing to use EBS on AWS only the provisioned resources (S3, RDS, EC2, ELB)\n- Recommended for test environments\n","n":0.135}}},{"i":48,"$":{"0":{"v":"AWS DynamoDB","n":0.707},"1":{"v":"## General Info\n\n## Cheat Sheet\n","n":0.447}}},{"i":49,"$":{"0":{"v":"Cloudwatch","n":1},"1":{"v":"## General Info\n\nAWS Resource Monitoring and Notification Service\n\n- Alarms\n- Logs\n- Metrics\n- X-Ray Traces\n- Events\n- App Monitoring\n- Insights\n","n":0.243}}},{"i":50,"$":{"0":{"v":"Appdevelopment","n":1}}},{"i":51,"$":{"0":{"v":"Flutterfire","n":1},"1":{"v":"## Version Change\n\n`flutter build` kept throwing an error regarding `minsdkversion` needing to be bumped up to version 19 from 16 which is what the flutter starter was setup initially but once firebase was added it required the bump up.\n\nThe `build.gradle` was found in `/root/android/app`\n","n":0.151}}},{"i":52,"$":{"0":{"v":"Amazon","n":1}}},{"i":53,"$":{"0":{"v":"Amazon Web Services","n":0.577},"1":{"v":"## Analytics\n\nAmazon Athena - Query S3 Data with SQL\n\nAmazon Cloudsearch - Managed Search Service\n\nAmazon Opensearch Service - Search and Visualize Petabytes of Text & Unstructured Data\n\nAmazon EMR - run and scale big data workloads\n\nAmazon Finspace - \n","n":0.164}}},{"i":54,"$":{"0":{"v":"WordPress","n":1},"1":{"v":"### Update only effects page when user is logged in\n\n- Make sure that the site is not using any kind of Cache/CDN PlugIn, this will save you lots of time troubleshooting WTF is happening.\n","n":0.171}}},{"i":55,"$":{"0":{"v":"Varyingvagrants","n":1},"1":{"v":"\n### Windows 10 Pro HyperV Startup Command\n\n` vagrant up --provider=hyperv `\n","n":0.302}}},{"i":56,"$":{"0":{"v":"UX Research","n":0.707},"1":{"v":"## General Info\n\n**UX research** focuses on understanding user behaviors, needs, and motivations through observation and feedback. Your product design should be built upon research and facts, not assumptions. UX research aligns what you, as the designer, think the user needs with what the user actually needs.\n\n![UX Research Diagram](/assets/ux-research.png)\n\n### Foundational Research\n\nFoundational research is always done before you start designing. Within the product development life cycle, foundational research happens during the brainstorm stage (stage one) to help you empathize with users, understand their needs, and inspire new design directions. During this stage, you will also make personas and user stories, which you'll learn about soon.\n\nQuestions you might consider during foundational research include:\n\n- What should we build?\n- What are the user’s problems?\n- How can we solve those problems?\n- Am I aware of my own biases, and am I able to filter them as I do research?\n\nThere are lots of research methods for conducting foundational research, but many of them are based on observations. Common foundational research methods include:\n\n- **Interviews**: A research method used to collect in-depth information on people's opinions, thoughts, experiences, and feelings. You’ll often conduct interviews of your target users themselves.\n\n- **Surveys**: An activity where many people are asked the same questions in order to understand what most people think about a product.\n\n- **Focus groups**: A small group of people whose reactions are studied. For example, your focus group might bring together eight users to discuss their perspectives about new features in your design. A focus group is usually run by a moderator who guides the group on a certain topic of conversation.\n\n- **Competitive audit**: An overview of your competitors’ strengths and weaknesses. You'll conduct your own competitive audit later in the course, so you will understand this research method well!\n\n- **Field studies**: Research activities that take place in the user's context or personal environment, rather than in an office or lab.\n\n- **Diary studies**: A research method used to collect qualitative data about user behaviors, activities, and experiences over time. Often, a user will log, or diary, about their daily activities and provide information about their behaviors and needs, which can help inform your designs.\n\n### Design Research\n\nDesign research is done while you design. Within the product development lifecycle, design research happens during the design stage (stage three) to help inform your designs, to fit the needs of users, and to reduce risk. Each time you create a new version of your design, new research should be done to evaluate what works well and what needs to be changed.\n\nIn design research, your goal is to answer the question: How should we build it?\n\nThe amount of design research you conduct will vary depending on where you work and what you’re building. The most common method used to conduct design research is a **usability study**, which is a technique to evaluate a product by testing it on users. The goal of usability studies is to identify pain points that the user experiences with your prototypes, so the issues can be fixed before the product launches. You’ll conduct your own usability study in the next course of this certificate program.\n\n- **A/B testing**: A research method that evaluates and compares two different aspects of a product to discover which of them is most effective. For example, you might have users evaluate two layouts for the homepage of your app to find out which layout is more effective.\n\n- **Cafe or guerrilla studies**: A research method where user feedback is gathered by taking a design or prototype into the public domain and asking passersby for their thoughts. For example, you might sit in a local coffee shop and ask customers if they would be willing to test your app design for a couple of minutes and provide feedback.\n\n- **Card sorting**: A research method that instructs study participants to sort individual labels written on notecards into categories that make sense to them. This type of research is largely used to figure out the information architecture of your project, which we’ll discuss in the next course of the program — Course 3: Build Wireframes and Low-Fidelity Designs.\n\n- **Intercepts**: A research method that gathers on-site feedback from users as they engage in the activities being researched. Intercepts are often conducted in the field, so this type of research is often considered a subset of field research. An intercept study can provide quick, high-level feedback.\n\n### Post Launch Research\n\nPost-launch research is done after the design is complete and your product has launched. Within the product development life cycle, post-launch research happens after the launch stage (stage five) to help validate that the product is meeting user needs through established metrics.\n\nIn post-launch research, your goal is to answer the question: Did we succeed? This research will tell you how your final product is performing based on established metrics, such as adoption, usage, user satisfaction, and more.\n\nYou should use research methods that give insight into what the user thinks of your product and if their experience using your product aligns with how you intended it to function. Research methods you might use to conduct post-launch research include:\n\n- **A/B testing**\n\n- **Usability studies**\n\n- **Surveys**\n\n- **Logs analysis**: A research method used to evaluate recordings of users while they interact with your design, tools, etc.\n\n## Types of Research\n\n### Primary Research\n\nPrimary research is research you conduct yourself. Information from direct interactions with users, like interviews, surveys, or usability studies, are considered primary research.\n\nMethods:\n\n- Interviews\n- Surveys\n- Usability Study\n\n### Secondary Research\n\nSecondary research is research that uses information someone else has put together. Secondary research can be information from books, articles, or journals. You've probably done secondary research before and not even realized it.\n\n### Quantitative Research\n\nQuantitative research focuses on data that can be gathered by counting or measuring. Quantitative research is often based on surveys of large groups of people using numerical answers. This type of research often answers questions like: How many? How much? If you want to know how the majority of users are experiencing a product, you should use quantitative research.\n\n### Qualitative Research\n\nQualitative research focuses on observations. Qualitative research is often based on interviews, where we focus on a smaller number of users and understand their needs in greater detail. This type of research answers questions like: Why? Or, how did this happen? If you want to know why users are having a bad experience with your product and how to improve it, you should use qualitative research.\n\n![Types of Research](/assets/types-of-research.png)\n\n## Types of Bias in UX Research\n\n- **Confirmation Bias** and ways to overcome:\n  - Ask open ended questions\n  - Active listening\n  - Include a large sample of users\n- **False Consensus Bias** and ways to overcome\n  - Identify your assumption\n  - Survey large groups of people\n- **Recency Bias** and ways to overcome\n  - Take detailed notes and recordings\n  - Interview participants consistently\n- **Primacy Bias**...\n  - Take detailed notes and recordings\n  - Interview participants consistently\n- **Implicit Bias**...\n  - Reflect on our behaviors ask others to point them out\n- **Sunk Cost Fallacy**...\n  - Break down into smaller phases\n  - Outline points wether to continue or stop\n\n### Preventing Bias in Data Collection\n\n- Choose your words carefully (avoid the framing effect)\n- Foster independent thinking (avoid the bandwagon effect)\n- Avoid Specific Language\n- Limit the guidance you give users (avoid false consensus)\n- Consider users tone and body language\n- Be careful of your own body language and reactions (avoid social desireability bias)\n- Plan your research effectively (Availability bias)\n- Remain open minded (avoid primacy or recency bias)\n\n## Empathy in UX Design\n\nHow to empathize with users:\n\n- Ask lots of questions\n- Become more obervant\n- Be an active listener\n- Request input\n- Have an open mind\n- Keep current on UX Research\n\n### Empathy Map\n\nAn easily understood chart that explains everything designers have learned about a type of user.\n\n### Pain Points\n\n- Financial Pain Points\n- Product Pain Points\n- Process Pain Points\n- Support Pain Points\n\n### User Group\n\nA user group is a set of people who have similar interests, goals, or concerns.\n\n#### Personas\n\nPersonas are fictional users whose goals and characteristics represent the needs of a larger group of users. Each persona that you create will represent a group of users with similar characteristics that you’ve learned about through your research. Personas are key to the design process because they reflect the lifestyles of users and give your team an idea of how to meet users’ needs or challenges.\n\n- Build Empathy\n- Tell stories\n- Stress Test Designs\n","n":0.027}}},{"i":57,"$":{"0":{"v":"Unit Tests","n":0.707},"1":{"v":"## What are Unit tests?\n\nUnit tests exist to test individual units of software functionality. A unit is a module, component, or function. They’re bits of the program that can work independently of the rest of the program. The presence of unit testing implies that the software is designed in a modular fashion. You may hear once in a while that there are ways to make software “more testable.”\n\nIf you find that it’s hard to write unit tests for your program without mocking lots of other things, that’s a sign that your program is not modular enough. Revealing tight coupling (the opposite of modularity) is one of the many important roles that unit tests play in software creation.\n\nEvery module should have unit tests, and every application should be made up of modules. In other words, if you’re not writing unit tests, you should be.\n\nWhen you write a bug report, you should always provide a description, explain what you expected to see, and explain what you actually saw.\n\nTest cases should be written in much the same way:\n\n- Describe the feature that you’re testing in plain English.\n- Provide the expected outcome of the test. This part is why many unit tests are called expectations.\n- Compare that to the actual value.\n- When a unit tests fails, the error message is your bug report.\n\nSimple tests assertions provide:\n\n- Better readability.\n- Less code.\n- Less maintenance.\n\n## Unit Test Goals\n\n- Thorough\n- Stable\n- Fast\n- Few\n","n":0.065}}},{"i":58,"$":{"0":{"v":"Ui/Ux","n":1},"1":{"v":"## General Info\n\n1. Usable\n2. Equitable\n3. Enjoyable - research\n4. Useful - solve a problem\n\n## Different Type of UX Workers\n\n- Interaction Designer (UX)\n- Visual Deisgner (UX)\n- Motion Designer (UX)\n- Graphic Designer\n- UX Researcher\n- UX Writer\n- Production Designers\n- UX Engineer\n- UX Program Manager\n\n## Product Development LifeCycle\n\n1. Brainstorm\n2. Define\n3. Design\n4. Testing\n5. Launch\n\n## 5 UX Frameworks\n\n1. User Centered Design Process\n2. 5 Elements of UX Design\n3. Design Thkning Process\n4. Lean UX\n5. Double Diamond\n\n### User Centered Design Process\n\n1. Understand how the user experiences the product\n2. Specify the users needs\n3. Design Solutions\n4. Evaluate solutions against user needs\n\n### 5 Elements of UX Design\n\n1. Strategy\n2. Scope\n3. Structure\n4. Skeleton\n5. Surface\n\n![5 Elements](assets/images/ux5elements.png){width: 500px}\n\n### Design Thinking\n\n1. Empathize\n2. Define\n3. Ideate\n4. Prototype\n5. Test\n\n![Design Thinking](assets/images/design-thinking.png){width: 500px}\n\n### Lean UX\n\n1. Think\n2. Make\n3. Check\n\n![Lean UX](assets/images/leanux.png){width: 500px}\n\n#### Lean UX Six Principles\n\n1. Move Forward\n2. Stay Curious\n3. Test Ideas in the real world\n4. Externalize your ideas\n5. Reframe deliverables as outcomes\n6. Embrace radical transparency\n\n### Double Diamond\n\n1. Discover\n2. Define\n3. Develop\n4. Deliver\n\n![Double Diamond](assets/images/double-diamond.png){width: 500px}\n\n## Four C's for Designing on Multiple Platforms\n\n- Consistency\n- Continuity\n- Context\n- Complementary\n\n## UX Research\n\n- Foundational Research\n- Design Research (How was your experience, how difficult, challenges)\n- Post Launch Research (Did we succeed?)\n\n### UX Researcher Qualities\n\n- Empathy\n- Pragmatism\n- Collaboration\n","n":0.074}}},{"i":59,"$":{"0":{"v":"Design Sprints","n":0.707},"1":{"v":"\n## General Info\n\nA design sprint is a time-bound process with five phases typically spread out over five full, eight-hour days.\n\nThe goal of design sprints is to solve a critical design challenge through designing, prototyping, and testing ideas with users.\n\nDesign sprints save time. With a sprint, your team can cut the decision-making process down from several months to a single week.\n\nSprints also create an effective path to bring a product to market.\n\nSprints prioritize the user, putting their needs front and center.\n\nSprints allow you to fast forward into the future to test your product and get customer reactions before making any expensive decisions.\n\n### Five Phases of Design Sprints\n\n1. The understand phase sets your sprint on the right track and helps your team get a clear picture of the design challenge.\n\n2. Ideate - participant takes time to sketch and present their ideas. Plan for user testing which happens in P5. Recruit tgt profile users now.\n\n3. Decide - select which solution from ideate phase to go forward with.\n\n4. Prototype - build 1st version dont need finished product just something to be tested.\n\n5. Testing\n\n### Benefits of Design Sprints\n\n- It's all about the user and their needs.\n\n- Value every person in the room.\n\n- Best ideas rise to the top.\n\n- Lower the risk of unsuccessful debut.\n\n- Versatile can be scheduled at any point during project.\n\n### Planning Design Sprints\n\n1. User Research - always the 1st step in a sprint planning process\n2. Call in the experts\n3. Find the right space\n4. Gather the supplies\n5. Establish the rules of the sprint\n6. Planning introductions\n7. Post sprint planning\n\n### Design Sprint Brief\n\nA document that you share with attendees to help them prepare for the sprint.\n\nSprint Challenge\nKey Deliverables - a complete prototype of the feature update\nLogistics - who, where, sprint leader\nApprovers\nResources\n\n### The Sprint Retrospective\n\nA collaborative critique of the teams design sprint. Goal is for everyone to get a chance to give feedback.\n\nWhat went well and what could be improved.\n","n":0.056}}},{"i":60,"$":{"0":{"v":"TypeScript","n":1},"1":{"v":"## General Info\n\n\n","n":0.577}}},{"i":61,"$":{"0":{"v":"Testing","n":1},"1":{"v":"## General\n\n- Refrain from using technical terms.\n\n### Black Box Testing\n\n- Software testing in which functionality is tested without knowledge of internal source code.\n![Black Box Testing](/assets/images/2022-02-04-11-19-03.png)\n\n### White Box Testing\n\n- Makes long term development easier.\n- Coding standards are like traffic laws, generally not a prob with individuals but chaos if everyone doesnt follow rules.\n- White Box Testing keeps programmers honest and efficient.\n\n#### Branch Testing\n\n### Experience Based Testing\n\n- Focuses on using the expertise of a tester for ad hoc skillset testing.\n- This is **not** typical model for software testing.\n- You still need mandate normal test processes.\n- Strong communication aspect.\n\n#### Exploratory Testing\n\n#### Checklist Testing\n\n- Create a list of action items.\n\n#### Fault Attack Testing\n\n- Often part of regression test strategy.\n\n#### Error Guessing Testing\n\n- Less rigid appraoch.\n- Seeks prior trouble spots.\n","n":0.089}}},{"i":62,"$":{"0":{"v":"React Testing Library","n":0.577},"1":{"v":"## General Info\n\nIt’s also important to note that after every test, React Testing Library unmounts the rendered components. That’s why we render for each test. For a lot of tests for a component, the beforeEach jest function could prove handy.\n\n## Snapshots\n\nSnapshot testing is just comparing our rendered component with an associated snapshot file. Snapshot tests are fast and easy to write. One assertion saves us from writing multiple lines of code. For example, with a toMatchSnapshot, we’re spared of asserting the existence of the button and the heading. They also don’t let unexpected changes creep into our code.\n\nSnapshots might seem the best thing that has happened to us while testing thus far. But we are forced to wonder, what exactly are we testing? What’s being validated? If a snapshot passes, what does it convey about the correctness of the component?\n\nSnapshot tests may cause false positives. Since we cannot ascertain the validity of the component from a snapshot test, a bug might go undetected. Over-reliance on snapshots can make developers more confident about their code than they should be.\n\nThe other issue with snapshots is false negatives. Even the most insignificant of changes compel the test to fail. Fixing punctuation? Snapshot will fail. Replacing an HTML tag to a more semantic one? Snapshot will fail. This might cause us to lose our confidence in the test suite altogether. Snapshots aren’t inherently bad; they do serve a purpose. But it’s beneficial to understand when to snapshot, and when not to snapshot.\n\n### Updating Snapshots\n\nYou can run Jest with a flag that will tell it to re-generate snapshots:\n\n```javascript\njest --updateSnapshot\n```\n\nIf you'd like to limit which snapshot test cases get re-generated, you can pass an additional `--testNamePattern` flag to re-record snapshots only for those tests that match the pattern.\n\n### Interactive Snapshot Mode\n\nFailed snapshots can also be updated interactively in watch mode:\n\n![Interactive Snapshot Mode](/assets/interactive-snapshot.png)\n\nOnce you enter Interactive Snapshot Mode, Jest will step you through the failed snapshots one test at a time and give you the opportunity to review the failed output.\n\n![Interactive Snapshot Mode](/assets/images/interactivesnapshotupdate.gif)\n\n### Inline Snapshots\n\nInline snapshots behave identically to external snapshots (`.snap` files), except the snapshot values are written automatically back into the source code. This means you can get the benefits of automatically generated snapshots without having to switch to an external file to make sure the correct value was written.\n\nThe next time you run Jest, tree will be evaluated, and a snapshot will be written as an argument to toMatchInlineSnapshot:\n\n```javascript\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot(`\n<a\n  className=\"normal\"\n  href=\"https://example.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Example Site\n</a>\n`);\n});\n```\n\n### Snapshot Best Practices\n\n1. Treat snapshots as code\n    - Commit snapshots and review them as part of your regular code review process. This means treating snapshots as you would any other type of test or code in your project.\n    - Ensure that your snapshots are readable by keeping them focused, short, and by using tools that enforce these stylistic conventions.\n    - The goal is to make it easy to review snapshots in pull requests, and fight against the habit of regenerating snapshots when test suites fail instead of examining the root causes of their failure.\n2. Tests should be deterministic\n    - Your tests should be deterministic. Running the same tests multiple times on a component that has not changed should produce the same results every time. You're responsible for making sure your generated snapshots do not include platform specific or other non-deterministic data.\n3. Use descriptive snapshot names\n    - Always strive to use descriptive test and/or snapshot names for snapshots. The best names describe the expected snapshot content. This makes it easier for reviewers to verify the snapshots during review, and for anyone to know whether or not an outdated snapshot is the correct behavior before updating.\n\n## User Event Library\n\n`user-event`is a companion library for Testing Library that simulates user interactions by dispatching the events that would happen if the interaction took place in a browser.\n\n### Pointer API\n\nThe pointer API allows to simulate interactions with pointer devices. It accepts a single pointer action or an array of them. Our primary target audience tests per jest in a jsdom environment and there is no layout in jsdom. This means that different from your browser the elements don't exist in a specific position, layer and size.\n\nWe don't try to determine if the pointer action you describe is possible at that position in your layout.\n\n### Keyboard API\n\nThe keyboard API allows to simulate interactions with a keyboard. It accepts a string describing the key actions.\n\n```javascript\nkeyboard('{Shift}{f}{o}{o}') // translates to: Shift, f, o, o\n```\n\n### Clipboard API\n\nNote that the Clipboard API is usually not available outside of secure context.\nTo enable testing of workflows involving the clipboard, `userEvent.setup()` replaces `window.navigator.clipboard` with a stub.\n","n":0.036}}},{"i":63,"$":{"0":{"v":"SVG","n":1},"1":{"v":"## General Info\n\nXML is case-sensitive (unlike HTML).\n\nAttribute values in SVG must be placed inside quotes, even if they are numbers.\n\n### Anatomy of an SVG\n\n`xmlns` namespace attribute, tells browser what time of xml file this is\n\n`viewbox` defines the bounds of the svg\n\n## Inline vs Linked SVGs\n\nLinking is generally cleaner and simpler but does not allow you to interact with the SVG through CSS or JavaScript.\n\nInlining SVGs allow you to unlock their full potential, but it also comes with some serious drawbacks: it makes your code harder to read, makes your page less cacheable, and if it’s a large SVG it might delay the rest of your HTML from loading.\n\n## SVG Sites\n\n[SVG Path Editor Tool](https://yqnn.github.io/svg-path-editor/)\n\n### Icon Sites\n\n[The Noun Project](https://thenounproject.com/)\n\n[Feather Icons](https://feathericons.com/)\n\n[Material Icons](https://fonts.google.com/icons)\n\n## SVG Libraries\n\n[SVGJS](https://svgjs.dev/docs/3.0/)\n\n[SnapSVG](http://snapsvg.io/)\n","n":0.091}}},{"i":64,"$":{"0":{"v":"STS - Security Token Service","n":0.447},"1":{"v":"## General Info\n\nSecurity token service (STS) is a cross-platform open standard core component of the OASIS group's WS-Trust web services single sign-on infrastructure framework specification. Within that claims-based identity framework, a secure token service is responsible for issuing, validating, renewing and cancelling security tokens. The tokens issued by security token services can then be used to identify the holder of the token to services that adhere to the WS-Trust standard. Security token service provides the same functionality as OpenID, but unlike OpenID is not patent encumbered. Together with the rest of the WS-Trust standard, the security token service specification was initially developed by employees of IBM, Microsoft, Nortel and VeriSign.\n\nIn a typical usage scenario involving a web service that employs WS-Trust, when a client requests access to an application, the application does not authenticate the client directly (for instance, by validating the client's login credentials against an internal database). Instead, the application redirects the client to a security token service, which in turn authenticates the client and grants it a security token. The token consists of a set of XML data records that include multiple elements regarding the identity and group membership of the client, as well as information regarding the lifetime of the token and the issuer of the token. The token is protected from manipulation with strong cryptography. The client then presents the token to an application to gain access to the resources provided by the application. This process is illustrated in the Security Assertion Markup Language (SAML) use case, demonstrating how single sign-on can be used to access web services.\n\nSoftware that provides security token services is available from numerous vendors, including the open-source Apache CXF, as well as closed-source solutions from Oracle (for interfacing with authentication services backed by an Oracle Database) and Microsoft (where STS is a core component of Windows Identity Foundation and Active Directory Federation Services). While security token services are themselves typically offered as web services used in conjunction with other web services, software development kits (SDKs) for native applications (such as cloud-storage clients) also exist.\n","n":0.054}}},{"i":65,"$":{"0":{"v":"Service Workers","n":0.707},"1":{"v":"## General Info\n\nService workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.\n","n":0.121}}},{"i":66,"$":{"0":{"v":"Seo","n":1},"1":{"v":"## Github Project Masterlist\n\n[SEO⭐⭐⭐⭐⭐](https://github.com/seo/guide)\n\n## Google Do's\n\n1. **Use the [URL Inspection tool](https://support.google.com/webmasters/answer/9012289)**. It will allow you to see exactly how Googlebot sees and renders your content, and it will help you identify and fix a number of indexing issues on your site.\n\n2. **Accurately describe the page's content** - Choose title text that reads naturally and effectively communicates the topic of the page's content.\n\n3. Create unique `<title>` elements for each page\nMake sure each page on your site has unique text in the `<title>` element, which helps Google know how the page is distinct from the others on your site. If your site uses separate mobile pages, remember to use descriptive text in the `<title>` elements on the mobile versions too.\n\n4. Use brief, but descriptive `<title>` elements\n`<title>` elements can be both short and informative. If the text in the `<title>` element is too long or otherwise deemed less relevant, Google may show only a portion of the text in your `<title>` element, or a title link that's automatically generated in the search result.\n\n5. **Accurately summarize the page content** - Write a description that would both inform and interest users if they saw your meta description tag as a snippet in a search result. While there's no minimal or maximal length for the text in a description meta tag, we recommend making sure that it's long enough to be fully shown in Search (note that users may see different sized snippets depending on how and where they search), and contains all the relevant information users would need to determine whether the page will be useful and relevant to them.\n\n6. **Use unique descriptions for each page** - Having a different meta description tag for each page helps both users and Google, especially in searches where users may bring up multiple pages on your domain (for example, searches using the site: operator). If your site has thousands or even millions of pages, hand-crafting meta description tags probably isn't feasible. In this case, you could automatically generate meta description tags based on each page's content.\n\n7. **Imagine you're writing an outline** - Similar to writing an outline for a large paper, put some thought into what the main points and sub-points of the content on the page will be and decide where to use heading tags appropriately.\n\n8. **Use headings sparingly across the page** - Use heading tags where it makes sense. Too many heading tags on a page can make it hard for users to scan the content and determine where one topic ends and another begins.\n\n9. **Check your markup using the Rich Results Test** - Once you've marked up your content, you can use the Google Rich Results test to make sure that there are no mistakes in the implementation. You can either enter the URL where the content is, or copy the actual HTML which includes the markup.\n\n10. **Use Data Highlighter and Markup Helper** - If you want to give structured markup a try without changing the source code of your site, you can use [Data Highlighter](https://www.google.com/webmasters/data-highlighter/), which is a tool integrated in Search Console that supports a subset of content types. If you'd like to get the markup code ready to copy and paste to your page, try the [Markup Helper](https://www.google.com/webmasters/markup-helper/).\n\n11. **Keep track of how your marked up pages are doing** - The various Rich result reports in Search Console shows you how many pages on your site we've detected with a specific type of markup, how many times they appeared in search results, and how many times people clicked on them over the past 90 days. It also shows any errors we've detected.\n\n12. **Create a naturally flowing hierarchy** - Make it as easy as possible for users to go from general content to the more specific content they want on your site. Add navigation pages when it makes sense and effectively work these into your internal link structure. Make sure all of the pages on your site are reachable through links, and that they don't require an internal search functionality to be found. Link to related pages, where appropriate, to allow users to discover similar content.\n\n13. **Use text for navigation** - Controlling most of the navigation from page to page on your site through text links makes it easier for search engines to crawl and understand your site. When using JavaScript to create a page, use a elements with URLs as href attribute values, and generate all menu items on page-load, instead of waiting for a user interaction.\n\n14. **Create a navigational page for users, a sitemap for search engines** - Include a simple navigational page for your entire site (or the most important pages, if you have hundreds or thousands) for users. Create an XML sitemap file to ensure that search engines discover the new and updated pages on your site, listing all relevant URLs together with their primary content's last modified dates.\n\n15. **Show useful 404 pages** - Users will occasionally come to a page that doesn't exist on your site, either by following a broken link or typing in the wrong URL. Having a custom 404 page that kindly guides users back to a working page on your site can greatly improve a user's experience. Consider including a link back to your root page and providing links to popular or related content on your site. You can use Google Search Console to find the sources of URLs causing \"not found\" errors.\n\n16. **Use words in URLs** - URLs with words that are relevant to your site's content and structure are friendlier for visitors navigating your site.\n\n17. **Create a simple directory structure** - Use a directory structure that organizes your content well and makes it easy for visitors to know where they're at on your site. Try using your directory structure to indicate the type of content found at that URL.\n\n18. **Provide one version of a URL to reach a document** - To prevent users from linking to one version of a URL and others linking to a different version (this could split the reputation of that content between the URLs), focus on using and referring to one URL in the structure and internal linking of your pages. If you do find that people are accessing the same content through multiple URLs, setting up a 301 redirect from non-preferred URLs to the dominant URL is a good solution for this. If you cannot redirect, you may also use the rel=\"canonical\" link element.\n\n19. **Write easy-to-read text** - Users enjoy content that is well written and easy to follow.\n\n20. **Organize your topics clearly** - It's always beneficial to organize your content so that visitors have a good sense of where one content topic begins and another ends. Breaking your content up into logical chunks or divisions helps users find the content they want faster.\n\n21. **Create fresh, unique content** - New content will not only keep your existing visitor base coming back, but also bring in new visitors.\n\n22. **Optimize content for your users, not search engines** - Designing your site around your visitors' needs while making sure your site is easily accessible to search engines usually produces positive results.\n\n23. **Choose descriptive text** - Write anchor text that provides at least a basic idea of what the page linked to is about.\n\n24. **Write concise text** - Aim for short but descriptive text-usually a few words or a short phrase.\n\n25. **Format links so they're easy to spot** - Make it easy for users to distinguish between regular text and the anchor text of your links. Your content becomes less useful if users miss the links or accidentally click them.\n\n26. **Think about anchor text for internal links too.** - You may usually think about linking in terms of pointing to outside websites, but paying more attention to the anchor text used for internal links can help users and Google navigate your site better.\n\n27. **Use the HTML `<img>` or `<picture>` elements** - Semantic HTML markup helps crawlers find and process images. By using the `<picture>` element you can also specify multiple options for different screen sizes for responsive images. You might also use the loading=\"lazy\" attribute on images to make your page load faster for your users.\n\n28. **Use brief but descriptive filenames and alt text** - Like many of the other parts of the page targeted for optimization, filenames and alt text are best when they're short, but descriptive.\n\n29. **Supply alt text when using images as links** - If you do decide to use an image as a link, filling out its alt text helps Google understand more about the page you're linking to. Imagine that you're writing anchor text for a text link.\n\n## Google Dont's\n\n1. Letting your internal search result pages be crawled by Google. Users dislike clicking a search engine result only to land on another search result page on your site.\n\n2. Allowing URLs created as a result of proxy services to be crawled.\n\n3. Using text in the `<title>` element that has no relation to the content on the page.\n\n4. Using default or vague text like \"Untitled\" or \"New Page 1\".\n\n5. Using a single title in all `<title>` elements across your site's pages or a large group of pages.\n\n6. Using extremely lengthy text in `<title>` elements that are unhelpful to users.\n\n7. Stuffing unneeded keywords in your `<title>` element.\n\n8. Writing a meta description tag that has no relation to the content on the page.\n\n9. Using generic descriptions like \"This is a web page\" or \"Page about baseball cards\".\n\n10. Filling the description with only keywords.\n\n11. Copying and pasting the entire content of the document into the meta description tag.\n\n12. Using a single meta description tag across all of your site's pages or a large group of pages.\n\n13. Placing text in heading tags that wouldn't be helpful in defining the structure of the page.\n\n14. Using heading tags where other tags like `<em>` and `<strong>` may be more appropriate.\n\n15. Erratically moving from one heading tag size to another.\n\n16. Excessive use of heading tags on a page.\n\n17. Very long headings.\n\n18. Using heading tags only for styling text and not presenting structure.\n\n19. Using invalid markup.\n\n20. Changing the source code of your site when you are unsure about implementing markup.\n\n21. Adding markup data which is not visible to users.\n\n22. Creating fake reviews or adding irrelevant markups.\n\n23. Creating complex webs of navigation links, for example, linking every page on your site to every other page.\n\n24. Going overboard with slicing and dicing your content (so that it takes twenty clicks to reach from the homepage).\n\n25. Having a navigation based entirely on images, or animations.\n\n26. Requiring script or plugin-based event-handling for navigation.\n\n27. Letting your navigational page become out of date with broken links.\n\n28. Creating a navigational page that simply lists pages without organizing them, for example by subject.\n\n29. Allowing your 404 pages to be indexed in search engines (make sure that your web server is configured to give a 404 HTTP status code or—in the case of JavaScript-based sites—include the noindex tag when non-existent pages are requested).\n\n30. Blocking 404 pages from being crawled through the robots.txt file.\n\n31. Providing only a vague message like \"Not found\", \"404\", or no 404 page at all.\n\n32. Using a design for your 404 pages that isn't consistent with the rest of your site.\n\n33. Using lengthy URLs with unnecessary parameters and session IDs.\n\n34. Choosing generic page names like page1.html.\n\n35. Using excessive keywords like baseball-cards-baseball-cards-baseballcards.html.\n\n36. Having deep nesting of subdirectories like .../dir1/dir2/dir3/dir4/dir5/dir6/page.html.\n\n37. Using directory names that have no relation to the content in them.\n\n38. Having pages from subdomains and the root directory access the same content, for example, domain.com/page.html and sub.domain.com/page.html.\n\n39. Writing sloppy text with many spelling and grammatical mistakes.\n\n40. Awkward or poorly written content.\n\n41. Embedding text in images and videos for textual content: users may want to copy and paste the text and search engines can't read it.\n\n42. Dumping large amounts of text on varying topics onto a page without paragraph, subheading, or layout separation.\n\n43. Rehashing (or even copying) existing content that will bring little extra value to users.\n\n44. Having duplicate or near-duplicate versions of your content across your site.\n\n45. Inserting numerous unnecessary keywords aimed at search engines but are annoying or nonsensical to users.\n\n46. Having blocks of text like \"frequent misspellings used to reach this page\" that add little value for users.\n\n47. Deceptively hiding text from users, but displaying it to search engines.\n\n48. Providing insufficient content for the purpose of the page.\n\n49. Putting distracting advertisements on your pages.\n\n50. Writing generic anchor text like \"page\", \"article\", or \"click here\".\n\n51. Using text that is off-topic or has no relation to the content of the page linked to.\n\n52. Using the page's URL as the anchor text in most cases, although there are certainly legitimate uses of this, such as promoting or referencing a new website's address.\n\n53. Writing long anchor text, such as a lengthy sentence or short paragraph of text.\n\n54. Using CSS or text styling that make links look just like regular text.\n\n55. Using excessively keyword-filled or lengthy anchor text just for search engines.\n\n56. Creating unnecessary links that don't help with the user's navigation of the site.\n\n57. Using CSS to display images that you want us to index.\n\n58. Using generic filenames like image1.jpg, pic.gif, 1.jpg when possible—if your site has thousands of images you might want to consider automating the naming of the images.\n\n59. Writing extremely lengthy filenames.\n\n60. Stuffing keywords into alt text or copying and pasting entire sentences.\n\n61. Writing excessively long alt text that would be considered spammy.\n\n62. Using only image links for your site's navigation.\n\n63. Attempting to promote each new, small piece of content you create; go for big, interesting items.\n\n64. Involving your site in schemes where your content is artificially promoted to the top of these services.\n\n65. Spamming link requests out to all sites related to your topic area.\n\n66. Purchasing links from another site with the aim of getting PageRank.\n","n":0.021}}},{"i":67,"$":{"0":{"v":"SAML - Security Assertion Markup Language","n":0.408},"1":{"v":"## General Info\n\nSecurity Assertion Markup Language is an open standard for exchanging authentication and authorization data between parties, in particular, between an identity provider and a service provider. SAML is an XML-based markup language for security assertions (statements that service providers use to make access-control decisions). SAML is also:\n\n- A set of XML-based protocol messages\n- A set of protocol message bindings\n- A set of profiles (utilizing all of the above)\n\nAn important use case that SAML addresses is web-browser single sign-on (SSO). Single sign-on is relatively easy to accomplish within a security domain (using cookies, for example) but extending SSO across security domains is more difficult and resulted in the proliferation of non-interoperable proprietary technologies. The SAML Web Browser SSO profile was specified and standardized to promote interoperability.\n","n":0.089}}},{"i":68,"$":{"0":{"v":"Ruby Language","n":0.707},"1":{"v":"## General Info\n\nRuby was created by Yukihiro Matsumoto, or \"Matz\", in Japan in the mid 1990's. It was designed for programmer productivity with the idea that programming should be fun for programmers. It emphasizes the necessity for software to be understood by humans first and computers second.\n","n":0.146}}},{"i":69,"$":{"0":{"v":"Repl","n":1},"1":{"v":"## General Info\n\nREPL (READ, EVAL, PRINT, LOOP) is a computer environment similar to Shell (Unix/Linux) and command prompt. Node comes with the REPL environment when it is installed. System interacts with the user through outputs of commands/expressions used. It is useful in writing and debugging the codes. The work of REPL can be understood from its full form:\n\nRead: It reads the inputs from users and parses it into JavaScript data structure. It is then stored to memory.\nEval: The parsed JavaScript data structure is evaluated for the results.\nPrint: The result is printed after the evaluation.\nLoop: Loops the input command. To come out of NODE REPL, press ctrl+c twice\n","n":0.097}}},{"i":70,"$":{"0":{"v":"Regex","n":1},"1":{"v":"## General Info\n\n[Regular Expression Multi Language Info Site](https://www.regular-expressions.info/)\n\n## Javascript Specific\n\n```/g``` flag allows you to do a global search for example for ```text.replace(textToReplace/g, newText)``` without the ```/g``` it would return only the first match.\n\n```/i``` flag will make you search match case insensitive\n\n## Python Specific\n\nimport `re` module which is the regex library for python\n\n```python\nphoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')\nmo = phoneNumRegex.search(string)\nprint(mo.group())\n```\n\n`.group()` is a method to split a regex into smaller parts to filter for.\n\nGroups are created in regex strings with parentheses.\n\nThe first set of Parentheses is group 1, the second is group 2, and so on.\n\nCalling `group()` or `group(0)` returns the full matching string, `group(1)` returns group 1s matching string and so on.\n\nUse `\\(` and `\\)` to match literal parentheses in the regex string.\n\nThe `|` pipe can match one of many possible groups.\n\n`*` match 0 or more times\n\n`?` match 0 or 1 times\n\n`+` match 1 or more times\n\n`{3}` will match the string 3 times `{3,5}` will match the string 3 to 5 times. Not inputting a number will make it so there is no minimum or maximum.\n\n`{3,5}?` makes it a non-greedy match, it will only match the minimum if no question mark is used it will run a greedy match and will try to match the longest possible string.\n\nYou can create your own character class like `d` for digit or `w` for word charcaters or `s` for whitespace. Uppercase shorthand chracters matches all that are NOT digits, words or spaces.\n\nYou can use `[]` to make your own character clases `[^]` will make it a negative character class.\n\n`.findall()` is similar to `.search()` but does not return a match object, it returns tuples with your matches.\n\n`^` means the string must start with the pattern\n\n`$` means the string must end with the pattern\n\n`.` is a wildcard it matches anything except newlines\n\n`re.compile(r'.*', re.DOTALL)` will also include newlines\n\n`re.compile(r'[aeiou]', re.IGNORECASE)` will ignore case can also be shortened to `re.I`\n\n`.sub()` acts as search and replace\n\n```python\n>>> namesRegex = re.compile(r'Agent (\\w) \\w*')\n>>> namesRegex.finall('Agent Alice gave the secret documents to Agent Bob.')\n['A', 'B']\n>>> namesRegex.sub(r'Agent \\1****', 'Agent Alice gave the secret documents to Agent Bob.')\n'Agent A**** gave the secret documents to Agent B****.'\n>>>\n```\n\n### Verbose Regular Expression\n\nAllows you to make large regex more readable. For example:\n\n```python\nre.compile(r'''\n(\\d\\d\\d-)|     #Area Code\n(\\(\\d\\d\\d) )   #-or- area code\n\\d\\d\\d         # first 3 digits\n-              # second dash\n\\d\\d\\d\\d       # last 4 digits\n\\sx\\d{2,4}''', re.VERBOSE)\n```\n","n":0.052}}},{"i":71,"$":{"0":{"v":"Raspberrypi","n":1},"1":{"v":"## General Info\n\nGetting the installation of Home Assistant and PiHole was a pain. This is not a good note.\n\nWas easiest to do the install with Docker Compose, my router from AT&T does not accept custom DNS so I had to use the PiHole as a DHCP Server. Had to modify the docker compose file and add a couple environmental variables to make it work. Will document these tomorrow.\n\n## Home Assistant Container Installation\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=America/Los_Angeles \\\n  -v /home/pi/homeassistant \\\n  --network=host \\\n  ghcr.io/home-assistant/home-assistant:stable\n  ```\n\n## Docker Commands\n\n```bash\ndocker container ls\ndocker container rm $CONTAINER_NAME\ndocker image ls\ndocker image rm $IMAGE_ID\n```\n\n## General RPI Commands\n\n```bash\nsudo rfkill block wifi\nsudo rfkill block bluetooth\nsudo rfkill unblock wifi\n```\n\n## How to Reset DHCP Settings\n\n```bash\nsudo service dhcpcd status\nsudo service dhcpcd start\nsudo systemctl enable dhcpcd\nsudo nano /etc/dhcpcd.conf\n```\n","n":0.087}}},{"i":72,"$":{"0":{"v":"RaspberryPi Pi-Hole","n":0.707},"1":{"v":"## The URL I forget\n\npi.hole\n\n## Domains White Listed for Paramount Plus\n\nsdk.iad-03.braze.com\njs.appboycdn.com\ns0.2mdn.net","n":0.302}}},{"i":73,"$":{"0":{"v":"Python","n":1},"1":{"v":"Documentation Site for Python\n\nNumpy, scipy, sympy PyYAML Pandas jmespath python-dateutil pytest\n\nunderscore _ gets you the previous result\n\nformatted string literals - f-strings\n\nprint() has some unique arguments to change its default behavior: ```sep``` and ```end```\n\n```Python\nprint(\"Hello\")\nprint(\"World\")\n```\n\nWill append a ```/n``` newline at the end resulting in:\n\n> Hello\n>\n> World\n\nyou can change this to on line by:\n\n```Python\nprint(\"Hello\", end=\"\")\nprint(\"World\")\n```\n\n> HelloWorld\n\nfor an example of `sep`:\n\n```python\nprint(\"cat\", \"dog\", \"mouse\")\n```\n\nstandard behavior is to add a space as a separator between array items:\n\n> cat dog mouse\n\nyou can use `sep` to change this behavior\n\n```python\nprint(\"cat\", \"dog\", \"mouse\", sep=\"ABC\")\n```\n\n> catABCdogABCmouse\n\nMutable values are not stored in the variable just a **reference** to them which means that they can be cross modified ie:\n\n```python\n>>> spam = [1, 2, 3, 4]\n>>> cheese = spam\n>>> cheese[1] = \"Hello\"\n>>> cheese \n[1, \"Hello\", 2, 3, 4]\n>>> spam \n[1, \"Hello\", 2, 3, 4]\n```\n\nImmutable values such as strings or tuples cannot be modified unless they are replaced.\n\nYou can also use `copy.deepcoopy(spam)` to create a new list with a new reference.\n\n## Excel in Python\n\nModule OpenPyXL handles .xlsx files, the command openpyxl.load_workbook(filepath) returns a Workbook object.\n\n`get_sheet_names()` and `get_sheet_by_name()` will get you a Worksheet object.\n\n`sheet[A1]` will get you Cell Objects\n\n`sheet[A1],value == \"Purple\"`\n\n## PDF in Python\n\n```python\nimport PyPDF2 # is the module recommended\npdfFile = open(filepath, 'rb')  # to open PDF\nreader = PyPDF2.PdfFileReader(pdfFile) # to read PDF in PyPDF2\nreader.numPages # returns number of pages in PDF\nreader.getPage(0) # gets a page\nreader.extractText()\nfor pageNum in range(reader.numPages):\n    print(reader.getPage(pageNum).extractText())\n```\n\n`PdfFileWrite()` is the command to write a new PDF\n\n### Word in Python\n\n`python-docx`\n\n```python\npip install python-docx\nimport docx\nd = docx.Document(filepath)\nd.paragraphs # returns a list with all the objects in a docx\nd.paragraphs[0] #returns a paragraph object from the list\nd.paragraphs[0].text # returns the text within a single object in the list\np.runs # returns a list of all the run objects\np.runs[0].text # returns the text in the run object\np.runs[0].bold # returns true if the run object is bold returns \"NONE\" (not false) if its not, this works for italic, bold and underline\n```\n\nWord documents contain paragraph and run objects for structure.\n\nA run is created every time there is a style change in the text of a document. So italics, bold, and underline.\n","n":0.054}}},{"i":74,"$":{"0":{"v":"Scraping","n":1},"1":{"v":"## General Info\n\n## Command Line Automation\n\n```python\n#! python3\n# mapIt.py - Launches a map in the browser using an address from the\n# command line or clipboard.\n\nimport webbrowser, sys, pyperclip\nif len(sys.argv) > 1:\n    # Get address from command line.\n    address = ' '.join(sys.argv[1:])\nelse:\n    # Get address from clipboard.\n    address = pyperclip.paste()\n\nwebbrowser.open('https://www.google.com/maps/place/' + address)\n```\n\n## Beautiful Soup\n\nAn html parsing module\n\nExample usage:\n\n```python\nimport bs4, requests\n\ndef getAmazonPrice(productURL):\n    res = requests.get(productURL)\n    res.raise_for_status()\n\n    soup = bs4.BeautifulSoup(res.text, 'html.parser')\n    elems = soup.select('#css-selector > path > goes > here')\n    return elems[0].text.strip()\n```\n\n## Selenium\n\n```python\nfrom selenium import webdriver\nbrowser = webdriver.Firefox()\nbrowser.get('https://automatetheboringstuff.com')\nelem = browser.find_element_by_css_selector('#css-selector > path > goes > here')\nelem.click()\nelems = browser.find_elements_by_css_selector('p')\n```\n\n`.send_keys('type whatever u want here')` method is for writing in fields\n\n`.submit()` - automatically submits the active form field\n\n`.back()` , `.forward()` , `.reload()` - basic browser functions\n","n":0.092}}},{"i":75,"$":{"0":{"v":"Modules","n":1},"1":{"v":"## PPRINT\n\nPretty Print - useful for priniting out dictionaries in order.\n","n":0.302}}},{"i":76,"$":{"0":{"v":"Files","n":1},"1":{"v":"\n## Filepaths and the OS Path Module\n\n`os.chdir('filepath')` - allows you to change current working directory\n\n`os.getcwd()` - gets current working directory\n\n`os.listdir('c:\\\\folder1\\\\folder2\\\\')` - returns content of a directory\n\n`os.makedirs('c:\\\\folder1\\\\folder2\\\\')` - creates new folders\n\n`os.path.abspath()` - gets you the absolute path from a relative path\n\n`os.path.isabs('filepath')` - returns true if the path in the params is absolute, false if not\n\n`os.path.relpath('filepath1','filepath2')` - returns the relative path between two directories. \n\n`os.path.dirname('c:\\\\folder1\\\\folder2\\\\spam.png')` - returns the directory part of the filepath\n\n`os.path.basename('c:\\\\folder1\\\\folder2\\\\spam.png')` - returns the filename and type part of a filepath\n\n`os.path.exists('c:\\\\folder1\\\\folder2\\\\spam.png')` -returns bool if path exists or not\n\n`os.path.isfile('c:\\\\folder1\\\\folder2\\\\spam.png')` - returns bool if filepath contains a file\n\n`os.path.isdir('c:\\\\folder1\\\\folder2\\\\spam.png')` - returns bool if filepath is for a directory only\n\n`os.path.getsize('c:\\\\folder1\\\\folder2\\\\spam.png')` - returns filesize in bytes\n\nExample function to read filesize of all items in a folder\n\n```python\ntotalSize = 0\nfor filename in os.listdir('c:\\\\folder1\\\\folder2\\\\'):\n    if not os.path.isfile(os.path.join('c:\\\\folder1\\\\folder2\\\\', filename)):\n        continue\n    totalSize = totalSize + os.path.getsize(os.path.join('c:\\\\folder1\\\\folder2\\\\', filename))\n```\n\n## Plaintext Files\n\n`.open('filepath', 'w' )` - second param can be 'a' for append, if not param is passed the file will be opened in readmode which will not allow you to write to it.\n\nneed to run `.close()` after any changes to the file for them to be saved\n\n### Shelve Module\n\nYou can save variables in your Python programs to binary shelf files using the shelve module. This way, your program can restore data to variables from the hard drive.\n\n```python\n>>> import shelve\n>>> shelfFile = shelve.open('mydata')\n>>> cats = ['Zophie', 'Pooka', 'Simon']\n>>> shelfFile['cats'] = cats\n>>> shelfFile.close()\n```\n\n## Copying, Moving and Deleting\n\nCopy a file\n`shutil.copy('filepath1', 'filepath2')`\n\nCopy all folder contents\n`shutil.copytree('filepath1', 'filepath2')`\n\nMove a file (or rename a file)\n`shutil.move('filepath1', 'filepath2')`\n\nDeleting files:\n\n```python\n>>> import os\n>>> os.unlink('filepath') # delete a file\n>>> os.rmdir('filepath') # delete a folder (must be empty)\n>>> import shutil\n>>> shutil.rmtree('filepath') #deletes a folder and its content\n```\n\nNote: send2trash is a pip module for not permanently deleting stuff.\n\n## Walking the Directory Tree\n\n```python\nimport os\nfor folderName, subfolders, filenames in os.walk('filepath'):\n    print('The Folder is ' + folderName)\n    print('The subfolders in ' + folderName + ' are: ' + str(subfolders))\n    print('The filenames in ' + folderName + ' are: ' + str(filenames))\n    print()\n```\n","n":0.056}}},{"i":77,"$":{"0":{"v":"Debugging","n":1},"1":{"v":"## Using the Logging Module\n\n```python\nimport logging\nlogging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')\n```\n\n## Log Levels\n\n- debug(lowest)\n- info\n- warning\n- error\n- critical(highest)\n","n":0.236}}},{"i":78,"$":{"0":{"v":"Python Datatypes","n":0.707},"1":{"v":"## General Info\n\n### Lists\n\n42\n\n### Arrays\n","n":0.447}}},{"i":79,"$":{"0":{"v":"Strings","n":1},"1":{"v":"## General Notes\n\nTriple quotes `'''` allow you to make multiline strings.\n\nYou can use [] to get a specific letter of a strings.\n\nYou can check for string partials with `in`\n\nStrings are immutable so any changes with methods must be reassigned for example:\n\n```python\n>>> spam = \"Hello World!\"\n>>> spam.upper()\n\"HELLO WORLD!\"\n>>> spam\n\"Hello World!\" # see how the value never changed. \n>>> spam = spam.upper() # here we reassign the value\n>>> spam\n\"HELLO WORLD!\" # now it works\n```\n\n.isalpha()\n.isdecimal() - true if it is a number\n.isspace() - true if it contains spaces\n.isalum() - true if is alpha numeric\n.istitle() - true if all starting letters have an uppercase\n\n.startswith(param)\n.endswith(param)\n.join() ex:\n\n```python\n>>>','.join(['cats', 'rats', 'bats'])\n'cats,rats,bats'\n```\n\n.split() does the opposite splits a string into a list.\n\n.rjust(total length of string) & .ljust(total length of string) & .center(total length of string)\n\n.strip() - removes white space\n.lstrip() - removes left white space\n.rstrip() - removes right white space\n\n%s - coversion specifier\n","n":0.084}}},{"i":80,"$":{"0":{"v":"Lists","n":1},"1":{"v":"## General Info\n\nKind of like arrays.\n","n":0.408}}},{"i":81,"$":{"0":{"v":"Dictionaries","n":1},"1":{"v":"## Key Value Pairs\n\n## Example\n\n```python\n>>> myCat = {'size': 'fat', 'color': 'gray', 'disposition': 'loud'}\n>>> myCat['size']\n'fat'\n```\n\nItems in dictionary are unordered. And order does not matter.\n\nDictionary are mutable.\n\n## Methods\n\n.keys()\n\n.values()\n\n.items()\n\n.get(query, fallback value)\n\n.setdefault('color','black')\n","n":0.189}}},{"i":82,"$":{"0":{"v":"Datatstructures","n":1}}},{"i":83,"$":{"0":{"v":"Powershell","n":1},"1":{"v":"## General Info\n\nPowerShell is a command-line shell and a scripting language all in one. It was designed as a task engine that uses cmdlets to wrap tasks that people need to do. In PowerShell, you can run commands on local or remote machines. You can do tasks like managing users and automating workflows.\n\nWhether you're part of an operations team or a development team that's adopting DevOps principles, PowerShell can help. You can use it to address various tasks, such as managing cloud resources and continuous integration and continuous delivery (CI/CD). PowerShell offers many helpful commands, but you can expand its capabilities at any time by installing modules.\n","n":0.097}}},{"i":84,"$":{"0":{"v":"Observer Pattern","n":0.707},"1":{"v":"## General Info\n\nThe observer pattern is a software design pattern in which an object, named the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\n\n### What problems can the Observer design pattern solve?\n\nThe Observer pattern addresses the following problems:\n\n- A one-to-many dependency between objects should be defined without making the objects tightly coupled.\n- It should be ensured that when one object changes state, an open-ended number of dependent objects are updated automatically.\n- It should be possible that one object can notify an open-ended number of other objects.\n\nDefining a one-to-many dependency between objects by defining one object (subject) that updates the state of dependent objects directly is inflexible because it couples the subject to particular dependent objects. Still, it can make sense from a performance point of view or if the object implementation is tightly coupled (think of low-level kernel structures that execute thousands of times a second). Tightly coupled objects can be hard to implement in some scenarios, and hard to reuse because they refer to and know about (and how to update) many different objects with different interfaces. In other scenarios, tightly coupled objects can be a better option since the compiler will be able to detect errors at compile-time and optimize the code at the CPU instruction level.\n\n### What solution does the Observer design pattern describe?\n\n- Define Subject and Observer objects.\n- so that when a subject changes state, all registered observers are notified and updated automatically (and probably asynchronously).\n\nThe sole responsibility of a subject is to maintain a list of observers and to notify them of state changes by calling their update() operation. The responsibility of observers is to register (and unregister) themselves on a subject (to get notified of state changes) and to update their state (synchronize their state with the subject's state) when they are notified. This makes subject and observers loosely coupled. Subject and observers have no explicit knowledge of each other. Observers can be added and removed independently at run-time. This notification-registration interaction is also known as publish-subscribe.\n","n":0.054}}},{"i":85,"$":{"0":{"v":"Mime Type","n":0.707}}},{"i":86,"$":{"0":{"v":"JWT - JSON Web Token","n":0.447},"1":{"v":"## General Info\n\nJSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims. The tokens are signed either using a private secret or a public/private key.\n\nFor example, a server could generate a token that has the claim \"logged in as administrator\" and provide that to a client. The client could then use that token to prove that it is logged in as admin. The tokens can be signed by one party's private key (usually the server's) so that party can subsequently verify the token is legitimate. If the other party, by some suitable and trustworthy means, is in possession of the corresponding public key, they too are able to verify the token's legitimacy. The tokens are designed to be compact, URL-safe, and usable especially in a web-browser single-sign-on (SSO) context. JWT claims can typically be used to pass identity of authenticated users between an identity provider and a service provider, or any other type of claims as required by business processes.\n\nJWT relies on other JSON-based standards: JSON Web Signature and JSON Web Encryption.\n","n":0.073}}},{"i":87,"$":{"0":{"v":"JSON","n":1},"1":{"v":"## General Info\n\nA JSON string can be stored in its own file, which is basically just a text file with an extension of .json, and a [[MIME type]] of application/json.\n\n## JSON.parse()\n\nWhen receiving data from a web server, the data is always a string. Parse the data with JSON.parse(), and the data becomes a JavaScript object.\n\n### Parsing Dates\n\nThe reviver parameter is a function that checks each property, before returning the value. It can be used to parse things like dates:\n\n```javascript\nconst text = '{\"name\":\"John\", \"birth\":\"1986-12-14\", \"city\":\"New York\"}';\nconst obj = JSON.parse(text, function (key, value) {\n  if (key == \"birth\") {\n    return new Date(value);\n  } else {\n    return value;\n  }\n});\n```\n\n### Parsing Functions\n\nFunctions are not allowed in JSON. If you need to include a function, write it as a string. Then do something like this:\n\n```javascript\nconst text = '{\"name\":\"John\", \"age\":\"function () {return 30;}\", \"city\":\"New York\"}';\nconst obj = JSON.parse(text);\nobj.age = eval(\"(\" + obj.age + \")\");\n```\n\n## JSON.stringify()\n\nConvert a JavaScript object into a string with JSON.stringify().\n\n## Json Formatter Site\n\nTo check if JSON is improperly formatted [use this site](https://jsonformatter.curiousconcept.com/)\n","n":0.077}}},{"i":88,"$":{"0":{"v":"JavaScript","n":1},"1":{"v":"JS has a pretty widely adopted form validation API [Constraint Validation API](https://caniuse.com/constraint-validation)\n","n":0.289}}},{"i":89,"$":{"0":{"v":"Xhr API","n":0.707},"1":{"v":"## General Info\n\n`XMLHttpRequest` (XHR) is an API in the form of an object whose methods transfer data between a web browser and a web server. The object is provided by the browser's JavaScript environment. Particularly, retrieval of data from XHR for the purpose of continually modifying a loaded web page is the underlying concept of Ajax design. Despite the name, XHR can be used with protocols other than HTTP and data can be in the form of not only XML, but also JSON, HTML or plain text.\n\n## Simple Usage w/o Frameworks\n\n```javascript\n// Just getting XHR is a mess!\nif (window.XMLHttpRequest) { // Mozilla, Safari, ...\n  request = new XMLHttpRequest();\n} else if (window.ActiveXObject) { // IE\n  try {\n    request = new ActiveXObject('Msxml2.XMLHTTP');\n  } \n  catch (e) {\n    try {\n      request = new ActiveXObject('Microsoft.XMLHTTP');\n    } \n    catch (e) {}\n  }\n}\n\n// Open, send.\nrequest.open('GET', 'https://davidwalsh.name/ajax-endpoint', true);\nrequest.send(null);\n```\n","n":0.085}}},{"i":90,"$":{"0":{"v":"Webpack","n":1},"1":{"v":"## General Info\n\nAt its core, **webpack** is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles, which are static assets to serve your content from.\n\n## Tips\n\n- If a `webpack.config.js` is present, the webpack command picks it up by default. We use the --config option only to show that you can pass a configuration of any name. This will be useful for more complex configurations that need to be split into multiple files.\n- Custom parameters can be passed to webpack by adding two dashes between the `npm run build` command and your parameters, e.g. `npm run build -- --color`.\n- It is important to remember that when defining rules in your webpack config, you are defining them under `module.rules` and not `rules`. For your benefit, webpack will warn you if this is done incorrectly.\n- Keep in mind that when using regex to match files, you may not quote it. i.e `/\\.txt$/` is not the same as `'/\\.txt$/'` or `\"/\\.txt$/\"`. The former instructs webpack to match any file that ends with .txt and the latter instructs webpack to match a single file with an absolute path `'.txt'`; this is likely not your intention.\n- Webpack uses a regular expression to determine which files it should look for and serve to a specific loader. In this case, any file that ends with .css will be served to the style-loader and the css-loader.\n\n## Module Loading\n\nModule loaders can be chained. Each loader in the chain applies transformations to the processed resource. A chain is executed in reverse order. The first loader passes its result (resource with applied transformations) to the next one, and so forth. Finally, webpack expects JavaScript to be returned by the last loader in the chain.\n\n```javascript\nmodule: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n```\n\n## Output Management\n\nAs your application grows and once you start using hashes in filenames and outputting multiple bundles, it will be difficult to keep managing your index.html file manually. However, a few plugins exist that will make this process much easier to manage.\n\n[HtmlWebpackPlugin](https://github.com/jantimon/html-webpack-plugin)\n\n### The Manifest\n\nYou might be wondering how webpack and its plugins seem to \"know\" what files are being generated. The answer is in the manifest that webpack keeps to track how all the modules map to the output bundles. If you're interested in managing webpack's output in other ways, the manifest would be a good place to start.\n\nThe manifest data can be extracted into a json file for consumption using the [WebpackManifestPlugin](https://github.com/shellscape/webpack-manifest-plugin).\n\n## Development Environement\n\n### Source Maps\n\nWhen webpack bundles your source code, it can become difficult to track down errors and warnings to their original location. For example, if you bundle three source files (a.js, b.js, and c.js) into one bundle (bundle.js) and one of the source files contains an error, the stack trace will point to bundle.js. This isn't always helpful as you probably want to know exactly which source file the error came from.\n\nIn order to make it easier to track down errors and warnings, JavaScript offers source maps, which map your compiled code back to your original source code. If an error originates from b.js, the source map will tell you exactly that.\n\nAs the name suggests, a source map consists of a whole bunch of information that can be used to map the code within a compressed file back to it’s original source. You can specify a different source map for each of your compressed files.\n\nYou indicate to the browser that a source map is available by adding a special comment to the bottom of your optimised file.\n\n`//# sourceMappingURL=/path/to/script.js.map`\n\nThis comment will usually be added by the program that was used to generate the source map. The developer tools will only load this file if support for source maps is enabled and the developer tools are open.\n\nYou can also specify a source map is available by sending the `X-SourceMap` HTTP header in the response for the compressed JavaScript file.\n\n`X-SourceMap: /path/to/script.js.map`\n\nThe source map file contains a JSON object with information about the map itself and the original JavaScript files. Here is a simple example:\n\n```json\n{\n    version: 3,\n    file: \"script.js.map\",\n    sources: [\n        \"app.js\",\n        \"content.js\",\n        \"widget.js\"\n    ],\n    sourceRoot: \"/\",\n    names: [\"slideUp\", \"slideDown\", \"save\"],\n    mappings: \"AAA0B,kBAAhBA,QAAOC,SACjBD,OAAOC,OAAO...\"\n}\n```\n\n- `version` – This property indicates which version of the source map spec the file adheres to.\n- `file` – The name of the source map file.\n- `sources` – An array of URLs for the original source files.\n- `sourceRoot` – (optional) The URL which all of the files in the sources array will be resolved from.\n- `names` – An array containing all of the variable and function names from your source files.\n- `mappings` – A string of Base64 VLQs containing the actual code mappings. (This is where the magic happens.)\n\nUsing source maps allows developers to maintain a straight-forward debugging environment while at the same time optimizing their sites for performance.\n\n## Hot Module Replacement\n\nHot Module Replacement (or HMR) is one of the most useful features offered by webpack. It allows all kinds of modules to be updated at runtime without the need for a full refresh. This page focuses on implementation while the concepts page gives more details on how it works and why it's useful.\n","n":0.034}}},{"i":91,"$":{"0":{"v":"Tree Shaking","n":0.707},"1":{"v":"## General Info\n\nTree shaking is a term commonly used within a JavaScript context to describe the removal of dead code.\n\nIt relies on the import and export statements in ES2015 to detect if code modules are exported and imported for use between JavaScript files.\n\nIn modern JavaScript applications, we use module bundlers (e.g., webpack or Rollup) to automatically remove dead code when bundling multiple JavaScript files into single files. This is important for preparing code that is production ready, for example with clean structures and minimal file size.\n","n":0.108}}},{"i":92,"$":{"0":{"v":"TDD","n":1},"1":{"v":"## General Info\n\n**Test-driven development (TDD)**, is a new age evolutionary approach to development which emphasizes test-first development. Here you write a test before you write just enough production code to fulfill that test and then go on to refactor the code. The primary goal of TDD is specification and not validation (Martin, Newkirk, and Kess 2003).  In other words, TDD is one way to think through your requirements or design before your write your functional code (implying that TDD is both an important agile requirements and agile design technique). Another view is that TDD is a programming technique. As Ron Jeffries likes to say, the goal of TDD is to write clean code that works.\n\nThe first step is to quickly add a test, basically just enough test for your code to fail. Next you run your tests, often the complete test suite although for sake of speed you may decide to run only a subset, to ensure that the new test does in fact fail. You then update your functional code to make it pass the new tests. The fourth step is to run your tests again. If they fail you need to update your functional code and retest until the tests pass.\n\n![TDD Steps](/assets/tddSteps.jpg)\n\n### Why should developers care about automated unit tests?\n\n- Keeps you out of the (time hungry) debugger!\n- Reduces bugs in new features and in existing features\n- Reduces the cost of change\n- Improves design\n- Encourages refactoring\n- Builds a safety net to defend against other programmers\n- Is fun\n- Forces you to slow down and think\n- Speeds up development by eliminating waste\n- Reduces fear\n\n### How does TDD take development to the next level?\n\n- Improves productivity by\n  - minimizing time spent debugging\n  - reduces the need for manual (monkey) checking by developers and tester\n  - helping developers to maintain focus\n  - reduce **wastage**: hand overs\n- Improves communication\n- Creating living, up-to-date specification\n- Communicate design decisions\n- Learning: listen to your code\n- Baby steps: slow down and think\n- Improves confidence\n- Testable code by design + safety net\n- Loosely-coupled design\n- Refactoring\n\nIn summary, the importance of TDD cannot be overemphasized. TDD means less bugs, higher quality software, and a razor focus, but it can slow development down and the test suites can be tedious to manage and maintain. All in all, it is a recommended approach as the Pros far outweighs the Cons.\n\n### TDD should lead to better design\n\nThe process of learning effective TDD is the process of learning how to build more modular applications. TDD tends to have a simplifying effect on code, not a complicating effect. If you find that your code gets harder to read or maintain when you make it more testable, or you have to bloat your code with dependency injection boilerplate, you’re doing TDD wrong.\n\n1. You can write decoupled code without dependency injection, and\n2. Maximizing code coverage brings diminishing returns — the closer you get to 100% coverage, the more you have to complicate your application code to get even closer, which can subvert the important goal of reducing bugs in your application.\n\nMore complex code is often accompanied by more cluttered code. You want to produce uncluttered code for the same reasons you want to keep your house tidy:\n\n- More clutter leads to more convenient places for bugs to hide, which leads to more bugs, and\n- It’s easier to find what you’re looking for when there’s less clutter to get lost in.\n\n### Code Smells\n\n> “A code smell is a surface indication that usually corresponds to a deeper > problem in the system.” ~ Martin Fowler\n\n### What is a Mock\n\nA mock is a test double that stands in for real implementation code during the unit testing process. A mock is capable of producing assertions about how it was manipulated by the test subject during the test run. If your test double produces assertions, it’s a mock in the specific sense of the word.\n\nThe term “mock” is also used more generally to refer to the use of any kind of test double.\n\n### What is a unit test?\n\nUnit tests test individual units (modules, functions, classes) in isolation from the rest of the program.\n\nContrast unit tests with integration tests, which test integrations between two or more units, and functional tests, which test the application from the point of view of the user, including complete user interaction workflows from simulated UI manipulation, to data layer updates, and back to the user output (e.g., the on-screen representation of the app).\n\nFunctional tests are a subset of integration tests, because they test all of the units of an application, integrated in the context of the running application.\n\nIn general, units are tested using only the public interface of the unit (aka “public API” or “surface area”). This is referred to as black box testing. Black box testing leads to less brittle tests, because the implementation details of a unit tend to change more over time than the public API of the unit. If you use white box testing, where tests are aware of implementation details, any change to the implementation details could break the test, even if the public API continues to function as expected. In other words, white-box testing leads to wasted rework.\n\n### Test Coverage\n\nCode coverage refers to the amount of code covered by test cases. Coverage reports can be created by instrumenting the code and recording which lines were exercised during a test run. In general, we try to produce a high level of coverage, but code coverage starts to deliver diminishing returns as it gets closer to 100%.\n\nWhat most people don’t realize is that there are two kinds of coverage:\n\n1. Code coverage: how much of the code is exercised, and\n2. Case coverage: how many of the use-cases are covered by the test suites\n\nBecause use-cases may involve the environment, multiple units, users, and networking conditions, it is impossible to cover all required use-cases with a test suite that only contains unit tests. Unit tests by definition test units in isolation, not in integration, meaning that a test suite containing only unit tests will always have close to 0% case coverage for integration and functionaluse-case scenarios\n\n100% code coverage does not guarantee 100% case coverage.\n\nDevelopers targeting 100% code coverage are chasing the wrong metric.\n\n### Tight Coupling\n\nThe need to mock in order to achieve unit isolation for the purpose of unit tests is caused by coupling between units. Tight coupling makes code more rigid and brittle: more likely to break when changes are required. In general, less coupling is desirable for its own sake because it makes code easier to extend and maintain. The fact that it also makes testing easier by eliminating the need for mocks is just icing on the cake.\n\nFrom this we can deduce that if we’re mocking something, there may be an opportunity to make our code more flexible by reducing the coupling between units. Once that’s done, you won’t need the mocks anymore.\n\nCoupling is the degree to which a unit of code (module, function, class, etc…) depends upon other units of code. Tight coupling, or a high degree of coupling, refers to how likely a unit is to break when changes are made to its dependencies. In other words, the tighter the coupling, the harder it is to maintain or extend the application. Loose coupling reduces the complexity of fixing bugs and adapting the application to new use-cases.\n\nCoupling takes different forms:\n\n- **Subclass coupling**: Subclasses are dependent on the implementation and entire hierarchy of the parent class: the tightest form of coupling available in OO design.\n- **Control dependencies**: Code that controls its dependencies by telling them what to do, e.g., passing method names, etc… If the control API of the dependency changes, the dependent code will break.\n- **Mutable state dependencies**: Code that shares mutable state with other code, e.g., can change properties on a shared object. If relative timing of mutations change, it could break dependent code. If timing is nondeterministic, it may be impossible to achieve program correctness without a complete overhaul of all dependent units: e.g., there may be an irreparable tangle of race conditions. Fixing one bug could cause others to appear in other dependent units.\n- **State shape dependencies**: Code that shares data structures with other code, and only uses a subset of the structure. If the shape of the shared structure changes, it could break the dependent code.\n- **Event/message coupling**: Code that communicates with other units via message passing, events, etc…\n\n#### Causes of Tight Coupling\n\n- Mutation vs immutability\n- Side-Effects vs purity/isolated side-effects\n- Responsibility overload vs Do One Thing (DOT)\n- Procedural instructions vs describing structure\n- Class Inheritance vs composition\n\nImperative and object-oriented code is more susceptible to tight coupling than functional code. That doesn’t mean that programming in a functional style makes your code immune to tight coupling, but functional code uses pure functions as the elemental unit of composition, and pure functions are less vulnerable to tight coupling by nature.\n\n#### How to Pure Functions Reduce Coupling?\n\nPure functions:\n\n- Given the same input, always return the same output, and\n- Produce no side-effects\n\nThey reduce coupling by:\n\n- **Immutability**: Pure functions don’t mutate existing values. They return new ones, instead.\n- **No side effects**: The only observable effect of a pure function is its return value, so there’s no chance for it to interfere with the operation of other functions that may be observing external state such as the screen, the DOM, the console, standard out, the network, or the disk.\n- **Do one thing**: Pure functions do one thing: Map some input to some corresponding output, avoiding the responsibility overload that tends to plague object and class-based code.\n- **Structure, not instructions**: Pure functions can be safely memoized, meaning that, if the system had infinite memory, any pure function could be replaced with a lookup table that uses the function’s input as an index to retrieve a corresponding value from the table. In other words, pure functions describe structural relationships between data, not instructions for the computer to follow, so two different sets of conflicting instructions running at the same time can’t step on each other’s toes and cause problems.\n\n#### How to Remove Coupling\n\nTo remove coupling, we first need a better understanding of where coupling dependencies come from. Here are the main sources, roughly in order of how tight the coupling is:\n\nTight coupling:\n\n- Class inheritance (coupling is multiplied by each layer of inheritance and each descendant class)\n- Global variables\n- Other mutable global state (browser DOM, shared storage, network, etc…)\n- Module imports with side-effects\n- Implicit dependencies from compositions, e.g., const enhancedWidgetFactory = compose(eventEmitter, widgetFactory, enhancements); where widgetFactory depends on eventEmitter\n- Dependency injection containers\n- Dependency injection parameters\n- Control parameters (an outside unit is controlling the subject unit by telling it what to do)\n- Mutable parameters\n\nLoose coupling:\n\n- Module imports without side-effects (in black box testing, not all imports need isolating)\n- Message passing/pubsub\n- Immutable parameters (can still cause shared dependencies on state shape)\n\nIronically, most of the sources of coupling are mechanisms originally designed to reduce coupling. That makes sense, because in order to recompose our smaller problem solutions into a complete application, they need to integrate and communicate somehow. There are good ways, and bad ways. The sources that cause tight coupling should be avoided whenever it’s practical to do so. The loose coupling options are generally desirable in a healthy application.\n\nYou might be confused that I classified dependency injection containers and dependency injection parameters in the “tight coupling” group, when so many books and blog post categorize them as “loose coupling”. Coupling is not binary. It’s a gradient scale. That means that any grouping is going to be somewhat subjective and arbitrary.\n\nCan the unit be tested without mocking dependencies? If it can’t, it’s tightly coupled to the mocked dependencies.\n\nThe more dependencies your unit has, the more likely it is that there may be problematic coupling. Now that we understand how coupling happens, what can we do about it?\n\n1. Use pure functions as the atomic unit of composition, as opposed to classes, imperative procedures, or mutating functions\n2. Isolate side-effects from the rest of your program logic. That means don’t mix logic with I/O (including network I/O, rendering UI, logging, etc…)\n3. Remove dependent logic from imperative compositions so that they can become declarative compositions which don’t need their own unit tests. If there’s no logic, there’s nothing meaningful to unit test\n\nThat means that the code you use to set up network requests and request handlers won’t need unit tests. Use integration tests for those, instead.\n\nThat bears repeating:\n\n> Don’t unit test I/O.\n> I/O is for integrations. Use integration tests, instead.\n\nIt’s perfectly OK to mock and fake for integration tests.\n\n##### Use pure functions\n\nUsing pure functions takes a little practice, and without that practice, it’s not always clear how to write a pure function to do what you want to do. Pure functions can’t directly mutate global variables, the arguments passed into them, the network, the disk, or the screen. All they can do is return a value.\n\nIf you’re passed an array or an object, and you want to return a changed version of that object, you can’t just make the changes to the object and return it. You have to create a new copy of the object with the required changes. You can do that with the array accessor methods (e.g, concat, filter, map, reduce, slice), Object.assign(), using a new empty object as the target, or the array or object spread syntax. \n\nFor example:\n\n```javascript\n// Not pure\nconst signInUser = user => user.isSignedIn = true;\nconst foo = {\n  name: 'Foo',\n  isSignedIn: false\n};\n// Foo was mutated\nconsole.log(\n  signInUser(foo), // true\n  foo              // { name: \"Foo\", isSignedIn: true }\n);\n```\n\nvs…\n\n```javascript\n// Pure\nconst signInUser = user => ({...user, isSignedIn: true });\nconst foo = {\n  name: 'Foo',\n  isSignedIn: false\n};\n// Foo was not mutated\nconsole.log(\n  signInUser(foo), // { name: \"Foo\", isSignedIn: true }\n  foo              // { name: \"Foo\", isSignedIn: false }\n);\n```\n\nYou can use that trick to make React components render faster if you have a complex state tree that you may not need to traverse in depth with each render pass. Inherit from `PureComponent` and it implements `shouldComponentUpdate()` with a shallow prop and state comparison. When it detects identity equality, it knows that nothing has changed in that part of the state tree and it can move on without a deep state traversal.\n\nPure functions can also be memoized, meaning that you don’t have to build the whole object again if you’ve seen the same inputs before. You can trade computation complexity for memory and store pre-calculated values in a lookup table. For computationally expensive processes which don’t require unbounded memory, this may be a great optimization strategy.\n\nAnother property of pure functions is that, because they have no side-effects, it’s safe to distribute complex computations over large clusters of processors, using a divide-and-conquer strategy. This tactic is often employed to process images, videos, or audio frames using massively parallel GPUs originally designed for graphics, but now commonly used for lots of other purposes, like scientific computing.\n\nIn other words, mutation isn’t always faster, and it is often orders of magnitude slower because it takes a micro-optimization at the expense of macro-optimizations.\n\n##### Isolate side-effects from the rest of your program logic\n\nThere are several strategies that can help you isolate side-effects from the rest of your program logic. Here are some of them:\n\n- Use pub/sub to decouple I/O from views and program logic. Rather than directly triggering side-effects in UI views or program logic, emit an event or action object describing an event or intent.\n- Isolate logic from I/O e.g., compose functions which return promises using `asyncPipe()`.\n- Use objects that represent future computations rather than directly triggering computation with I/O, e.g., `call()` from `redux-saga` doesn't actually call a function. Instead, it returns an object with a reference to a function and its arguments, and the saga middleware calls it for you. That makes `call()` and all the functions that use it *pure functions*, which are easy to unit test with no mocking required.\n\n##### Use Pub/Sub\n\nPub/sub is short for the publish/subscribe pattern. In the publish/subscribe pattern, units don’t directly call each other. Instead, they publish messages that other units (subscribers) can listen to. Publishers don’t know what (if any) units will subscribe, and subscribers don’t know what (if any) publishers will publish.\n\nPub/sub is baked into the Document Object Model (DOM). Any component in your application can listen to events dispatched from DOM elements, such as mouse movements, clicks, scroll events, keystrokes, and so on. Back when everyone built web apps with jQuery, it was common to jQuery custom events to turn the DOM into a pub/sub event bus to decouple view rendering concerns from state logic.\n\nPub/sub is also baked into Redux. In Redux, you create a global model for application state (called the store). Instead of directly manipulating models, views and I/O handlers dispatch action objects to the store. An action object has a special key, called `type` which various reducers can listen for and respond to. Additionally, Redux supports middleware, which can also listen for and respond to specific action types. This way, your views don't need to know anything about how your application state is handled, and the state logic doesn't need to know anything about the views.\n\nIt also makes it trivial to patch into the dispatcher via middleware and trigger cross-cutting concerns, such as action logging/analytics, syncing state with storage or the server, and patching in realtime communication features with servers and network peers.\n\n##### Isolate logic from I/O\n\nSometimes you can use monad compositions (like promises) to eliminate dependent logic from your compositions. For example, the following function contains logic that you can’t unit test without mocking all of the async functions:\n\n```javascript\nasync function uploadFiles({user, folder, files}) {\n  const dbUser = await readUser(user);\n  const folderInfo = await getFolderInfo(folder);\n  if (await haveWriteAccess({dbUser, folderInfo})) {\n    return uploadToFolder({dbUser, folderInfo, files });\n  } else {\n    throw new Error(\"No write access to that folder\");\n  }\n}\n```\n\n**Remember**: Logic and I/O are separate concerns.\nLogic is thinking. Effects are actions. Think before you act!\n\n## Sources\n\nMost of this info was copied from this [Medium Article by Eric Elliot](https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a)\n","n":0.018}}},{"i":93,"$":{"0":{"v":"Scope","n":1},"1":{"v":"## Namespace\n\nThe namespace is sometimes an interchangeable word for scope, but usually the refers to the highest level scope.\n\n## Root Scope\n\nRoot Scope is Window\n\nso a root variable like:\n\n```javascript\nvar a = 1\n// can be accessed by:\nwindow.a\n// which will return \n1\n```\n\n## Naming Conflict\n\n```javascript\nvar a = 1;\n\nfunction foo() {\n    var a = 2;\n    console.log(a)\n    // will return 2 because connection to root a is broken\n}\n\nfoo();\n```\n\n## Lexical Scope\n\nLexical scope is easy to work with, any variables/objects/functions defined in its parent scope, are available in the scope chain. The only important thing to remember is that Lexical scope does not work backwards.\n\n## Closure\n\nClosures ties in very closely with Lexical Scope. A better example of how the closure side of things works, can be seen when returning a function reference - a more practical usage.\n\nA function doesn’t have to return in order to be called a closure though. Simply accessing variables outside of the immediate lexical scope creates a closure.\n\n## Scope and ‘this’\n\nEach scope binds a different value of this depending on how the function is invoked. We’ve all used the this keyword, but not all of us understand it and how it differs when invoked. By default this refers to the outer most global object, the window. We can easily show how invoking functions in different ways binds the this value differently:\n\n```javascript\nvar myFunction = function () {\n  console.log(this); // this = global, [object Window]\n};\nmyFunction();\n\nvar myObject = {};\nmyObject.myMethod = function () {\n  console.log(this); // this = Object { myObject }\n};\n\nvar nav = document.querySelector('.nav'); // <nav class=\"nav\">\nvar toggleNav = function () {\n  console.log(this); // this = <nav> element\n};\nnav.addEventListener('click', toggleNav, false);\n```\n\nThere are also problems that we run into when dealing with the this value, for instance if I do this, even inside the same function the scope can be changed and the this value can be changed:\n\n```javascript\nvar nav = document.querySelector('.nav'); // <nav class=\"nav\">\nvar toggleNav = function () {\n  console.log(this); // <nav> element\n  setTimeout(function () {\n    console.log(this); // [object Window]\n  }, 1000);\n};\nnav.addEventListener('click', toggleNav, false);\n```\n\nSo what’s happened here? We’ve created new scope which is not invoked from our event handler, so it defaults to the window Object as expected. There are several things we can do if we want to access the proper this value which isn’t affected by the new scope. You might have seen this before, where we can cache a reference to the this value using a that variable and refer to the lexical binding:\n\n```javascript\nvar nav = document.querySelector('.nav'); // <nav class=\"nav\">\nvar toggleNav = function () {\n  var that = this;\n  console.log(that); // <nav> element\n  setTimeout(function () {\n    console.log(that); // <nav> element\n  }, 1000);\n};\nnav.addEventListener('click', toggleNav, false);\n```\n\nThis is a neat little trick to be able to use the proper this value and resolve problems with newly created scope.\n\n## Changing scope with .call(), .apply() and .bind()\n\nThe .call() and .apply() methods are really sweet, they allows you to pass in a scope to a function, which binds the correct this value. Let’s manipulate the above function to make it so that our this value is each element in the array:\n\n```javascript\nvar links = document.querySelectorAll('nav li');\nfor (var i = 0; i < links.length; i++) {\n  (function () {\n    console.log(this);\n  }).call(links[i]);\n}\n```\n\nYou can see I’m passing in the current element in the Array iteration, links[i], which changes the scope of the function so that the this value becomes that iterated element. We can then use the this binding if we wanted. We can use either .call() or .apply() to change the scope, but any further arguments are where the two differ: .call(scope, arg1, arg2, arg3) takes individual arguments, comma separated, whereas .apply(scope, [arg1, arg2]) takes an Array of arguments.\n\nIt’s important to remember that using .call() or .apply() actually invokes your function, so instead of doing this:\n\n```javascript\nmyFunction(); // invoke myFunction\n```\n\nYou’ll let .call() handle it and chain the method:\n\n```javascript\nmyFunction.call(scope); // invoke myFunction using .call()\n```\n\n### .bind()\n\nUnlike the above, using .bind() does not invoke a function, it merely binds the values before the function is invoked. It’s a real shame this was introduced in ECMAScript 5 and not earlier as this method is fantastic.\n\n```javascript\nnav.addEventListener('click', toggleNav.bind(scope, arg1, arg2), false);\n```\n\n## Private and Public Scope\n\nIn many programming languages, you’ll hear about public and private scope, in JavaScript there is no such thing. We can, however, emulate public and private scope through things like Closures.\n\nBy using JavaScript design patterns, such as the Module pattern for example, we can create public and private scope. A simple way to create private scope, is by wrapping our functions inside a function. As we’ve learned, functions create scope, which keeps things out of the global scope:\n\n```javascript\n(function () {\n  // private scope inside here\n})();\n```\n\nWe might then add a few functions for use in our app:\n\n```javascript\n(function () {\n  var myFunction = function () {\n    // do some stuff here\n  };\n})();\n```\n\nBut when we come to calling our function, it would be out of scope:\n\n```javascript\n(function () {\n  var myFunction = function () {\n    // do some stuff here\n  };\n})();\n\nmyFunction(); // Uncaught ReferenceError: myFunction is not defined\n```\n\nSuccess! We’ve created private scope. But what if I want the function to be public? There’s a great pattern (called the Module Pattern [and Revealing Module Pattern]) which allows us to scope our functions correctly, using private and public scope and an Object. Here I grab my global namespace, called Module, which contains all of my relevant code for that module:\n\n```javascript\n// define module\nvar Module = (function () {\n  return {\n    myMethod: function () {\n      console.log('myMethod has been called.');\n    }\n  };\n})();\n\n// call module + methods\nModule.myMethod();\n```\n\nThe return statement here is what returns our public methods, which are accessible in the global scope - but are namespaced. This means our Module takes care of our namespace, and can contain as many methods as we want. We can extend the Module as we wish:\n\n```javascript\n// define module\nvar Module = (function () {\n  return {\n    myMethod: function () {\n\n    },\n    someOtherMethod: function () {\n\n    }\n  };\n})();\n\n// call module + methods\nModule.myMethod();\nModule.someOtherMethod();\n```\n\nSo what about private methods? This is where a lot of developers go wrong and pollute the global namespace by dumping all their functions in the global scope. Functions that help our code work do not need to be in the global scope, only the API calls do - things that need to be accessed globally in order to work. Here’s how we can create private scope, by not returning functions:\n\n```javascript\nvar Module = (function () {\n  var privateMethod = function () {\n\n  };\n  return {\n    publicMethod: function () {\n\n    }\n  };\n})();\n```\n\nThis means that publicMethod can be called, but privateMethod cannot, as it’s privately scoped! These privately scoped functions are things like helpers, addClass, removeClass, Ajax/XHR calls, Arrays, Objects, anything you can think of.\n\nHere’s an interesting twist though, anything in the same scope has access to anything in the same scope, even after the function has been returned. Which means, our public methods have access to our private ones, so they can still interact but are unaccessible in the global scope.\n\n```javascript\nvar Module = (function () {\n  var privateMethod = function () {\n\n  };\n  return {\n    publicMethod: function () {\n      // has access to `privateMethod`, we can call it:\n      // privateMethod();\n    }\n  };\n})();\n```\n\nThis allows a very powerful level of interactivity, as well as code security. A very important part of JavaScript is ensuring security, which is exactly why we can’t afford to put all functions in the global scope as they’ll be publicly available, which makes them open to vulnerable attacks.\n\nHere’s an example of returning an Object, making use of public and private methods:\n\n```javascript\nvar Module = (function () {\n  var myModule = {};\n  var privateMethod = function () {\n\n  };\n  myModule.publicMethod = function () {\n\n  };\n  myModule.anotherPublicMethod = function () {\n\n  };\n  return myModule; // returns the Object with public methods\n})();\n\n// usage\nModule.publicMethod();\n```\n\nOne neat naming convention is to begin private methods with an underscore, which visually helps you differentiate between public and private:\n\n```javascript\nvar Module = (function () {\n  var _privateMethod = function () {\n\n  };\n  var publicMethod = function () {\n\n  };\n})();\n```\n\nThis helps us when returning an anonymous Object, which the Module can use in Object fashion as we can simply assign the function references:\n\n```javascript\nvar Module = (function () {\n  var _privateMethod = function () {\n\n  };\n  var publicMethod = function () {\n\n  };\n  return {\n    publicMethod: publicMethod,\n    anotherPublicMethod: anotherPublicMethod\n  }\n})();\n```\n\n## Scope Example\n\n```javascript\nconst FactoryFunction = string => {\n  const capitalizeString = () => string.toUpperCase();\n  const printString = () => console.log(`----${capitalizeString()}----`);\n  return { printString };\n};\n\nconst taco = FactoryFunction('taco');\n\nprintString(); // ERROR!!\ncapitalizeString(); // ERROR!!\ntaco.capitalizeString(); // ERROR!!\ntaco.printString(); // this prints \"----TACO----\"\n```\n\nThe only way to use either of those functions is to return them in the object (see line 4), which is why we can call taco.printString() but not taco.capitalizeString().\n\n## Source\n\nI grabbed most of these notes from this guide:\n\n[Everything You Wanted to Know About JS Scope](https://ultimatecourses.com/blog/everything-you-wanted-to-know-about-javascript-scope)\n","n":0.026}}},{"i":94,"$":{"0":{"v":"React","n":1},"1":{"v":"## 3 Notes on Modern React Syntax\n\n- We define variables with `let` and `const` statements. For the purposes of the React documentation, you can consider them equivalent to `var`.\n- We use the `class` keyword to define JavaScript classes. There are two things worth remembering about them. Firstly, unlike with objects, you don't need to put commas between class method definitions. Secondly, unlike many other languages with classes, in JavaScript the value of this in a method depends on how it is called.\n- We sometimes use `=>` to define \"arrow functions\". They're like regular functions, but shorter. For example, `x => x * 2` is roughly equivalent to `function(x) { return x * 2; }`. Importantly, arrow functions don't have their own this value so they're handy when you want to preserve the this value from an outer method definition.\n\n## manifest.json\n\nThis is a web app manifest that describes your application, and it’s used by, e.g., mobile phones if a shortcut is added to the home screen.\n\nBasically, the information read from this file is used to populate the web app’s icons, colors, names, etc.\n\n## Functional vs Class Component\n\n- Syntax is shorter for funtional\n- Prior to React 16.8 (Hooks) you could not `setState()` in functional components\n- Prior to React 16.8 (Hooks) you could not `useEffect` in functional components\n- Functional Components are easier to read, create less code.\n\n## Functional Components\n\n- We don’t have to import and extend “Component” from React.\n- We don’t need a constructor.\n- We don’t need the render function, instead we put the return statement right at the end of the function body.\n\n### 3 ways of defining and functional component\n\n```jsx\nimport React from 'react';\n\nfunction App() {\n  return <div className=\"App\">Hello World!</div>;\n}\n\n// OR (arrow-function syntax)\n\nconst App = () => {\n  return <div className=\"App\">Hello World!</div>;\n};\n\n// OR (implicit return)\n\nconst App = () => <div className=\"App\">Hello World!</div>;\n\nexport default App;\n```\n\n## Props\n\nWhether you declare a component as a function or a class it should be a pure function, it must never modify its own props.\n\n**All React components must act like pure functions with respect to their props.**\n\n### Destructuring Props in Components\n\n```jsx\nimport React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { title, onButtonClicked } = this.props;\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <button onClick={onButtonClicked}>Click Me!</button>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\n```\n\n### Binding This\n\nAlways remember: you must bind this for all methods in class components when passing them to other components.\n\n```jsx\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickBtn = this.onClickBtn.bind(this);\n  }\n```\n\n## State\n\nThe following example of our simple counter app shows how to define state in React:\n\nYou **always** declare state in the constructor of a class component. Once again, this will work differently when we cover functional components later.\n\n**IMPORTANT**: In React, state should be treated as **immutable**. This means you should never change state directly (i.e. without using `setState`) because it can lead to unexpected behavior or bugs.\n\nIn other words, you should never do something like: `this.state.count = 3`, or, `this.state.count++`. Instead, always use the `setState` method React provides to class components to modify the state.\n\n```jsx\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      count: 0,\n    };\n\n    this.countUp = this.countUp.bind(this);\n  }\n\n  countUp() {\n    this.setState({\n      count: this.state.count + 1,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.countUp}>Click Me!</button>\n        <p>{this.state.count}</p>\n      </div>\n    );\n  }\n}\n```\n\n### Using State Correctly\n\n1. Do Not Modify State Directly\n\n    ```jsx\n    // Wrong\n    this.state.comment = 'Hello';\n    // Correct\n    this.setState({comment: 'Hello'});\n    ```\n\n2. State Updates May Be Asynchronous\n\n    React may batch multiple setState() calls into a single update for performance.\n\n    Because `this.props` and `this.state` may be updated asynchronously, you should not rely on their values for calculating the next state.\n\n    ```jsx\n    // Wrong\n    this.setState({\n        counter: this.state.counter + this.props.increment,\n    });\n    // Correct\n    this.setState((state, props) => ({\n        counter: state.counter + props.increment\n    }));\n    // Also works with a regular function\n    this.setState(function(state, props) {\n    return {\n        counter: state.counter + props.increment\n    };\n    });\n    ```\n\n3. State Updates are Merged\n\n    When you call `setState()`, React merges the object you provide into the current state.\n\n    Your state may contain several independent variables that you can update them independently with separate `setState()` calls:\n\n    ```jsx\n        componentDidMount() {\n        fetchPosts().then(response => {\n        this.setState({\n            posts: response.posts\n        });\n        });\n\n        fetchComments().then(response => {\n        this.setState({\n            comments: response.comments\n        });\n        });\n    }\n    ```\n\n### Data Flows Down\n\nNeither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.\n\nThis is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.\n\nA component may choose to pass its state down as props to its child components:\n\n```jsx\n<FormattedDate date={this.state.date} />\n```\n\nThe `FormattedDate` component would receive the `date` in its props and wouldn’t know whether it came from the `Clock`’s state, from the `Clock`’s props, or was typed by hand.\n\nThis is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.\n\nIn React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.\n","n":0.034}}},{"i":95,"$":{"0":{"v":"JSX","n":1},"1":{"v":"## Attribute Syntax\n\nSince JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.\n\nFor example, `class` becomes `className` in JSX, and `tabindex` becomes `tabIndex`.\n\n## ASI in JSX\n\nWe split JSX over multiple lines for readability. While it isn’t required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of automatic semicolon insertion.\n\n## JSX and Injection Attacks\n\nBy default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.\n","n":0.094}}},{"i":96,"$":{"0":{"v":"React Hooks","n":0.707},"1":{"v":"## General Info\n\nHooks allow functional components to also have a lifecycle as well as a state.\n\nImported as an object function from the React module:\n\n```javascript\nimport React, { useState, useEffect } from \"react\";\n```\n\nHooks were created as a way to solve these problems:\n\n1. It’s hard to reuse stateful logic between components\n    - Patterns like render props and higher-order components that try to solve this. But these patterns require you to restructure your components when you use them, which can be cumbersome and make code harder to follow\n    - Hooks allow you to reuse stateful logic without changing your component hierarchy.\n2. Complex components become hard to understand\n    - Hooks let you split one component into smaller functions based on what pieces are related (such as setting up a subscription or fetching data)\n3. Classes confuse both people and machines\n    - You have to understand how this works in JavaScript, which is very different from how it works in most languages.\n    - You have to remember to bind the event handlers.\n    - Hooks let you use more of React’s features without classes.\n\n## Hook Rules\n\n1. Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions.\n2. Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks — your own custom Hooks. We’ll learn about them in a moment.)\n\n## Custom Hooks\n\nHooks are a way to reuse stateful logic, not state itself. In fact, each call to a Hook has a completely isolated state — so you can even use the same custom Hook twice in one component.\n\nCustom Hooks are more of a convention than a feature. If a function’s name starts with ”use” and it calls other Hooks, we say it is a custom Hook. The useSomething naming convention is how our linter plugin is able to find bugs in the code using Hooks.\n\nYou can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven’t considered. We are excited to see what custom Hooks the React community will come up with.\n\n## useState\n\nFunctional replacement for `this.state` and `setState()`\n\n```javascript\nconst [count, setCount] = useState(0);\nconst [color, setColor] = useState('black');\nconst [shape, setShape] = useState('circle');\n```\n\nHowever, unlike `this.setState` in a class, updating a state variable always replaces it instead of merging it.\n\n## useEffect\n\nFunctional replacement for lifecycle methods syntax is:\n\n```javascript\nuseEffect(() => {}, [])\n```\n\nuseEffect Hooks let us split the code based on what it is doing rather than a lifecycle method name. React will apply every effect used by the component, in the order they were specified.\n\n### componentDidMount optional use\n\nLeave it empty.\n\nThis option is equal to a componentDidMount lifecycle method, meaning the hook runs one time when the component mounts (is inserted in the DOM tree)\n\n```javascript\nuseEffect(() => {\n  // Do something\n}, []);\n```\n\n### componentDidUpdate optional use\n\nAdd a dependency to the array.\n\nThis way, the `useEffect` hook will re-run anytime the dependency, in this case `(color)` changes. This is similar to a `componentDidUpdate` method, with the only difference that it only runs when a certain condition has changed.\n\n```javascript\nuseEffect(() => {\n  // Do something\n}, [color]);\n```\n\nIf you use this optimization, make sure the array includes all values from the component scope (such as props and state) that change over time and that are used by the effect. Otherwise, your code will reference stale values from previous renders.\n\n### componentDidMount and componentDidUpdate combo optional use\n\nLeave out the dependency array.\n\nYou can also completely leave out the dependency array. This way, the useEffect hook runs anytime the component is updated, AND right after the initial render. This is the difference compared to the componentDidUpdate lifecycle method, because it also runs after the initial render. This way it would be equal to a componentDidMount and componentDidUpdate method combined.\n\n```javascript\nuseEffect(() => {\n  // Do something\n});\n```\n\n### componentWillUnmount with return method\n\nIf you write a return statement like the above in a useEffect, it will do the same as a componentWillUnmount method.\n\n```javascript\nuseEffect(() => {\n  // Do something\n}, [color]);\nreturn () => {\n  document.removeEventListener(\"click\", changeColorOnClick);\n};\n```\n","n":0.039}}},{"i":97,"$":{"0":{"v":"Higher Order Components - HOCS","n":0.447},"1":{"v":"## General Info\n\nA HOC is an advanced technique for reusing logic in React components. It is a pattern created out of React’s compositional nature.\n\nHOCs basically incorporate the don’t-repeat-yourself (DRY) principle of programming, which you’ve most likely come across at some point in your career as a software developer. It is one of the best-known principles of software development, and observing it is very important when building an application or writing code in general.\n\nHigher-order functions in JavaScript take some functions as arguments and return another function. They enable us to abstract over actions, not just values, They come in several forms, and they help us to write less code when operating on functions and even arrays.\n\n### HOC Rules\n\n1. We don’t modify or mutate components. We create new ones.\n2. A HOC is used to compose components for code reuse.\n3. A HOC is a pure function. It has no side effects, returning only a new component.\n\n### Example Higher Order Function\n\n```javascript\nconst formatCurrency = function( \n    currencySymbol,\n    decimalSeparator  ) {\n    return function( value ) {\n        const wholePart = Math.trunc( value / 100 );\n        let fractionalPart = value % 100;\n        if ( fractionalPart < 10 ) {\n            fractionalPart = '0' + fractionalPart;\n        }\n        return `${currencySymbol}${wholePart}${decimalSeparator}${fractionalPart}`;\n    }\n}\n```\n\n`formatCurrency` returns a function with a fixed currency symbol and decimal separator.\n\nWe then pass the formatter a value, and format this value with the function by extracting its whole part and the fractional part. The returned value of this function is constructed by a template literal, concatenating the currency symbol, the whole part, the decimal separator, and the fractional part.\n\nLet’s use this higher-order function by assigning a value to it and seeing the result.\n\n```shell\n> getLabel = formatCurrency( '$', '.' );\n \n> getLabel( 1999 )\n\"$19.99\" //formatted value\n \n> getLabel( 2499 )\n\"$24.99\" //formatted value\n```\n\n### Example of a Higher Order Component\n\n```javascript\nimport React from 'react';\n// Take in a component as argument WrappedComponent\nconst higherOrderComponent = (WrappedComponent) => {\n// And return another component\n  class HOC extends React.Component {\n    render() {\n      return <WrappedComponent />;\n    }\n  }\n  return HOC;\n};\n```\n\n### Use Cases\n\n- Show a loader while a component waits for data \n- Conditionally Rendered Components (different view for authed users)\n- Components with Specific Styling (also by logged in or preference)\n- Provide a component with a specific prop\n\n\n","n":0.052}}},{"i":98,"$":{"0":{"v":"Pure Functions","n":0.707},"1":{"v":"## What is a pure function\n\n1. The function always returns the same result if the same arguments are passed in. It does not depend on any state, or data, change during a program’s execution. It must only depend on its input arguments.\n2. The function does not produce any observable side effects such as network requests, input and output devices, or data mutation.\n\n## What are Observable Side Effects\n\n**Note**: If a pure function calls a pure function this isn’t a side effect and the calling function is still pure.\n\nSide effects include, but are not limited to:\n\n- Making a HTTP request\n- Mutating data\n- Printing to a screen or console\n- DOM Query/Manipulation\n- Math.random()\n- Getting the current time\n\n### Pure Function Example\n\n```javascript\nfunction priceAfterTax(productPrice) {\n return (productPrice * 0.20) + productPrice;\n}\n```\n\nIt passes both 1, and 2, of the requirements for a function to be declared pure. It doesn’t depend on any external input, it doesn’t mutate any data and it doesn’t have any side effects.\n\n### Impure Function Example\n\n```javascript\nvar tax = 20;\nfunction calculateTax(productPrice) {\n return (productPrice * (tax/100)) + productPrice; \n}\n```\n\nA pure function can not depend on outside variables. It fails one of the requirements thus this function is impure.\n\n## Why Are Pure Functions Important In JavaScript?\n\nNot all functions need to be , or should be, pure. For example, an event handler for a button press that manipulates the DOM is not a good candidate for a pure function. But, the event handler can call other pure functions which will reduce the number of impure functions in your application.\n\n### Testability And Refactoring\n\nOne of the major benefits of using pure functions is they are immediately testable. They will always produce the same result if you pass in the same arguments.\n\nThey also makes maintaining and refactoring code much easier. You can change a pure function and not have to worry about unintended side effects messing up the entire application and ending up in debugging hell.\n\nWhen used correctly the use of pure functions produces better quality code. It’s a cleaner way of working with lots of benefits.\n\nNote that pure functions are not limited to JavaScript. For an in depth — mind numbing — explanation of pure functions see here. I also highly recommend reading this and this.\n","n":0.052}}},{"i":99,"$":{"0":{"v":"Promises","n":1},"1":{"v":"## General Info\n\nPromises are a mechanism of handling asynchronous code, and they’re one you will see somewhat often when using other libraries or frameworks. Knowing what they are and how to use them is quite useful.\n\nA promise has 3 states:\n\n- **Pending**: You don’t know if you will get that phone\n- **Fulfilled**: Mom is happy, she buys you a brand new phone\n- **Rejected**: Mom is unhappy, she doesn’t buy you a phone\n\n### Async Await\n\nES7 introduced async and await syntax. It makes the asynchronous syntax easier to understand, without the `.then()` and `.catch()`.\n\n```javascript\nasync function askMom() {\n    try {\n        console.log('before asking Mom');\n\n        let phone = await willIGetNewPhone;\n        let message = await showOff(phone);\n\n        console.log(message);\n        console.log('after asking mom');\n    }\n    catch (error) {\n        console.log(error.message);\n    }\n}\n\n// async await it here too\n(async () => {\n    await askMom();\n})();\n```\n\n## From You Dont Know JS\n\nNote: Because a Promise is externally immutable once resolved, it's now safe to pass that value around to any party and know that it cannot be modified accidentally or maliciously. This is especially true in relation to multiple parties observing the resolution of a Promise. It is not possible for one party to affect another party's ability to observe Promise resolution. Immutability may sound like an academic topic, but it's actually one of the most fundamental and important aspects of Promise design, and shouldn't be casually passed over.\n\nThe new Promise() constructor should only be used for legacy async tasks, like usage of `setTimeout` or `XMLHttpRequest`. A new Promise is created with the new keyword and the promise provides resolve and reject functions to the provided callback:\n\n```javascript\nvar p = new Promise(function(resolve, reject) {\n    // Do an async task async task and then...\n\n    if(/* good condition */) {\n        resolve('Success!');\n    }\n    else {\n        reject('Failure!');\n    }\n});\n\np.then(function(result) { \n    /* do something with the result */\n}).catch(function() {\n    /* error :( */\n}).finally(function() {\n   /* executes regardless or success for failure */ \n});\n```\n\nIt's up to the developer to manually call resolve or reject within the body of the callback based on the result of their given task. A realistic example would be converting XMLHttpRequest to a promise-based task:\n\n```javascript\n// From Jake Archibald's Promises and Back:\n// http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promisifying-xmlhttprequest\n\nfunction get(url) {\n  // Return a new promise.\n  return new Promise(function(resolve, reject) {\n    // Do the usual XHR stuff\n    var req = new XMLHttpRequest();\n    req.open('GET', url);\n\n    req.onload = function() {\n      // This is called even on 404 etc\n      // so check the status\n      if (req.status == 200) {\n        // Resolve the promise with the response text\n        resolve(req.response);\n      }\n      else {\n        // Otherwise reject with the status text\n        // which will hopefully be a meaningful error\n        reject(Error(req.statusText));\n      }\n    };\n\n    // Handle network errors\n    req.onerror = function() {\n      reject(Error(\"Network Error\"));\n    };\n\n    // Make the request\n    req.send();\n  });\n}\n\n// Use it!\nget('story.json').then(function(response) {\n  console.log(\"Success!\", response);\n}, function(error) {\n  console.error(\"Failed!\", error);\n});\n```\n\nSometimes you don't need to complete an async tasks within the promise -- if it's possible that an async action will be taken, however, returning a promise will be best so that you can always count on a promise coming out of a given function. In that case you can simply call `Promise.resolve()` or `Promise.reject()` without using the new keyword. For example:\n\n```javascript\nvar userCache = {};\n\nfunction getUserDetail(username) {\n  // In both cases, cached or not, a promise will be returned\n\n  if (userCache[username]) {\n    // Return a promise without the \"new\" keyword\n    return Promise.resolve(userCache[username]);\n  }\n\n  // Use the fetch API to get the information\n  // fetch returns a promise\n  return fetch('users/' + username + '.json')\n    .then(function(result) {\n      userCache[username] = result;\n      return result;\n    })\n    .catch(function() {\n      throw new Error('Could not find user: ' + username);\n    });\n}\n```\n\n### then()\n\nAll promise instances get a then method which allows you to react to the promise.  The first then method callback receives the result given to it by the resolve() call:\n\n```javascript\nnew Promise(function(resolve, reject) {\n    // A mock async action using setTimeout\n    setTimeout(function() { resolve(10); }, 3000);\n})\n.then(function(result) {\n    console.log(result);\n});\n\n// From the console:\n// 10\n```\n\nThe then callback is triggered when the promise is resolved.  You can also chain then method callbacks:\n\n```javascript\nnew Promise(function(resolve, reject) { \n    // A mock async action using setTimeout\n    setTimeout(function() { resolve(10); }, 3000);\n})\n.then(function(num) { console.log('first then: ', num); return num * 2; })\n.then(function(num) { console.log('second then: ', num); return num * 2; })\n.then(function(num) { console.log('last then: ', num);});\n\n// From the console:\n// first then:  10\n// second then:  20\n// last then:  40\n```\n\n### catch()\n\nThe catch callback is executed when the promise is rejected:\n\n```javascript\nnew Promise(function(resolve, reject) {\n    // A mock async action using setTimeout\n    setTimeout(function() { reject('Done!'); }, 3000);\n})\n.then(function(e) { console.log('done', e); })\n.catch(function(e) { console.log('catch: ', e); });\n\n// From the console:\n// 'catch: Done!'\n```\n\n### finally()\n\nThe newly introduced finally callback is called regardless of success or failure:\n\n```javascript\n(new Promise((resolve, reject) => { reject(\"Nope\"); }))\n    .then(() => { console.log(\"success\") })\n    .catch(() => { console.log(\"fail\") })\n    .finally(res => { console.log(\"finally\") });\n\n// >> fail\n// >> finally\n```\n\n### Promise.all\n\nThink about JavaScript loaders:  there are times when you trigger multiple async interactions but only want to respond when all of them are completed -- that's where Promise.all comes in.  The Promise.all method takes an array of promises and fires one callback once they are all resolved:\n\n```javascript\nPromise.all([promise1, promise2]).then(function(results) {\n    // Both promises resolved\n})\n.catch(function(error) {\n    // One or more promises was rejected\n});\n```\n\nA perfect way of thinking about Promise.all is firing off multiple AJAX (via fetch) requests at one time:\n\n```javascript\nvar request1 = fetch('/users.json');\nvar request2 = fetch('/articles.json');\n\nPromise.all([request1, request2]).then(function(results) {\n    // Both promises done!\n});\n```\n\nYou could combine APIs like fetch and the Battery API since they both return promises:\n\n```javascript\nPromise.all([fetch('/users.json'), navigator.getBattery()]).then(function(results) {\n    // Both promises done!\n});\n```\n\nDealing with rejection is, of course, hard. If any promise is rejected the catch fires for the first rejection:\n\n```javascript\nvar req1 = new Promise(function(resolve, reject) { \n    // A mock async action using setTimeout\n    setTimeout(function() { resolve('First!'); }, 4000);\n});\nvar req2 = new Promise(function(resolve, reject) { \n    // A mock async action using setTimeout\n    setTimeout(function() { reject('Second!'); }, 3000);\n});\nPromise.all([req1, req2]).then(function(results) {\n    console.log('Then: ', results);\n}).catch(function(err) {\n    console.log('Catch: ', err);\n});\n\n// From the console:\n// Catch: Second!\n```\n\n### Promise.race()\n\nPromise.race is an interesting function -- instead of waiting for all promises to be resolved or rejected, Promise.race triggers as soon as any promise in the array is resolved or rejected:\n\n```javascript\nvar req1 = new Promise(function(resolve, reject) { \n    // A mock async action using setTimeout\n    setTimeout(function() { resolve('First!'); }, 8000);\n});\nvar req2 = new Promise(function(resolve, reject) { \n    // A mock async action using setTimeout\n    setTimeout(function() { resolve('Second!'); }, 3000);\n});\nPromise.race([req1, req2]).then(function(one) {\n    console.log('Then: ', one);\n}).catch(function(one, two) {\n    console.log('Catch: ', one);\n});\n\n// From the console:\n// Then: Second!\n```\n\nA use case could be triggering a request to a primary source and a secondary source (in case the primary or secondary are unavailable).\n\n### Completion Event\n\nWhether you call it a \"completion event\" or a \"continuation event\" depends on your perspective. Is the focus more on what happens with foo(..), or what happens after `foo(..)` finishes? Both perspectives are accurate and useful. The event notification tells us that `foo(..)` has completed, but also that it's OK to continue with the next step. Indeed, the callback you pass to be called for the event notification is itself what we've previously called a continuation. Because completion event is a bit more focused on the foo(..), which more has our attention at present, we slightly favor completion event for the rest of this text.\n\nThe pattern shown with `new Promise( function(..){ .. } )` is generally called the \"revealing constructor\". The function passed in is executed immediately (not async deferred, as callbacks to then(..) are), and it's provided two parameters, which in this case we've named resolve and reject. These are the resolution functions for the promise. resolve(..) generally signals fulfillment, and `reject(..)` signals rejection.\n\n### Thenable Duck Typing\n\nAn important detail is how to know for sure if some value is a genuine Promise or not. Or more directly, is it a value that will behave like a Promise?\n\nGiven that Promises are constructed by the new Promise(..) syntax, you might think that p instanceof Promise would be an acceptable check. But unfortunately, there are a number of reasons that's not totally sufficient.\n\nMainly, you can receive a Promise value from another browser window (iframe, etc.), which would have its own Promise different from the one in the current window/frame, and that check would fail to identify the Promise instance.\n\nAs such, it was decided that the way to recognize a Promise (or something that behaves like a Promise) would be to define something called a \"thenable\" as any object or function which has a then(..) method on it. It is assumed that any such value is a Promise-conforming thenable.\n\nThe standards decision to hijack the previously nonreserved -- and completely general-purpose sounding -- then property name means that no value (or any of its delegates), either past, present, or future, can have a then(..) function present, either on purpose or by accident, or that value will be confused for a thenable in Promises systems, which will probably create bugs that are really hard to track down.\n\n*Warning*: I do not like how we ended up with duck typing of thenables for Promise recognition. There were other options, such as \"branding\" or even \"anti-branding\"; what we got seems like a worst-case compromise. But it's not all doom and gloom. Thenable duck typing can be helpful, as we'll see later. Just beware that thenable duck typing can be hazardous if it incorrectly identifies something as a Promise that isn't.\n\n### Promise Trust\n\nWhereas the future values and completion events analogies play out explicitly in the code patterns we've explored, it won't be entirely obvious why or how Promises are designed to solve all of the inversion of control trust issues we laid out in the \"Trust Issues\" section of Chapter 2. But with a little digging, we can uncover some important guarantees that restore the confidence in async coding that Chapter 2 tore down!\n\nLet's start by reviewing the trust issues with callbacks-only coding. When you pass a callback to a utility foo(..), it might:\n\n- Call the callback too early\n- Call the callback too late (or never)\n- Call the callback too few or too many times\n- Fail to pass along any necessary environment/parameters\n- Swallow any errors/exceptions that may happen\n\nThe characteristics of Promises are intentionally designed to provide useful, repeatable answers to all these concerns.\n\n#### Calling Too Early\n\nPrimarily, this is a concern of whether code can introduce Zalgo-like effects (see Chapter 2), where sometimes a task finishes synchronously and sometimes asynchronously, which can lead to race conditions.\n\nPromises by definition cannot be susceptible to this concern, because even an immediately fulfilled Promise (like new Promise(function(resolve){ resolve(42); })) cannot be observed synchronously.\n\nThat is, when you call then(..) on a Promise, even if that Promise was already resolved, the callback you provide to then(..) will always be called asynchronously (for more on this, refer back to \"Jobs\" in Chapter 1).\n\nNo more need to insert your own setTimeout(..,0) hacks. Promises prevent Zalgo automatically.\n\n#### Calling Too Late\n\nSimilar to the previous point, a Promise's then(..) registered observation callbacks are automatically scheduled when either resolve(..) or reject(..) are called by the Promise creation capability. Those scheduled callbacks will predictably be fired at the next asynchronous moment (see \"Jobs\" in Chapter 1).\n\nIt's not possible for synchronous observation, so it's not possible for a synchronous chain of tasks to run in such a way to in effect \"delay\" another callback from happening as expected. That is, when a Promise is resolved, all then(..) registered callbacks on it will be called, in order, immediately at the next asynchronous opportunity (again, see \"Jobs\" in Chapter 1), and nothing that happens inside of one of those callbacks can affect/delay the calling of the other callbacks.\n\n#### Promise Scheduling Quirks\n\nIt's important to note, though, that there are lots of nuances of scheduling where the relative ordering between callbacks chained off two separate Promises is not reliably predictable.\n\nIf two promises p1 and p2 are both already resolved, it should be true that p1.then(..); p2.then(..) would end up calling the callback(s) for p1 before the ones for p2. But there are subtle cases where that might not be true, such as the following:\n\n```javascript\nvar p3 = new Promise( function(resolve,reject){\n  resolve( \"B\" );\n} );\n\nvar p1 = new Promise( function(resolve,reject){\n  resolve( p3 );\n} );\n\nvar p2 = new Promise( function(resolve,reject){\n  resolve( \"A\" );\n} );\n\np1.then( function(v){\n  console.log( v );\n} );\n\np2.then( function(v){\n  console.log( v );\n} );\n\n// A B  <-- not  B A  as you might expect\n```\n\nWe'll cover this more later, but as you can see, p1 is resolved not with an immediate value, but with another promise p3 which is itself resolved with the value \"B\". The specified behavior is to unwrap p3 into p1, but asynchronously, so p1's callback(s) are behind p2's callback(s) in the asynchronous Job queue\n\nTo avoid such nuanced nightmares, you should never rely on anything about the ordering/scheduling of callbacks across Promises. In fact, a good practice is not to code in such a way where the ordering of multiple callbacks matters at all. Avoid that if you can.\n\n#### Never Calling the Callback\n\nThis is a very common concern. It's addressable in several ways with Promises.\n\nFirst, nothing (not even a JS error) can prevent a Promise from notifying you of its resolution (if it's resolved). If you register both fulfillment and rejection callbacks for a Promise, and the Promise gets resolved, one of the two callbacks will always be called.\n\nOf course, if your callbacks themselves have JS errors, you may not see the outcome you expect, but the callback will in fact have been called. We'll cover later how to be notified of an error in your callback, because even those don't get swallowed.\n\nBut what if the Promise itself never gets resolved either way? Even that is a condition that Promises provide an answer for, using a higher level abstraction called a \"race\":\n\n```javascript\n// a utility for timing out a Promise\nfunction timeoutPromise(delay) {\n  return new Promise( function(resolve,reject){\n    setTimeout( function(){\n      reject( \"Timeout!\" );\n    }, delay );\n  } );\n}\n\n// setup a timeout for `foo()`\nPromise.race( [\n  foo(),  // attempt `foo()`\n  timeoutPromise( 3000 )  // give it 3 seconds\n] )\n.then(\n  function(){\n    // `foo(..)` fulfilled in time!\n  },\n  function(err){\n    // either `foo()` rejected, or it just\n    // didn't finish in time, so inspect\n    // `err` to know which\n  }\n);\n```\n\nThere are more details to consider with this Promise timeout pattern, but we'll come back to it later.\n\nImportantly, we can ensure a signal as to the outcome of foo(), to prevent it from hanging our program indefinitely.\n\n#### Calling Too Few or Too Many Times\n\nBy definition, one is the appropriate number of times for the callback to be called. The \"too few\" case would be zero calls, which is the same as the \"never\" case we just examined.\n\nThe \"too many\" case is easy to explain. Promises are defined so that they can only be resolved once. If for some reason the Promise creation code tries to call resolve(..) or reject(..) multiple times, or tries to call both, the Promise will accept only the first resolution, and will silently ignore any subsequent attempts.\n\nBecause a Promise can only be resolved once, any then(..) registered callbacks will only ever be called once (each).\n\nOf course, if you register the same callback more than once, (e.g., p.then(f); p.then(f);), it'll be called as many times as it was registered. The guarantee that a response function is called only once does not prevent you from shooting yourself in the foot.\n\n#### Failing to Pass Along Any Parameters/Environment\n\nPromises can have, at most, one resolution value (fulfillment or rejection).\n\nIf you don't explicitly resolve with a value either way, the value is undefined, as is typical in JS. But whatever the value, it will always be passed to all registered (and appropriate: fulfillment or rejection) callbacks, either now or in the future.\n\nSomething to be aware of: If you call `resolve(..)` or `reject(..)` with multiple parameters, all subsequent parameters beyond the first will be silently ignored. Although that might seem a violation of the guarantee we just described, it's not exactly, because it constitutes an invalid usage of the Promise mechanism. Other invalid usages of the API (such as calling `resolve(..)` multiple times) are similarly protected, so the Promise behavior here is consistent (if not a tiny bit frustrating).\n\nIf you want to pass along multiple values, you must wrap them in another single value that you pass, such as an array or an object.\n\nAs for environment, functions in JS always retain their closure of the scope in which they're defined (see the Scope & Closures title of this series), so they of course would continue to have access to whatever surrounding state you provide. Of course, the same is true of callbacks-only design, so this isn't a specific augmentation of benefit from Promises -- but it's a guarantee we can rely on nonetheless.\n\n#### Swallowing Any Errors/Exceptions\n\nIn the base sense, this is a restatement of the previous point. If you reject a Promise with a reason (aka error message), that value is passed to the rejection callback(s).\n\nBut there's something much bigger at play here. If at any point in the creation of a Promise, or in the observation of its resolution, a JS exception error occurs, such as a TypeError or ReferenceError, that exception will be caught, and it will force the Promise in question to become rejected.\n\nFor example:\n\n```javascript\nvar p = new Promise( function(resolve,reject){\n  foo.bar();  // `foo` is not defined, so error!\n  resolve( 42 );  // never gets here :(\n} );\n\np.then(\n  function fulfilled(){\n    // never gets here :(\n  },\n  function rejected(err){\n    // `err` will be a `TypeError` exception object\n    // from the `foo.bar()` line.\n  }\n);\n```\n\nThe JS exception that occurs from `foo.bar()` becomes a Promise rejection that you can catch and respond to.\n\nThis is an important detail, because it effectively solves another potential Zalgo moment, which is that errors could create a synchronous reaction whereas nonerrors would be asynchronous. Promises turn even JS exceptions into asynchronous behavior, thereby reducing the race condition chances greatly.\n\nBut what happens if a Promise is fulfilled, but there's a JS exception error during the observation (in a `then(..)` registered callback)? Even those aren't lost, but you may find how they're handled a bit surprising, until you dig in a little deeper:\n\n```javascript\nvar p = new Promise( function(resolve,reject){\n  resolve( 42 );\n} );\n\np.then(\n  function fulfilled(msg){\n    foo.bar();\n    console.log( msg ); // never gets here :(\n  },\n  function rejected(err){\n    // never gets here either :(\n  }\n);\n```\n\nWait, that makes it seem like the exception from `foo.bar()` really did get swallowed. Never fear, it didn't. But something deeper is wrong, which is that we've failed to listen for it. The `p.then(..)` call itself returns another promise, and it's that promise that will be rejected with the TypeError exception.\n\nWhy couldn't it just call the error handler we have defined there? Seems like a logical behavior on the surface. **But it would violate the fundamental principle that Promises are immutable once resolved. p was already fulfilled to the value 42, so it can't later be changed to a rejection just because there's an error in observing p's resolution.**\n\nBesides the principle violation, such behavior could wreak havoc, if say there were multiple `then(..)` registered callbacks on the promise p, because some would get called and others wouldn't, and it would be very opaque as to why.\n\n#### Trustable Promise?\n\nThere's one last detail to examine to establish trust based on the Promise pattern.\n\nYou've no doubt noticed that Promises don't get rid of callbacks at all. They just change where the callback is passed to. Instead of passing a callback to `foo(..)`, we get something (ostensibly a genuine Promise) back from `foo(..)`, and we pass the callback to that something instead.\n\nBut why would this be any more trustable than just callbacks alone? How can we be sure the something we get back is in fact a trustable Promise? Isn't it basically all just a house of cards where we can trust only because we already trusted?\n\nOne of the most important, but often overlooked, details of Promises is that they have a solution to this issue as well. Included with the native ES6 Promise implementation is `Promise.resolve(..)`.\n\nIf you pass an immediate, non-Promise, non-thenable value to `Promise.resolve(..)`, you get a promise that's fulfilled with that value. In other words, these two promises p1 and p2 will behave basically identically:\n\n```javascript\nvar p1 = new Promise( function(resolve,reject){\n  resolve( 42 );\n} );\n\nvar p2 = Promise.resolve( 42 );\n```\n\nBut if you pass a genuine Promise to `Promise.resolve(..)`, you just get the same promise back:\n\n```javascript\nvar p1 = Promise.resolve( 42 );\n\nvar p2 = Promise.resolve( p1 );\n\np1 === p2; // true\n```\n\nEven more importantly, if you pass a non-Promise thenable value to `Promise.resolve(..)`, it will attempt to unwrap that value, and the unwrapping will keep going until a concrete final non-Promise-like value is extracted.\n\nRecall our previous discussion of thenables?\n\nConsider:\n\n```javascript\nvar p = {\n  then: function(cb) {\n    cb( 42 );\n  }\n};\n\n// this works OK, but only by good fortune\np\n.then(\n  function fulfilled(val){\n    console.log( val ); // 42\n  },\n  function rejected(err){\n    // never gets here\n  }\n);\n```\n\nThis p is a thenable, but it's not a genuine Promise. Luckily, it's reasonable, as most will be. But what if you got back instead something that looked like:\n\n```javascript\nvar p = {\n  then: function(cb,errcb) {\n    cb( 42 );\n    errcb( \"evil laugh\" );\n  }\n};\n\np\n.then(\n  function fulfilled(val){\n    console.log( val ); // 42\n  },\n  function rejected(err){\n    // oops, shouldn't have run\n    console.log( err ); // evil laugh\n  }\n);\n```\n\nThis p is a thenable but it's not so well behaved of a promise. Is it malicious? Or is it just ignorant of how Promises should work? It doesn't really matter, to be honest. In either case, it's not trustable as is.\n\nNonetheless, we can pass either of these versions of p to `Promise.resolve(..)`, and we'll get the normalized, safe result we'd expect:\n\n```javascript\nPromise.resolve( p )\n.then(\n  function fulfilled(val){\n    console.log( val ); // 42\n  },\n  function rejected(err){\n    // never gets here\n  }\n);\n```\n\n`Promise.resolve(..)` will accept any thenable, and will unwrap it to its non-thenable value. But you get back from `Promise.resolve(..)` a real, genuine Promise in its place, one that you can trust. If what you passed in is already a genuine Promise, you just get it right back, so there's no downside at all to filtering through `Promise.resolve(..)` to gain trust.\n\nSo let's say we're calling a `foo(..)` utility and we're not sure we can trust its return value to be a well-behaving Promise, but we know it's at least a thenable. `Promise.resolve(..)` will give us a trustable Promise wrapper to chain off of:\n\n```javascript\n// don't just do this:\nfoo( 42 )\n.then( function(v){\n  console.log( v );\n} );\n\n// instead, do this:\nPromise.resolve( foo( 42 ) )\n.then( function(v){\n  console.log( v );\n} );\n```\n\nNote: Another beneficial side effect of wrapping `Promise.resolve(..)` around any function's return value (thenable or not) is that it's an easy way to normalize that function call into a well-behaving async task. If `foo(42)` returns an immediate value sometimes, or a Promise other times, `Promise.resolve( foo(42) )` makes sure it's always a Promise result. And avoiding Zalgo makes for much better code.\n\n### Chain Flow\n\nWe've hinted at this a couple of times already, but Promises are not just a mechanism for a single-step this-then-that sort of operation. That's the building block, of course, but it turns out we can string multiple Promises together to represent a sequence of async steps.\n\nThe key to making this work is built on two behaviors intrinsic to Promises:\n\n- Every time you call `then(..)` on a Promise, it creates and returns a new Promise, which we can chain with.\n- Whatever value you return from the `then(..)` call's fulfillment callback (the first parameter) is automatically set as the fulfillment of the chained Promise (from the first point).\n\nLet's first illustrate what that means, and then we'll derive how that helps us create async sequences of flow control. Consider the following:\n\n```javascript\nvar p = Promise.resolve( 21 );\n\nvar p2 = p.then( function(v){\n  console.log( v ); // 21\n\n  // fulfill `p2` with value `42`\n  return v * 2;\n} );\n\n// chain off `p2`\np2.then( function(v){\n  console.log( v ); // 42\n} );\n```\n\nBy returning `v * 2 (i.e., 42)`, we fulfill the p2 promise that the first `then(..)` call created and returned. When p2's `then(..)` call runs, it's receiving the fulfillment from the return `v * 2` statement. Of course, p2.`then(..)` creates yet another promise, which we could have stored in a p3 variable.\n\nBut it's a little annoying to have to create an intermediate variable p2 (or p3, etc.). Thankfully, we can easily just chain these together:\n\n```javascript\nvar p = Promise.resolve( 21 );\n\np\n.then( function(v){\n  console.log( v ); // 21\n\n  // fulfill the chained promise with value `42`\n  return v * 2;\n} )\n// here's the chained promise\n.then( function(v){\n  console.log( v ); // 42\n} );\n```\n\nSo now the first `then(..)` is the first step in an async sequence, and the second `then(..)` is the second step. This could keep going for as long as you needed it to extend. Just keep chaining off a previous `then(..)` with each automatically created Promise.\n\nBut there's something missing here. What if we want step 2 to wait for step 1 to do something asynchronous? We're using an immediate return statement, which immediately fulfills the chained promise.\n\nThe key to making a Promise sequence truly async capable at every step is to recall how `Promise.resolve(..)` operates when what you pass to it is a Promise or thenable instead of a final value. `Promise.resolve(..)` directly returns a received genuine Promise, or it unwraps the value of a received thenable -- and keeps going recursively while it keeps unwrapping thenables.\n\nThe same sort of unwrapping happens if you return a thenable or Promise from the fulfillment (or rejection) handler. Consider:\n\n```javascript\nvar p = Promise.resolve( 21 );\n\np.then( function(v){\n  console.log( v ); // 21\n\n  // create a promise and return it\n  return new Promise( function(resolve,reject){\n    // fulfill with value `42`\n    resolve( v * 2 );\n  } );\n} )\n.then( function(v){\n  console.log( v ); // 42\n} );\n```\n\nEven though we wrapped 42 up in a promise that we returned, it still got unwrapped and ended up as the resolution of the chained promise, such that the second `then(..)` still received 42. If we introduce asynchrony to that wrapping promise, everything still nicely works the same:\n\n```javascript\nvar p = Promise.resolve( 21 );\n\np.then( function(v){\n  console.log( v ); // 21\n\n  // create a promise to return\n  return new Promise( function(resolve,reject){\n    // introduce asynchrony!\n    setTimeout( function(){\n      // fulfill with value `42`\n      resolve( v * 2 );\n    }, 100 );\n  } );\n} )\n.then( function(v){\n  // runs after the 100ms delay in the previous step\n  console.log( v ); // 42\n} );\n```\n\nThat's incredibly powerful! Now we can construct a sequence of however many async steps we want, and each step can delay the next step (or not!), as necessary.\n\nOf course, the value passing from step to step in these examples is optional. If you don't return an explicit value, an implicit undefined is assumed, and the promises still chain together the same way. **Each Promise resolution is thus just a signal to proceed to the next step.**\n\nTo further the chain illustration, let's generalize a delay-Promise creation (without resolution messages) into a utility we can reuse for multiple steps:\n\n```javascript\nfunction delay(time) {\n  return new Promise( function(resolve,reject){\n    setTimeout( resolve, time );\n  } );\n}\n\ndelay( 100 ) // step 1\n.then( function STEP2(){\n  console.log( \"step 2 (after 100ms)\" );\n  return delay( 200 );\n} )\n.then( function STEP3(){\n  console.log( \"step 3 (after another 200ms)\" );\n} )\n.then( function STEP4(){\n  console.log( \"step 4 (next Job)\" );\n  return delay( 50 );\n} )\n.then( function STEP5(){\n  console.log( \"step 5 (after another 50ms)\" );\n} )\n```\n\n...\nCalling delay(200) creates a promise that will fulfill in 200ms, and then we return that from the first then(..) fulfillment callback, which causes the second then(..)'s promise to wait on that 200ms promise.\n\nNote: As described, technically there are two promises in that interchange: the 200ms-delay promise and the chained promise that the second `then(..)` chains from. But you may find it easier to mentally combine these two promises together, because the Promise mechanism automatically merges their states for you. In that respect, you could think of return delay(200) as creating a promise that replaces the earlier-returned chained promise.\n\nTo be honest, though, sequences of delays with no message passing isn't a terribly useful example of Promise flow control. Let's look at a scenario that's a little more practical.\n\nInstead of timers, let's consider making Ajax requests:\n\n```javascript\n// assume an `ajax( {url}, {callback} )` utility\n\n// Promise-aware ajax\nfunction request(url) {\n  return new Promise( function(resolve,reject){\n  // the `ajax(..)` callback should be our\n  // promise's `resolve(..)` function\n    ajax( url, resolve );\n  } );\n}\n```\n\nWe first define a `request(..)` utility that constructs a promise to represent the completion of the `ajax(..)` call:\n\n```javascript\nrequest( \"http://some.url.1/\" )\n.then( function(response1){\n  return request( \"http://some.url.2/?v=\" + response1 );\n} )\n.then( function(response2){\n  console.log( response2 );\n} );\n```\n\nNote: Developers commonly encounter situations in which they want to do Promise-aware async flow control with utilities that are not themselves Promise-enabled (like `ajax(..)` here, which expects a callback). Although the native ES6 Promise mechanism doesn't automatically solve this pattern for us, practically all Promise libraries do. They usually call this process \"lifting\" or \"promisifying\" or some variation thereof. We'll come back to this technique later.\n\nUsing the Promise-returning `request(..)`, we create the first step in our chain implicitly by calling it with the first URL, and chain off that returned promise with the first `then(..)`.\n\nOnce response1 comes back, we use that value to construct a second URL, and make a second request(..) call. That second `request(..)` promise is returned so that the third step in our async flow control waits for that Ajax call to complete. Finally, we print response2 once it returns.\n\nThe Promise chain we construct is not only a flow control that expresses a multistep async sequence, but it also acts as a message channel to propagate messages from step to step.\n\nWhat if something went wrong in one of the steps of the Promise chain? An error/exception is on a per-Promise basis, which means it's possible to catch such an error at any point in the chain, and that catching acts to sort of \"reset\" the chain back to normal operation at that point:\n\n```javascript\n// step 1:\nrequest( \"http://some.url.1/\" )\n\n// step 2:\n.then( function(response1){\n foo.bar(); // undefined, error!\n\n // never gets here\n return request( \"http://some.url.2/?v=\" + response1 );\n} )\n\n// step 3:\n.then(\n function fulfilled(response2){\n  // never gets here\n  },\n  // rejection handler to catch the error\n  function rejected(err){\n    console.log( err ); // `TypeError` from `foo.bar()` error\n    return 42;\n  }\n)\n\n// step 4:\n.then( function(msg){\n  console.log( msg );   // 42\n} );\n```\n\nWhen the error occurs in step 2, the rejection handler in step 3 catches it. The return value (42 in this snippet), if any, from that rejection handler fulfills the promise for the next step (4), such that the chain is now back in a fulfillment state.\n\nNote: As we discussed earlier, when returning a promise from a fulfillment handler, it's unwrapped and can delay the next step. That's also true for returning promises from rejection handlers, such that if the `return 42` in step 3 instead returned a promise, that promise could delay step 4. A thrown exception inside either the fulfillment or rejection handler of a `then(..)` call causes the next (chained) promise to be immediately rejected with that exception.\n\nIf you call `then(..)` on a promise, and you only pass a fulfillment handler to it, an assumed rejection handler is substituted:\n\n```javascript\nvar p = new Promise( function(resolve,reject){\n  reject( \"Oops\" );\n} );\n\nvar p2 = p.then(\n  function fulfilled(){\n    // never gets here\n  }\n  // assumed rejection handler, if omitted or\n  // any other non-function value passed\n  // function(err) {\n  //     throw err;\n  // }\n);\n```\n\nAs you can see, the assumed rejection handler simply rethrows the error, which ends up forcing p2 (the chained promise) to reject with the same error reason. In essence, this allows the error to continue propagating along a Promise chain until an explicitly defined rejection handler is encountered.\n\nNote: We'll cover more details of error handling with Promises a little later, because there are other nuanced details to be concerned about.\n\nIf a proper valid function is not passed as the fulfillment handler parameter to `then(..)`, there's also a default handler substituted:\n\n```javascript\nvar p = Promise.resolve( 42 );\n\np.then(\n  // assumed fulfillment handler, if omitted or\n  // any other non-function value passed\n  // function(v) {\n  //     return v;\n  // }\n  null,\n  function rejected(err){\n    // never gets here\n  }\n);\n```\n\nAs you can see, the default fulfillment handler simply passes whatever value it receives along to the next step (Promise).\n\nNote: The `then(null,function(err){ .. })` pattern -- only handling rejections (if any) but letting fulfillments pass through -- has a shortcut in the API: `catch(function(err){ .. })`. We'll cover `catch(..)` more fully in the next section.\n\nLet's review briefly the intrinsic behaviors of Promises that enable chaining flow control:\n\nA `then(..)` call against one Promise automatically produces a new Promise to return from the call.\nInside the fulfillment/rejection handlers, if you return a value or an exception is thrown, the new returned (chainable) Promise is resolved accordingly.\nIf the fulfillment or rejection handler returns a Promise, it is unwrapped, so that whatever its resolution is will become the resolution of the chained Promise returned from the current `then(..)`.\nWhile chaining flow control is helpful, it's probably most accurate to think of it as a side benefit of how Promises compose (combine) together, rather than the main intent. As we've discussed in detail several times already, Promises normalize asynchrony and encapsulate time-dependent value state, and that is what lets us chain them together in this useful way.\n\nCertainly, the sequential expressiveness of the chain (this-then-this-then-this...) is a big improvement over the tangled mess of callbacks as we identified in Chapter 2. But there's still a fair amount of boilerplate `(then(..) and function(){ .. })` to wade through. In the next chapter, we'll see a significantly nicer pattern for sequential flow control expressivity, with generators.\n\n### Error Handling\n\nWe've already seen several examples of how Promise rejection -- either intentional through calling `reject(..)` or accidental through JS exceptions -- allows saner error handling in asynchronous programming. Let's circle back though and be explicit about some of the details that we glossed over.\n\nThe most natural form of error handling for most developers is the synchronous `try..catch` construct. Unfortunately, it's synchronous-only, so it fails to help in async code patterns:\n\n```javascript\nfunction foo() {\n  setTimeout( function(){\n    baz.bar();\n  }, 100 );\n}\n\ntry {\n  foo();\n  // later throws global error from `baz.bar()`\n}\ncatch (err) {\n  // never gets here\n}\n```\n\n`try..catch` would certainly be nice to have, but it doesn't work across async operations. That is, unless there's some additional environmental support, which we'll come back to with generators in Chapter 4.\n\nIn callbacks, some standards have emerged for patterned error handling, most notably the \"error-first callback\" style:\n\n```javascript\nfunction foo(cb) {\n  setTimeout( function(){\n    try {\n      var x = baz.bar();\n      cb( null, x ); // success!\n    }\n    catch (err) {\n      cb( err );\n    }\n  }, 100 );\n}\n\nfoo( function(err,val){\n  if (err) {\n    console.error( err ); // bummer :(\n  }\n  else {\n    console.log( val );\n  }\n} );\n```\n\nNote: The `try..catch` here works only from the perspective that the `baz.bar()` call will either succeed or fail immediately, synchronously. If `baz.bar()` was itself its own async completing function, any async errors inside it would not be catchable.\n\nThe callback we pass to `foo(..)` expects to receive a signal of an error by the reserved first parameter err. If present, error is assumed. If not, success is assumed.\n\nThis sort of error handling is technically async capable, but it doesn't compose well at all. Multiple levels of error-first callbacks woven together with these ubiquitous if statement checks inevitably will lead you to the perils of callback hell (see Chapter 2).\n\nSo we come back to error handling in Promises, with the rejection handler passed to `then(..)`. Promises don't use the popular \"error-first callback\" design style, but instead use \"split callbacks\" style; there's one callback for fulfillment and one for rejection:\n\n```javascript\nvar p = Promise.reject( \"Oops\" );\n\np.then(\n  function fulfilled(){\n    // never gets here\n  },\n  function rejected(err){\n    console.log( err ); // \"Oops\"\n  }\n);\n```\n\nWhile this pattern of error handling makes fine sense on the surface, the nuances of Promise error handling are often a fair bit more difficult to fully grasp.\n\nConsider:\n\n```javascript\nvar p = Promise.resolve( 42 );\n\np.then(\n  function fulfilled(msg){\n    // numbers don't have string functions,\n    // so will throw an error\n    console.log( msg.toLowerCase() );\n  },\n  function rejected(err){\n    // never gets here\n  }\n);\n```\n\nIf the `msg.toLowerCase()` legitimately throws an error (it does!), why doesn't our error handler get notified? As we explained earlier, it's because that error handler is for the p promise, which has already been fulfilled with value 42. The p promise is immutable, so the only promise that can be notified of the error is the one returned from `p.then(..)`, which in this case we don't capture.\n\nThat should paint a clear picture of why error handling with Promises is error-prone (pun intended). It's far too easy to have errors swallowed, as this is very rarely what you'd intend.\n\nWarning: If you use the Promise API in an invalid way and an error occurs that prevents proper Promise construction, the result will be an immediately thrown exception, not a rejected Promise. Some examples of incorrect usage that fail Promise construction: `new Promise(null)`, `Promise.all()`, `Promise.race(42)`, and so on. You can't get a rejected Promise if you don't use the Promise API validly enough to actually construct a Promise in the first place!\n\n#### Pit of Despair\n\nJeff Atwood noted years ago: programming languages are often set up in such a way that by default, developers fall into the [pit of despair](http://blog.codinghorror.com/falling-into-the-pit-of-success/) -- where accidents are punished -- and that you have to try harder to get it right. He implored us to instead create a \"pit of success,\" where by default you fall into expected (successful) action, and thus would have to try hard to fail.\n\nPromise error handling is unquestionably \"pit of despair\" design. By default, it assumes that you want any error to be swallowed by the Promise state, and if you forget to observe that state, the error silently languishes/dies in obscurity -- usually despair.\n\nTo avoid losing an error to the silence of a forgotten/discarded Promise, some developers have claimed that a \"best practice\" for Promise chains is to always end your chain with a final catch(..), like:\n\n```javascript\nvar p = Promise.resolve( 42 );\n\np.then(\n  function fulfilled(msg){\n    // numbers don't have string functions,\n    // so will throw an error\n    console.log( msg.toLowerCase() );\n  }\n)\n.catch( handleErrors );\n```\n\nBecause we didn't pass a rejection handler to the then(..), the default handler was substituted, which simply propagates the error to the next promise in the chain. As such, both errors that come into p, and errors that come after p in its resolution (like the msg.toLowerCase() one) will filter down to the final handleErrors(..).\n\nProblem solved, right? Not so fast!\n\nWhat happens if `handleErrors(..)` itself also has an error in it? Who catches that? There's still yet another unattended promise: the one `catch(..)` returns, which we don't capture and don't register a rejection handler for.\n\nYou can't just stick another catch(..) on the end of that chain, because it too could fail. The last step in any Promise chain, whatever it is, always has the possibility, even decreasingly so, of dangling with an uncaught error stuck inside an unobserved Promise.\n\nSound like an impossible conundrum yet?\n\n#### Uncaught Handling\n\nIt's not exactly an easy problem to solve completely. There are other ways to approach it which many would say are better.\n\nSome Promise libraries have added methods for registering something like a \"global unhandled rejection\" handler, which would be called instead of a globally thrown error. But their solution for how to identify an error as \"uncaught\" is to have an arbitrary-length timer, say 3 seconds, running from time of rejection. If a Promise is rejected but no error handler is registered before the timer fires, then it's assumed that you won't ever be registering a handler, so it's \"uncaught.\"\n\nIn practice, this has worked well for many libraries, as most usage patterns don't typically call for significant delay between Promise rejection and observation of that rejection. But this pattern is troublesome because 3 seconds is so arbitrary (even if empirical), and also because there are indeed some cases where you want a Promise to hold on to its rejectedness for some indefinite period of time, and you don't really want to have your \"uncaught\" handler called for all those false positives (not-yet-handled \"uncaught errors\").\n\nAnother more common suggestion is that Promises should have a `done(..)` added to them, which essentially marks the Promise chain as \"done.\" `done(..)` doesn't create and return a Promise, so the callbacks passed to `done(..)` are obviously not wired up to report problems to a chained Promise that doesn't exist.\n\nSo what happens instead? It's treated as you might usually expect in uncaught error conditions: any exception inside a `done(..)` rejection handler would be thrown as a global uncaught error (in the developer console, basically):\n\n```javascript\nvar p = Promise.resolve( 42 );\n\np.then(\n  function fulfilled(msg){\n    // numbers don't have string functions,\n    // so will throw an error\n    console.log( msg.toLowerCase() );\n  }\n)\n.done( null, handleErrors );\n\n// if `handleErrors(..)` caused its own exception, it would\n// be thrown globally here\n```\n\nThis might sound more attractive than the never-ending chain or the arbitrary timeouts. But the biggest problem is that it's not part of the ES6 standard, so no matter how good it sounds, at best it's a lot longer way off from being a reliable and ubiquitous solution.\n\nAre we just stuck, then? Not entirely.\n\nBrowsers have a unique capability that our code does not have: they can track and know for sure when any object gets thrown away and garbage collected. So, browsers can track Promise objects, and whenever they get garbage collected, if they have a rejection in them, the browser knows for sure this was a legitimate \"uncaught error,\" and can thus confidently know it should report it to the developer console.\n\nNote: At the time of this writing, both Chrome and Firefox have early attempts at that sort of \"uncaught rejection\" capability, though support is incomplete at best.\n\nHowever, if a Promise doesn't get garbage collected -- it's exceedingly easy for that to accidentally happen through lots of different coding patterns -- the browser's garbage collection sniffing won't help you know and diagnose that you have a silently rejected Promise laying around.\n\nIs there any other alternative? Yes.\n\n#### Pit of Success\n\nThe following is just theoretical, how Promises could be someday changed to behave. I believe it would be far superior to what we currently have. And I think this change would be possible even post-ES6 because I don't think it would break web compatibility with ES6 Promises. Moreover, it can be polyfilled/prollyfilled in, if you're careful. Let's take a look:\n\nPromises could default to reporting (to the developer console) any rejection, on the next Job or event loop tick, if at that exact moment no error handler has been registered for the Promise.\nFor the cases where you want a rejected Promise to hold onto its rejected state for an indefinite amount of time before observing, you could call `defer()`, which suppresses automatic error reporting on that Promise.\nIf a Promise is rejected, it defaults to noisily reporting that fact to the developer console (instead of defaulting to silence). You can opt out of that reporting either implicitly (by registering an error handler before rejection), or explicitly (with `defer()`). In either case, you control the false positives.\n\nConsider:\n\n```javascript\nvar p = Promise.reject( \"Oops\" ).defer();\n\n// `foo(..)` is Promise-aware\nfoo( 42 )\n.then(\n  function fulfilled(){\n    return p;\n  },\n  function rejected(err){\n    // handle `foo(..)` error\n  }\n);\n```\n\nWhen we create p, we know we're going to wait a while to use/observe its rejection, so we call `defer()` -- thus no global reporting. `defer()` simply returns the same promise, for chaining purposes.\n\nThe promise returned from `foo(..)` gets an error handler attached right away, so it's implicitly opted out and no global reporting for it occurs either.\n\nBut the promise returned from the `then(..)` call has no `defer()` or error handler attached, so if it rejects (from inside either resolution handler), then it will be reported to the developer console as an uncaught error.\n\nThis design is a pit of success. By default, all errors are either handled or reported -- what almost all developers in almost all cases would expect. You either have to register a handler or you have to intentionally opt out, and indicate you intend to defer error handling until later; you're opting for the extra responsibility in just that specific case.\n\nThe only real danger in this approach is if you `defer()` a Promise but then fail to actually ever observe/handle its rejection.\n\nBut you had to intentionally call `defer()` to opt into that pit of despair -- the default was the pit of success -- so there's not much else we could do to save you from your own mistakes.\n\nI think there's still hope for Promise error handling (post-ES6). I hope the powers that be will rethink the situation and consider this alternative. In the meantime, you can implement this yourself (a challenging exercise for the reader!), or use a smarter Promise library that does so for you!\n\nNote: This exact model for error handling/reporting is implemented in my asynquence Promise abstraction library, which will be discussed in Appendix A of this book.\n\n### Promise Patterns\n\nWe've already implicitly seen the sequence pattern with Promise chains (this-then-this-then-that flow control) but there are lots of variations on asynchronous patterns that we can build as abstractions on top of Promises. These patterns serve to simplify the expression of async flow control -- which helps make our code more reason-able and more maintainable -- even in the most complex parts of our programs.\n\nTwo such patterns are codified directly into the native ES6 Promise implementation, so we get them for free, to use as building blocks for other patterns.\n\n#### Promise.all([ .. ])\n\nIn an async sequence (Promise chain), only one async task is being coordinated at any given moment -- step 2 strictly follows step 1, and step 3 strictly follows step 2. But what about doing two or more steps concurrently (aka \"in parallel\")?\n\nIn classic programming terminology, a \"gate\" is a mechanism that waits on two or more parallel/concurrent tasks to complete before continuing. It doesn't matter what order they finish in, just that all of them have to complete for the gate to open and let the flow control through.\n\nIn the Promise API, we call this pattern all([ .. ]).\n\nSay you wanted to make two Ajax requests at the same time, and wait for both to finish, regardless of their order, before making a third Ajax request. Consider:\n\n```javascript\n// `request(..)` is a Promise-aware Ajax utility,\n// like we defined earlier in the chapter\n\nvar p1 = request( \"http://some.url.1/\" );\nvar p2 = request( \"http://some.url.2/\" );\n\nPromise.all( [p1,p2] )\n.then( function(msgs){\n  // both `p1` and `p2` fulfill and pass in\n  // their messages here\n  return request(\n    \"http://some.url.3/?v=\" + msgs.join(\",\")\n  );\n} )\n.then( function(msg){\n  console.log( msg );\n} );\n```\n\n`Promise.all([ .. ])` expects a single argument, an array, consisting generally of Promise instances. The promise returned from the `Promise.all([ .. ])` call will receive a fulfillment message (msgs in this snippet) that is an array of all the fulfillment messages from the passed in promises, in the same order as specified (regardless of fulfillment order).\n\nNote: Technically, the array of values passed into `Promise.all([ .. ])` can include Promises, thenables, or even immediate values. Each value in the list is essentially passed through `Promise.resolve(..)` to make sure it's a genuine Promise to be waited on, so an immediate value will just be normalized into a Promise for that value. If the array is empty, the main Promise is immediately fulfilled.\n\nThe main promise returned from `Promise.all([ .. ])` will only be fulfilled if and when all its constituent promises are fulfilled. If any one of those promises instead is rejected, the main `Promise.all([ .. ])` promise is immediately rejected, discarding all results from any other promises.\n\nRemember to always attach a rejection/error handler to every promise, even and especially the one that comes back from `Promise.all([ .. ])`.\n\n#### Promise.race([ .. ])\n\nWhile `Promise.all([ .. ])` coordinates multiple Promises concurrently and assumes all are needed for fulfillment, sometimes you only want to respond to the \"first Promise to cross the finish line,\" letting the other Promises fall away.\n\nThis pattern is classically called a \"latch,\" but in Promises it's called a \"race.\"\n\nWarning: While the metaphor of \"only the first across the finish line wins\" fits the behavior well, unfortunately \"race\" is kind of a loaded term, because \"race conditions\" are generally taken as bugs in programs (see Chapter 1). Don't confuse `Promise.race([ .. ])` with \"race condition\".\n\n`Promise.race([ .. ])` also expects a single array argument, containing one or more Promises, thenables, or immediate values. It doesn't make much practical sense to have a race with immediate values, because the first one listed will obviously win -- like a foot race where one runner starts at the finish line!\n\nSimilar to `Promise.all([ .. ])`, `Promise.race([ .. ])` will fulfill if and when any Promise resolution is a fulfillment, and it will reject if and when any Promise resolution is a rejection.\n\nWarning: A \"race\" requires at least one \"runner,\" so if you pass an empty array, instead of immediately resolving, the main race([..]) Promise will never resolve. This is a footgun! ES6 should have specified that it either fulfills, rejects, or just throws some sort of synchronous error. Unfortunately, because of precedence in Promise libraries predating ES6 Promise, they had to leave this gotcha in there, so be careful never to send in an empty array.\n\nLet's revisit our previous concurrent Ajax example, but in the context of a race between p1 and p2:\n\n```javascript\n// `request(..)` is a Promise-aware Ajax utility,\n// like we defined earlier in the chapter\n\nvar p1 = request( \"http://some.url.1/\" );\nvar p2 = request( \"http://some.url.2/\" );\n\nPromise.race( [p1,p2] )\n.then( function(msg){\n  // either `p1` or `p2` will win the race\n  return request(\n    \"http://some.url.3/?v=\" + msg\n  );\n} )\n.then( function(msg){\n  console.log( msg );\n} );\n```\n\nBecause only one promise wins, the fulfillment value is a single message, not an array as it was for `Promise.all([ .. ])`.\n\n##### Timeout Race\n\nWe saw this example earlier, illustrating how `Promise.race([ .. ])` can be used to express the \"promise timeout\" pattern:\n\n```javascript\n// `foo()` is a Promise-aware function\n\n// `timeoutPromise(..)`, defined ealier, returns\n// a Promise that rejects after a specified delay\n\n// setup a timeout for `foo()`\nPromise.race( [\n  foo(),      // attempt `foo()`\n  timeoutPromise( 3000 )  // give it 3 seconds\n] )\n.then(\n  function(){\n    // `foo(..)` fulfilled in time!\n  },\n  function(err){\n    // either `foo()` rejected, or it just\n    // didn't finish in time, so inspect\n    // `err` to know which\n  }\n);\n```\n\nThis timeout pattern works well in most cases. But there are some nuances to consider, and frankly they apply to both `Promise.race([ .. ])` and `Promise.all([ .. ])` equally.\n\n##### \"Finally\"\n\nThe key question to ask is, \"What happens to the promises that get discarded/ignored?\" We're not asking that question from the performance perspective -- they would typically end up garbage collection eligible -- but from the behavioral perspective (side effects, etc.). Promises cannot be canceled -- and shouldn't be as that would destroy the external immutability trust discussed in the \"Promise Uncancelable\" section later in this chapter -- so they can only be silently ignored.\n\nBut what if `foo()` in the previous example is reserving some sort of resource for usage, but the timeout fires first and causes that promise to be ignored? Is there anything in this pattern that proactively frees the reserved resource after the timeout, or otherwise cancels any side effects it may have had? What if all you wanted was to log the fact that foo() timed out?\n\nSome developers have proposed that Promises need a `finally(..)` callback registration, which is always called when a Promise resolves, and allows you to specify any cleanup that may be necessary. This doesn't exist in the specification at the moment, but it may come in ES7+. We'll have to wait and see.\n\nIt might look like:\n\n```javascript\nvar p = Promise.resolve( 42 );\n\np.then( something )\n.finally( cleanup )\n.then( another )\n.finally( cleanup );\n```\n\nNote: In various Promise libraries, `finally(..)` still creates and returns a new Promise (to keep the chain going). If the `cleanup(..)` function were to return a Promise, it would be linked into the chain, which means you could still have the unhandled rejection issues we discussed earlier.\n\nIn the meantime, we could make a static helper utility that lets us observe (without interfering) the resolution of a Promise:\n\n```javascript\n// polyfill-safe guard check\nif (!Promise.observe) {\n  Promise.observe = function(pr,cb) {\n    // side-observe `pr`'s resolution\n    pr.then(\n      function fulfilled(msg){\n        // schedule callback async (as Job)\n        Promise.resolve( msg ).then( cb );\n      },\n      function rejected(err){\n        // schedule callback async (as Job)\n        Promise.resolve( err ).then( cb );\n      }\n    );\n\n    // return original promise\n    return pr;\n  };\n}\n```\n\nHere's how we'd use it in the timeout example from before:\n\n```javascript\nPromise.race( [\n  Promise.observe(\n    foo(),        // attempt `foo()`\n    function cleanup(msg){\n      // clean up after `foo()`, even if it\n      // didn't finish before the timeout\n    }\n  ),\n  timeoutPromise( 3000 )  // give it 3 seconds\n] )\n```\n\nThis `Promise.observe(..)` helper is just an illustration of how you could observe the completions of Promises without interfering with them. Other Promise libraries have their own solutions. Regardless of how you do it, you'll likely have places where you want to make sure your Promises aren't just silently ignored by accident.\n\n#### Variations on all([ .. ]) and race([ .. ])\n\nWhile native ES6 Promises come with built-in `Promise.all([ .. ])` and `Promise.race([ .. ])`, there are several other commonly used patterns with variations on those semantics:\n\n- `none([ .. ])` is like `all([ .. ])`, but fulfillments and rejections are transposed. All Promises need to be rejected -- rejections become the fulfillment values and vice versa.\n- `any([ .. ])` is like `all([ .. ])`, but it ignores any rejections, so only one needs to fulfill instead of all of them.\n- `first([ .. ])` is like a race with `any([ .. ])`, which is that it ignores any rejections and fulfills as soon as the first Promise fulfills.\n- `last([ .. ])` is like `first([ .. ])`, but only the latest fulfillment wins.\n\nSome Promise abstraction libraries provide these, but you could also define them yourself using the mechanics of Promises, `race([ .. ])` and `all([ .. ])`.\n\nFor example, here's how we could define `first([ .. ])`:\n\n```javascript\n// polyfill-safe guard check\nif (!Promise.first) {\n  Promise.first = function(prs) {\n    return new Promise( function(resolve,reject){\n      // loop through all promises\n      prs.forEach( function(pr){\n        // normalize the value\n        Promise.resolve( pr )\n        // whichever one fulfills first wins, and\n        // gets to resolve the main promise\n        .then( resolve );\n      } );\n    } );\n  };\n}\n```\n\nNote: This implementation of `first(..)` does not reject if all its promises reject; it simply hangs, much like a `Promise.race([])` does. If desired, you could add additional logic to track each promise rejection and if all reject, call `reject()` on the main promise. We'll leave that as an exercise for the reader.\n\n#### Concurrent Iterations\n\nSometimes you want to iterate over a list of Promises and perform some task against all of them, much like you can do with synchronous arrays (e.g., `forEach(..)`, `map(..)`, `some(..)`, and `every(..)`). If the task to perform against each Promise is fundamentally synchronous, these work fine, just as we used `forEach(..)` in the previous snippet.\n\nBut if the tasks are fundamentally asynchronous, or can/should otherwise be performed concurrently, you can use async versions of these utilities as provided by many libraries.\n\nFor example, let's consider an asynchronous `map(..)` utility that takes an array of values (could be Promises or anything else), plus a function (task) to perform against each. `map(..)` itself returns a promise whose fulfillment value is an array that holds (in the same mapping order) the async fulfillment value from each task:\n\n```javascript\nif (!Promise.map) {\n  Promise.map = function(vals,cb) {\n    // new promise that waits for all mapped promises\n    return Promise.all(\n      // note: regular array `map(..)`, turns\n      // the array of values into an array of\n      // promises\n      vals.map( function(val){\n        // replace `val` with a new promise that\n        // resolves after `val` is async mapped\n        return new Promise( function(resolve){\n          cb( val, resolve );\n        } );\n      } )\n    );\n  };\n}\n```\n\nNote: In this implementation of `map(..)`, you can't signal async rejection, but if a synchronous exception/error occurs inside of the mapping callback (cb(..)), the main `Promise.map(..)` returned promise would reject.\n\nLet's illustrate using `map(..)` with a list of Promises (instead of simple values):\n\n```javascript\nvar p1 = Promise.resolve( 21 );\nvar p2 = Promise.resolve( 42 );\nvar p3 = Promise.reject( \"Oops\" );\n\n// double values in list even if they're in\n// Promises\nPromise.map( [p1,p2,p3], function(pr,done){\n  // make sure the item itself is a Promise\n  Promise.resolve( pr )\n  .then(\n    // extract value as `v`\n    function(v){\n      // map fulfillment `v` to new value\n      done( v * 2 );\n    },\n    // or, map to promise rejection message\n    done\n  );\n} )\n.then( function(vals){\n  console.log( vals );  // [42,84,\"Oops\"]\n} );\n```\n\n### Promise Limitations\n\nMany of the details we'll discuss in this section have already been alluded to in this chapter, but we'll just make sure to review these limitations specifically.\n\n#### Sequence Error Handling\n\nWe covered Promise-flavored error handling in detail earlier in this chapter. The limitations of how Promises are designed -- how they chain, specifically -- creates a very easy pitfall where an error in a Promise chain can be silently ignored accidentally.\n\nBut there's something else to consider with Promise errors. Because a Promise chain is nothing more than its constituent Promises wired together, there's no entity to refer to the entire chain as a single thing, which means there's no external way to observe any errors that may occur.\n\nIf you construct a Promise chain that has no error handling in it, any error anywhere in the chain will propagate indefinitely down the chain, until observed (by registering a rejection handler at some step). So, in that specific case, having a reference to the last promise in the chain is enough (p in the following snippet), because you can register a rejection handler there, and it will be notified of any propagated errors:\n\n```javascript\n// `foo(..)`, `STEP2(..)` and `STEP3(..)` are\n// all promise-aware utilities\n\nvar p = foo( 42 )\n.then( STEP2 )\n.then( STEP3 );\n```\n\nAlthough it may seem sneakily confusing, p here doesn't point to the first promise in the chain (the one from the foo(42) call), but instead from the last promise, the one that comes from the then(STEP3) call.\n\nAlso, no step in the promise chain is observably doing its own error handling. That means that you could then register a rejection error handler on p, and it would be notified if any errors occur anywhere in the chain:\n\n```javascript\np.catch( handleErrors );\n```\n\nBut if any step of the chain in fact does its own error handling (perhaps hidden/abstracted away from what you can see), your `handleErrors(..)` won't be notified. This may be what you want -- it was, after all, a \"handled rejection\" -- but it also may not be what you want. The complete lack of ability to be notified (of \"already handled\" rejection errors) is a limitation that restricts capabilities in some use cases.\n\nIt's basically the same limitation that exists with a `try..catch` that can catch an exception and simply swallow it. So this isn't a limitation unique to Promises, but it is something we might wish to have a workaround for.\n\nUnfortunately, many times there is no reference kept for the intermediate steps in a Promise-chain sequence, so without such references, you cannot attach error handlers to reliably observe the errors.\n\n#### Single Value\n\nPromises by definition only have a single fulfillment value or a single rejection reason. In simple examples, this isn't that big of a deal, but in more sophisticated scenarios, you may find this limiting.\n\nThe typical advice is to construct a values wrapper (such as an object or array) to contain these multiple messages. This solution works, but it can be quite awkward and tedious to wrap and unwrap your messages with every single step of your Promise chain.\n\n##### Splitting Values\n\nSometimes you can take this as a signal that you could/should decompose the problem into two or more Promises.\n\nImagine you have a utility `foo(..)` that produces two values (x and y) asynchronously:\n\n```javascript\nfunction getY(x) {\n  return new Promise( function(resolve,reject){\n    setTimeout( function(){\n      resolve( (3 * x) - 1 );\n      }, 100 );\n  } );\n}\n\nfunction foo(bar,baz) {\n  var x = bar * baz;\n\n  return getY( x )\n  .then( function(y){\n    // wrap both values into container\n    return [x,y];\n  } );\n}\n\nfoo( 10, 20 )\n.then( function(msgs){\n  var x = msgs[0];\n  var y = msgs[1];\n\n  console.log( x, y );  // 200 599\n} );\n```\n\nFirst, let's rearrange what `foo(..)` returns so that we don't have to wrap x and y into a single array value to transport through one Promise. Instead, we can wrap each value into its own promise:\n\n```javascript\nfunction foo(bar,baz) {\n  var x = bar * baz;\n\n  // return both promises\n  return [\n    Promise.resolve( x ),\n    getY( x )\n  ];\n}\n\nPromise.all(\n  foo( 10, 20 )\n)\n.then( function(msgs){\n  var x = msgs[0];\n  var y = msgs[1];\n\n  console.log( x, y );\n} );\n```\n\nIs an array of promises really better than an array of values passed through a single promise? Syntactically, it's not much of an improvement.\n\nBut this approach more closely embraces the Promise design theory. It's now easier in the future to refactor to split the calculation of x and y into separate functions. It's cleaner and more flexible to let the calling code decide how to orchestrate the two promises -- using `Promise.all([ .. ])` here, but certainly not the only option -- rather than to abstract such details away inside of `foo(..)`.\n\n##### Unwrap/Spread Arguments\n\nThe `var x = ..` and `var y = ..` assignments are still awkward overhead. We can employ some functional trickery (hat tip to Reginald Braithwaite, @raganwald on Twitter) in a helper utility:\n\n```javascript\nfunction spread(fn) {\n  return Function.apply.bind( fn, null );\n}\n\nPromise.all(\n  foo( 10, 20 )\n)\n.then(\n  spread( function(x,y){\n    console.log( x, y );  // 200 599\n  } )\n)\n```\n\nThat's a bit nicer! Of course, you could inline the functional magic to avoid the extra helper:\n\n```javascript\nPromise.all(\n  foo( 10, 20 )\n)\n.then( Function.apply.bind(\n  function(x,y){\n    console.log( x, y );  // 200 599\n  },\n  null\n) );\n```\n\nThese tricks may be neat, but ES6 has an even better answer for us: destructuring. The array destructuring assignment form looks like this:\n\n```javascript\nPromise.all(\n  foo( 10, 20 )\n)\n.then( function(msgs){\n  var [x,y] = msgs;\n\n  console.log( x, y );  // 200 599\n} );\n```\n\nBut best of all, ES6 offers the array parameter destructuring form:\n\n```javascript\nPromise.all(\n  foo( 10, 20 )\n)\n.then( function([x,y]){\n  console.log( x, y );  // 200 599\n} );\n```\n\nWe've now embraced the one-value-per-Promise mantra, but kept our supporting boilerplate to a minimum!\n\nNote: For more information on ES6 destructuring forms, see the ES6 & Beyond title of this series.\n\n#### Single Resolution\n\nOne of the most intrinsic behaviors of Promises is that a Promise can only be resolved once (fulfillment or rejection). For many async use cases, you're only retrieving a value once, so this works fine.\n\nBut there's also a lot of async cases that fit into a different model -- one that's more akin to events and/or streams of data. It's not clear on the surface how well Promises can fit into such use cases, if at all. Without a significant abstraction on top of Promises, they will completely fall short for handling multiple value resolution.\n\nImagine a scenario where you might want to fire off a sequence of async steps in response to a stimulus (like an event) that can in fact happen multiple times, like a button click.\n\nThis probably won't work the way you want:\n\n```javascript\n// `click(..)` binds the `\"click\"` event to a DOM element\n// `request(..)` is the previously defined Promise-aware Ajax\n\nvar p = new Promise( function(resolve,reject){\n\tclick( \"#mybtn\", resolve );\n} );\n\np.then( function(evt){\n\tvar btnID = evt.currentTarget.id;\n\treturn request( \"http://some.url.1/?id=\" + btnID );\n} )\n.then( function(text){\n\tconsole.log( text );\n} );\n```\n\nThe behavior here only works if your application calls for the button to be clicked just once. If the button is clicked a second time, the p promise has already been resolved, so the second resolve(..) call would be ignored.\n\nInstead, you'd probably need to invert the paradigm, creating a whole new Promise chain for each event firing:\n\n```javascript\nclick( \"#mybtn\", function(evt){\n\tvar btnID = evt.currentTarget.id;\n\n\trequest( \"http://some.url.1/?id=\" + btnID )\n\t.then( function(text){\n\t\tconsole.log( text );\n\t} );\n} );\n```\n\nThis approach will work in that a whole new Promise sequence will be fired off for each \"click\" event on the button.\n\nBut beyond just the ugliness of having to define the entire Promise chain inside the event handler, this design in some respects violates the idea of separation of concerns/capabilities (SoC). You might very well want to define your event handler in a different place in your code from where you define the response to the event (the Promise chain). That's pretty awkward to do in this pattern, without helper mechanisms.\n\nNote: Another way of articulating this limitation is that it'd be nice if we could construct some sort of \"observable\" that we can subscribe a Promise chain to. There are libraries that have created these abstractions (such as [RxJS](http://rxjs.codeplex.com/)), but the abstractions can seem so heavy that you can't even see the nature of Promises anymore. Such heavy abstraction brings important questions to mind such as whether (sans Promises) these mechanisms are as trustable as Promises themselves have been designed to be. We'll revisit the \"Observable\" pattern in Appendix B.\n\n#### Inertia\n\nOne concrete barrier to starting to use Promises in your own code is all the code that currently exists which is not already Promise-aware. If you have lots of callback-based code, it's far easier to just keep coding in that same style.\n\n\"A code base in motion (with callbacks) will remain in motion (with callbacks) unless acted upon by a smart, Promises-aware developer.\"\n\nPromises offer a different paradigm, and as such, the approach to the code can be anywhere from just a little different to, in some cases, radically different. You have to be intentional about it, because Promises will not just naturally shake out from the same ol' ways of doing code that have served you well thus far.\n\nConsider a callback-based scenario like the following:\n\n```javascript\nfunction foo(x,y,cb) {\n\tajax(\n\t\t\"http://some.url.1/?x=\" + x + \"&y=\" + y,\n\t\tcb\n\t);\n}\n\nfoo( 11, 31, function(err,text) {\n\tif (err) {\n\t\tconsole.error( err );\n\t}\n\telse {\n\t\tconsole.log( text );\n\t}\n} );\n```\n\nIs it immediately obvious what the first steps are to convert this callback-based code to Promise-aware code? Depends on your experience. The more practice you have with it, the more natural it will feel. But certainly, Promises don't just advertise on the label exactly how to do it -- there's no one-size-fits-all answer -- so the responsibility is up to you.\n\nAs we've covered before, we definitely need an Ajax utility that is Promise-aware instead of callback-based, which we could call `request(..)`. You can make your own, as we have already. But the overhead of having to manually define Promise-aware wrappers for every callback-based utility makes it less likely you'll choose to refactor to Promise-aware coding at all.\n\nPromises offer no direct answer to that limitation. Most Promise libraries do offer a helper, however. But even without a library, imagine a helper like this:\n\n```javascript\n// polyfill-safe guard check\nif (!Promise.wrap) {\n\tPromise.wrap = function(fn) {\n\t\treturn function() {\n\t\t\tvar args = [].slice.call( arguments );\n\n\t\t\treturn new Promise( function(resolve,reject){\n\t\t\t\tfn.apply(\n\t\t\t\t\tnull,\n\t\t\t\t\targs.concat( function(err,v){\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresolve( v );\n\t\t\t\t\t\t}\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} );\n\t\t};\n\t};\n}\n```\n\nOK, that's more than just a tiny trivial utility. However, although it may look a bit intimidating, it's not as bad as you'd think. It takes a function that expects an error-first style callback as its last parameter, and returns a new one that automatically creates a Promise to return, and substitutes the callback for you, wired up to the Promise fulfillment/rejection.\n\nRather than waste too much time talking about how this `Promise.wrap(..)` helper works, let's just look at how we use it:\n\n```javascript\nvar request = Promise.wrap( ajax );\n\nrequest( \"http://some.url.1/\" )\n.then( .. )\n..\n```\n\nWow, that was pretty easy!\n\n`Promise.wrap(..)` does not produce a Promise. It produces a function that will produce Promises. In a sense, a Promise-producing function could be seen as a \"Promise factory.\" I propose \"promisory\" as the name for such a thing (\"Promise\" + \"factory\").\n\nThe act of wrapping a callback-expecting function to be a Promise-aware function is sometimes referred to as \"lifting\" or \"promisifying\". But there doesn't seem to be a standard term for what to call the resultant function other than a \"lifted function\", so I like \"promisory\" better as I think it's more descriptive.\n\nNote: Promisory isn't a made-up term. It's a real word, and its definition means to contain or convey a promise. That's exactly what these functions are doing, so it turns out to be a pretty perfect terminology match!\n\nSo, `Promise.wrap(ajax)` produces an `ajax(..)` promisory we call `request(..)`, and that promisory produces Promises for Ajax responses.\n\nIf all functions were already promisories, we wouldn't need to make them ourselves, so the extra step is a tad bit of a shame. But at least the wrapping pattern is (usually) repeatable so we can put it into a `Promise.wrap(..)` helper as shown to aid our promise coding.\n\nSo back to our earlier example, we need a promisory for both `ajax(..)` and `foo(..)`:\n\n```javascript\n// make a promisory for `ajax(..)`\nvar request = Promise.wrap( ajax );\n\n// refactor `foo(..)`, but keep it externally\n// callback-based for compatibility with other\n// parts of the code for now -- only use\n// `request(..)`'s promise internally.\nfunction foo(x,y,cb) {\n\trequest(\n\t\t\"http://some.url.1/?x=\" + x + \"&y=\" + y\n\t)\n\t.then(\n\t\tfunction fulfilled(text){\n\t\t\tcb( null, text );\n\t\t},\n\t\tcb\n\t);\n}\n\n// now, for this code's purposes, make a\n// promisory for `foo(..)`\nvar betterFoo = Promise.wrap( foo );\n\n// and use the promisory\nbetterFoo( 11, 31 )\n.then(\n\tfunction fulfilled(text){\n\t\tconsole.log( text );\n\t},\n\tfunction rejected(err){\n\t\tconsole.error( err );\n\t}\n);\n```\n\nOf course, while we're refactoring `foo(..)` to use our new `request(..)` promisory, we could just make `foo(..)` a promisory itself, instead of remaining callback-based and needing to make and use the subsequent `betterFoo(..)` promisory. This decision just depends on whether `foo(..)` needs to stay callback-based compatible with other parts of the code base or not.\n\nConsider:\n\n```javascript\n// `foo(..)` is now also a promisory because it\n// delegates to the `request(..)` promisory\nfunction foo(x,y) {\n\treturn request(\n\t\t\"http://some.url.1/?x=\" + x + \"&y=\" + y\n\t);\n}\n\nfoo( 11, 31 )\n.then( .. )\n..\n```\n\nWhile ES6 Promises don't natively ship with helpers for such promisory wrapping, most libraries provide them, or you can make your own. Either way, this particular limitation of Promises is addressable without too much pain (certainly compared to the pain of callback hell!).\n\n#### Promise Uncancelable\n\nOnce you create a Promise and register a fulfillment and/or rejection handler for it, there's nothing external you can do to stop that progression if something else happens to make that task moot.\n\nNote: Many Promise abstraction libraries provide facilities to cancel Promises, but this is a terrible idea! Many developers wish Promises had natively been designed with external cancelation capability, but the problem is that it would let one consumer/observer of a Promise affect some other consumer's ability to observe that same Promise. This violates the future-value's trustability (external immutability), but moreover is the embodiment of the [\"action at a distance\" anti-pattern](http://en.wikipedia.org/wiki/Action_at_a_distance_%28computer_programming%29). Regardless of how useful it seems, it will actually lead you straight back into the same nightmares as callbacks.\n\nConsider our Promise timeout scenario from earlier:\n\n```javascript\nvar p = foo( 42 );\n\nPromise.race( [\n\tp,\n\ttimeoutPromise( 3000 )\n] )\n.then(\n\tdoSomething,\n\thandleError\n);\n\np.then( function(){\n\t// still happens even in the timeout case :(\n} );\n```\n\nThe \"timeout\" was external to the promise p, so p itself keeps going, which we probably don't want.\n\nOne option is to invasively define your resolution callbacks:\n\n```javascript\nvar OK = true;\n\nvar p = foo( 42 );\n\nPromise.race( [\n\tp,\n\ttimeoutPromise( 3000 )\n\t.catch( function(err){\n\t\tOK = false;\n\t\tthrow err;\n\t} )\n] )\n.then(\n\tdoSomething,\n\thandleError\n);\n\np.then( function(){\n\tif (OK) {\n\t\t// only happens if no timeout! :)\n\t}\n} );\n```\n\nThis is ugly. It works, but it's far from ideal. Generally, you should try to avoid such scenarios.\n\nBut if you can't, the ugliness of this solution should be a clue that cancelation is a functionality that belongs at a higher level of abstraction on top of Promises. I'd recommend you look to Promise abstraction libraries for assistance rather than hacking it yourself.\n\nNote: My asynquence Promise abstraction library provides just such an abstraction and an `abort()` capability for the sequence, all of which will be discussed in Appendix A.\n\nA single Promise is not really a flow-control mechanism (at least not in a very meaningful sense), which is exactly what cancelation refers to; that's why Promise cancelation would feel awkward.\n\nBy contrast, a chain of Promises taken collectively together -- what I like to call a \"sequence\" -- is a flow control expression, and thus it's appropriate for cancelation to be defined at that level of abstraction.\n\nNo individual Promise should be cancelable, but it's sensible for a sequence to be cancelable, because you don't pass around a sequence as a single immutable value like you do with a Promise.\n\n#### Promise Performance\n\nThis particular limitation is both simple and complex.\n\nComparing how many pieces are moving with a basic callback-based async task chain versus a Promise chain, it's clear Promises have a fair bit more going on, which means they are naturally at least a tiny bit slower. Think back to just the simple list of trust guarantees that Promises offer, as compared to the ad hoc solution code you'd have to layer on top of callbacks to achieve the same protections.\n\nMore work to do, more guards to protect, means that Promises are slower as compared to naked, untrustable callbacks. That much is obvious, and probably simple to wrap your brain around.\n\nBut how much slower? Well... that's actually proving to be an incredibly difficult question to answer absolutely, across the board.\n\nFrankly, it's kind of an apples-to-oranges comparison, so it's probably the wrong question to ask. You should actually compare whether an ad-hoc callback system with all the same protections manually layered in is faster than a Promise implementation.\n\nIf Promises have a legitimate performance limitation, it's more that they don't really offer a line-item choice as to which trustability protections you want/need or not -- you get them all, always.\n\nNevertheless, if we grant that a Promise is generally a little bit slower than its non-Promise, non-trustable callback equivalent -- assuming there are places where you feel you can justify the lack of trustability -- does that mean that Promises should be avoided across the board, as if your entire application is driven by nothing but must-be-utterly-the-fastest code possible?\n\nSanity check: if your code is legitimately like that, is JavaScript even the right language for such tasks? JavaScript can be optimized to run applications very performantly (see Chapter 5 and Chapter 6). But is obsessing over tiny performance tradeoffs with Promises, in light of all the benefits they offer, really appropriate?\n\nAnother subtle issue is that Promises make everything async, which means that some immediately (synchronously) complete steps still defer advancement of the next step to a Job (see Chapter 1). That means that it's possible that a sequence of Promise tasks could complete ever-so-slightly slower than the same sequence wired up with callbacks.\n\nOf course, the question here is this: are these potential slips in tiny fractions of performance worth all the other articulated benefits of Promises we've laid out across this chapter?\n\nMy take is that in virtually all cases where you might think Promise performance is slow enough to be concerned, it's actually an anti-pattern to optimize away the benefits of Promise trustability and composability by avoiding them altogether.\n\nInstead, you should default to using them across the code base, and then profile and analyze your application's hot (critical) paths. Are Promises really a bottleneck, or are they just a theoretical slowdown? Only then, armed with actual valid benchmarks (see Chapter 6) is it responsible and prudent to factor out the Promises in just those identified critical areas.\n\nPromises are a little slower, but in exchange you're getting a lot of trustability, non-Zalgo predictability, and composability built in. Maybe the limitation is not actually their performance, but your lack of perception of their benefits?\n\n### Review\n\nPromises are awesome. Use them. They solve the inversion of control issues that plague us with callbacks-only code.\n\nThey don't get rid of callbacks, they just redirect the orchestration of those callbacks to a trustable intermediary mechanism that sits between us and another utility.\n\nPromise chains also begin to address (though certainly not perfectly) a better way of expressing async flow in sequential fashion, which helps our brains plan and maintain async JS code better. We'll see an even better solution to that problem in the next chapter!\n\n## Source\n\nMost of this was copied with minor edits from \"You dont know JS\" by Kyle Simpson\n","n":0.009}}},{"i":100,"$":{"0":{"v":"Objects","n":1},"1":{"v":"## General Info\n\nObjects are sometimes called Associative Arrays\n\nfunctions in objects (methods) do not need to be separated by a colon they can be shorthand written just as the function name.\n\n```javascript\nlet user = {\n    name: \"John Smith\"\n    introduceSelf: function() {\n        console.log(`Hi! I'm ${this.name[0]}.`);\n    }\n}\n\n// can also be written as\nlet user = {\n    name: \"John Smith\"\n    introduceSelf() {\n        console.log(`Hi! I'm ${this.name[0]}.`);\n    }\n}\n```\n\n### The IN operator\n\nWhile you can check to see if a key is undefined to find out wether it exists or not there is the chance that the value in the key may actually be undefined and would therefore come back as true. The IN operator allows you to check for the existance of a key without worrying if its value is undefinedd.\n\n### The \"for... in\" loop\n\nTo iterate over object keys theres a special for in loop with the following syntax:\n\n```javascript\n// this function will return true is an object is empty false if not\nfunction isEmpty(obj) {\n    for (let key in obj) {\n        return false\n    }\n    return true\n}\n```\n\n### Constructors\n\n- Start with a capital letter and are named for the type of object they create\n\n```javascript\nfunction Person(name) {\n  this.name = name;\n  this.introduceSelf = function() {\n    console.log(`Hi! I'm ${this.name}.`);\n  }\n}\n\n// to call a Person() as a constructor we use new\n\nconst salva = new Person('Salva');\nsalva.name;\nsalva.introduceSelf();\n\nconst frankie = new Person('Frankie');\nfrankie.name;\nfrankie.introduceSelf();\n```\n","n":0.069}}},{"i":101,"$":{"0":{"v":"Prototype","n":1},"1":{"v":"## General Info\n\n**Prototype Property**: Every JavaScript function has a prototype property that is empty by default.\n\n**Prototype Attribute**: Think of the prototype attribute as a characteristic of the object; this characteristic tells us the object’s “parent”.\n\n**Constructor**: is a function used for initializing new objects, and you use the new keyword to call the constructor.\n\n**Prototype Property: Prototype-based Inheritance (Prototypal inheritance)**: In JavaScript, you implement inheritance with the prototype property. For example, you can create a Fruit function (an object, since all functions in JavaScript are objects) and add properties and methods on the Fruit prototype property, and all instances of the Fruit function will inherit all the Fruit’s properties and methods.\n\n```javascript\n// Explicitly Passing Inheretance\nFruit.prototype = new Plant ();\n\n// Another way, you probably shouldnt do it like this but you can:\nlet animal = {\n  eats: true,\n  walk() {\n    alert(\"Animal walk\");\n  }\n};\n\nlet rabbit = {\n  jumps: true,\n  __proto__: animal\n};\n\n// walk is taken from the prototype\nrabbit.walk(); // Animal walk\n\n```\n\n**Prototype Attribute: Accessing Properties on Objects**: prototype attribute (or prototype object) of any object is the “parent” object where the inherited properties were originally defined.\n\nIf the property is not found on the object’s prototype, the search for the property then moves to prototype of the object’s prototype (the father of the object’s father—the grandfather). And this continues until there is no more prototype (no more great-grand father; no more lineage to follow).\n\nThis in essence is the **prototype chain:** the chain from an object’s prototype to its prototype’s prototype and onwards.\n\nIf the property does not exist on any of the object’s prototype in its prototype chain, then the property does not exist and undefined is returned.\n\nThis prototype chain mechanism is essentially the same concept we have discussed above with the prototype-based inheritance, except we are now focusing specifically on how JavaScript accesses object properties and methods via the prototype object.\n\n**Object.prototype Properties Inherited by all Objects**: All objects in JavaScript inherit properties and methods from Object.prototype. These inherited properties and methods are:\n\n1. `constructor`\n2. `hasOwnProperty()`\n3. `isPrototypeOf()`\n4. `propertyIsEnumerable()`\n5. `toLocaleString()`\n6. `toString()`\n7. `valueOf()`\n8. ECMAScript 5 also adds 4 accessor methods to Object.prototype.\n\n### Prototypal Inheretance\n\n[[devnotes.javascript.objects.method-delegation-inheretance]]\n\n### Limitations on Prototypal Inheretance\n\n1. References cant go in circles. JavaScript will throw an error if we try to assign `__proto__` in a circle.\n2. The value of `__proto__` can be either an object or null. Other types are ignored.\n\n### The Getter / Setter Exception\n\nThere is an exception to how Prototypal Inheretance functions with getters and setters, because they are functions using them is the same as using a function from the prototype.\n\n### How 'this' functions\n\nThis is not affected by prototypes at all.\n\nNo matter where the method is found: in an object or its prototype. In a method call, this is always the object before the dot.\n\nThat is actually a super-important thing, because we may have a big object with many methods, and have objects that inherit from it. And when the inheriting objects run the inherited methods, they will modify only their own states, not the state of the big object.\n\n### Utilizing For...in loops\n\n`Object.keys(objName)` will only return the keys associated with objName\n\nbut a for...in loop will return both its own keys and its inhereted keys\n\n```javascript\nfor(let property in objName) alert(property);\n```\n\nif you only want to return an objects own properties (exclude prototype props) there is a buil in JS method called `obj.hasOwnProperty(key)` which returns `true` if the object has the property.\n\nYou can use a for loop to filter like so:\n\n```javascript\nlet animal = {\n  eats: true\n};\n\nlet rabbit = {\n  jumps: true,\n  __proto__: animal\n};\n\nfor(let prop in rabbit) {\n  let isOwn = rabbit.hasOwnProperty(prop);\n\n  if (isOwn) {\n    alert(`Our: ${prop}`); // Our: jumps\n  } else {\n    alert(`Inherited: ${prop}`); // Inherited: eats\n  }\n}\n```\n\n### Enumerable Flag in Protoypes\n\nLike all other properties of Object.prototype, it has enumerable:false flag. And for..in only lists enumerable properties. That’s why it and the rest of the Object.prototype properties are not listed.\n\n### Recommended Method for Prototypal Inheretance\n\nThe recommended way of setting the prototype of an object is `Object.create`(here is the documentation for that method). Object.create very simply returns a new object with the specified prototype and any additional properties you want to add.\n","n":0.039}}},{"i":102,"$":{"0":{"v":"Method Delegation Inheretance","n":0.577},"1":{"v":"## Method Delegation (Prototypal Inheretance or Class Inheretance)\n\n[[devnotes.javascript.objects.prototype]]\n\n### ES6 Class Constructor Version\n\n```javascript\nclass Greeter {\n  constructor (name) {\n    this.name = name || 'John Doe';\n  }\n  hello () {\n    return `Hello, my name is ${ this.name }`;\n  }\n}\n\nconst george = new Greeter('George');\n\nconst msg = george.hello();\n \nconsole.log(msg); // Hello, my name is George\n```\n\n### ES5 Constructor Function Version\n\n```javascript\nfunction Greeter (name) {\n  this.name = name || 'John Doe';\n}\n\nGreeter.prototype.hello = function hello () {\n  return 'Hello, my name is ' + this.name;\n}\n\nvar george = new Greeter('George');\n\nvar msg = george.hello();\n\nconsole.log(msg); // Hello, my name is George\n```\n\n### Factory Function Version\n\n```javascript\nconst proto = {\n  hello () {\n    return `Hello, my name is ${ this.name }`;\n  }\n};\n\nconst greeter = (name) => Object.assign(Object.create(proto), {\n  name\n});\n\nconst george = greeter('george');\n\nconst msg = george.hello();\n\nconsole.log(msg);\n```\n\n## Composition Over Class Inheretance\n\nClass inheritance creates is-a relationships with restrictive taxonomies, all of which are eventually wrong for new use-cases. But it turns out, we usually employ inheritance for has-a, uses-a, or can-do relationships.\n\nComposition is more like a guitar effects pedalboard. Want something that can do delay, subtle distortion, and a robot voice? No problem! Just plug them all in:\n\n```javascript\nconst effect = compose(delay, distortion, robovoice); // Rock on!\n```\n\nComposition is:\n\n1. Simple\n2. More expressive\n3. More flexible\n","n":0.072}}},{"i":103,"$":{"0":{"v":"Concatenative_inheretance","n":1},"1":{"v":"## Definition\n\nConcatenative inheritance is the process of copying the properties from one object to another, without retaining a reference between the two objects. It relies on JavaScript’s dynamic object extension feature.\n\nCloning is a great way to store default state for objects: This process is commonly achieved using `Object.assign()`. Prior to ES6, it was common to use similar `.extend()` methods from Lodash, Underscore, or jQuery.\n\n```javascript\nconst proto = {\n  hello: function hello() {\n    return `Hello, my name is ${ this.name }`;\n  }\n};\n\nconst george = Object.assign({}, proto, {name: 'George'});\n\nconst msg = george.hello();\n\nconsole.log(msg); // Hello, my name is George\n```\n\nIt’s common to see this style used for mixins. For example, you can turn any object into an event emitter by mixing in an `EventEmitter3` prototype:\n\n```javascript\nimport Events from 'eventemitter3';\n\nconst object = {};\n\nObject.assign(object, Events.prototype);\n\nobject.on('event', payload => console.log(payload));\n\nobject.emit('event', 'some data'); // 'some data'\n```\n\nConcatenative inheritance is very powerful, but it gets even better when you combine it with closures.\n\n## Functional Inheretance and Functional Mixins\n\nFunctional inheritance makes use of a factory function, and then tacks on new properties using concatenative inheritance.\n\nFunctions created for the purpose of extending existing objects are commonly referred to as functional mixins. The primary advantage of using functions for extension is that it allows you to use the function closure to encapsulate private data. In other words, you can enforce private state.\n\nIt’s a bit awkward to hang the attributes on a public property where a user could set or get them without calling the proper methods. What we really want to do is hide the attributes in a private closure. It looks something like this:\n\n```javascript\nimport Events from 'eventemitter3';\n\nconst rawMixin = function () {\n  const attrs = {};\n\n  return Object.assign(this, {\n    set (name, value) {\n      attrs[name] = value;\n\n      this.emit('change', {\n        prop: name,\n        value: value\n      });\n    },\n\n    get (name) {\n      return attrs[name];\n    }\n  }, Events.prototype);\n};\n\nconst mixinModel = (target) => rawMixin.call(target);\n\nconst george = { name: 'george' };\nconst model = mixinModel(george);\n\nmodel.on('change', data => console.log(data));\n\nmodel.set('name', 'Sam');\n/*\n{\n  prop: 'name',\n  value: 'Sam'\n}\n*/\n```\n\nBy moving `attrs` from a public property to a private identifier, we remove all trace of it from the public API. The only way to use it now is via the **privileged methods**.\n\n### Priviliged Methods\n\n**Privileged methods** are any methods defined within the closure’s function scope, which gives them access to the private data.\n\nNote in the example above, we have the `mixinModel()` wrapper around the actual functional mixin, `rawMixin()`. The reason we need that is because we need to set the value of `this` inside the function, which we do with `Function.prototype.call()`. We could skip the wrapper and let callers do that instead, but that would be obnoxious.\n","n":0.049}}},{"i":104,"$":{"0":{"v":"Node","n":1},"1":{"v":"## General Info\n\nAs an asynchronous event driven JavaScript runtime, Node is designed to build scalable network applications.\n\n## Event Loop\n\nThe event loop is what allows Node.js to perform non-blocking I/O operations — despite the fact that JavaScript is single-threaded — by offloading operations to the system kernel whenever possible.\n\nNode.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.\n\n## Event-Driven Programming\n\nIn an event-driven application, there is generally a main loop that listens for events, and then triggers a callback function when one of those events is detected.\n\nAlthough events look quite similar to callbacks, the difference lies in the fact that callback functions are called when an asynchronous function returns its result, whereas event handling works on the observer pattern. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners as you can see in the example below.\n\n```javascript\n// Example \n\n// Import events module\nvar events = require('events');\n\n// Create an eventEmitter object\nvar eventEmitter = new events.EventEmitter();\n\n// Create an event handler as follows\nvar connectHandler = function connected() {\n   console.log('connection succesful.');\n  \n   // Fire the data_received event \n   eventEmitter.emit('data_received');\n}\n\n// Bind the connection event with the handler\neventEmitter.on('connection', connectHandler);\n \n// Bind the data_received event with the anonymous function\neventEmitter.on('data_received', function() {\n   console.log('data received succesfully.');\n});\n\n// Fire the connection event \neventEmitter.emit('connection');\n\nconsole.log(\"Program Ended.\");\n```\n\n### Error First Style Pattern\n\nAnother common callback pattern is called \"error-first style\" (sometimes called \"Node style,\" as it's also the convention used across nearly all Node.js APIs), where the first argument of a single callback is reserved for an error object (if any). If success, this argument will be empty/falsy (and any subsequent arguments will be the success data), but if an error result is being signaled, the first argument is set/truthy (and usually nothing else is passed):\n","n":0.053}}},{"i":105,"$":{"0":{"v":"Namespacing","n":1},"1":{"v":"## Definition\n\nNamespacing is a technique that is used to avoid naming collisions in our programs.\n","n":0.258}}},{"i":106,"$":{"0":{"v":"Mutability","n":1},"1":{"v":"## General Info\n\nJavaScript offers several ways to add, remove, and replace items in an array – but some of these ways mutate the array, and others are non-mutating; they produce a new array.\n\n- `array.splice()` mutates the original array\n- `array.slice()` does not mutate the original array\n\n### Addition with Mutation\n\nThe mutating methods for adding to an array are `array.push()` which adds an item to the end of the array and `array.ushift()` which adds an item to the beginning of the array..\n\n```javascript\n// since the array will be mutated, \n// use 'let' rather than 'const'\nlet mutatingAdd = ['a', 'b', 'c', 'd', 'e']; \n\nmutatingAdd.push('f'); // ['a', 'b', 'c', 'd', 'e', 'f']\nmutatingAdd.unshift('z'); // ['z', 'a', 'b', 'c', 'd', 'e' 'f']\n```\n\n### Addition without Mutation\n\nThe non-mutating method `array.concat()` is one way\n\n```javascript\n// since we will not be mutating, \n// use const\nconst arr1 = ['a', 'b', 'c', 'd', 'e'];\n\nconst arr2 = arr1.concat('f'); // ['a', 'b', 'c', 'd', 'e'. 'f']\nconsole.log(arr1); // ['a', 'b', 'c', 'd', 'e']\n```\n\nUsing the `...spread` operator is another:\n\n```javascript\n// since we will not be mutating, \n// use const\nconst arr1 = ['a', 'b', 'c', 'd', 'e'];\n\nconst arr2 = [...arr1, 'f']; // ['a', 'b', 'c', 'd', 'e', 'f']\nconst arr3 = ['z', ...arr1]; // ['z', 'a', 'b', 'c', 'd', 'e']\n```\n\n### Removal with Mutation\n\nThe mutating methods for removing from an array are `array.pop()` which removes an item at the end of the array, `array.shift()` which removes an item at the beginning of the array and `array.splice()` which can accept several parameters.\n\n```javascript\n// since the array will be mutated, \n// use 'let' rather than 'const'\nlet mutatingRemove = ['a', 'b', 'c', 'd', 'e'];\nmutatingRemove.pop(); // ['a', 'b', 'c', 'd']\nmutatingRemove.shift(); // ['b', 'c', 'd']\n```\n\n`array.pop()` and `array.shift()` return the item that is removed. This means you can 'catch' the deleted item in a variable.\n\n1. The first parameter is the starting point of the splice.\n2. The second parameter is the number of items to remove from the array.\n3. The third parameter can be used to add items in the place of the removes items.\n\nLike array.pop() and array.shift(), array.splice() returns the items it removes.\n\n```javascript\nlet mutatingRemove = ['a', 'b', 'c', 'd', 'e'];\nlet returnedItems = mutatingRemove.splice(0, 2);\nconsole.log(mutatingRemove); // ['c', 'd', 'e']\nconsole.log(returnedItems) // ['a', 'b'] \n```\n\n### Removal without Mutating\n\nJavaScript's `array.filter()` method creates a new array from an original array, but the new array only contains items that match the specified criteria. Another way is with `array.slice()` **Dont Confuse with `array.splice()`**\n\n```javascript\n// since we will not be mutating, \n// use const\nconst arr1 = ['a', 'b', 'c', 'd', 'e'];\n\nconst arr2 = arr1.filter(a => a !== 'e'); // ['a', 'b', 'c', 'd']\n// OR\nconst arr2 = arr1.filter(a => {\n  return a !== 'e';\n}); // ['a', 'b', 'c', 'd']\n```\n\n`array.slice()` takes two parameters.\n\n1. The first parameter is the index where the copy should begin.\n2. The second parameter is the index where the copy should end. This end index is non-inclusive.\n\n```javascript\n// since we will not be mutating, \n// use const\nconst arr1 = ['a', 'b', 'c', 'd', 'e'];\nconst arr2 = arr1.slice(1, 5) // ['b', 'c', 'd', 'e']\nconst arr3 = arr1.slice(2) // ['c', 'd', 'e']\n```\n\nLine 5 `(const arr3 = arr1.slice(2))` shows a handy trick. If the second parameter of array.slice() is not provided, the method makes a copy from the beginning index to the end of the array.\n\n### Replacing with Mutation\n\nIf you know the index of the item you want to replace, you can use `array.splice()` to replace it with something else.\n\nIn order to do this, we need to use at least three parameters:\n\n1. The first parameter is the index to start replacing.\n2. The second parameter is the number of items to remove.\n3. The third and all other parameters are what will be inserted into the array.\n\n```javascript\n// since the array will be mutated, \n// use 'let' rather than 'const'\nlet mutatingReplace = ['a', 'b', 'c', 'd', 'e'];\nmutatingReplace.splice(2, 1, 30); // ['a', 'b', 30, 'd', 'e']\n// OR\nmutatingReplace.splice(2, 1, 30, 31); // ['a', 'b', 30, 31, 'd', 'e']\n```\n\n### Replace without Mutating\n\nWe can use `array.map()` to create a new array, but we can also check each item and replace items that match a specified criterion.\n\n```javascript\n// since we will not be mutating, \n// use const\nconst arr1 = ['a', 'b', 'c', 'd', 'e']\nconst arr2 = arr1.map(item => {\n  if(item === 'c') {\n    item = 'CAT';\n  }\n  return item;\n}); // ['a', 'b', 'CAT', 'd', 'e']\n```\n\nThe code above creates a new array based on arr1, but replaces all 'c's with CATs.\n\n### Transforming Data with `array.map()`\n\n`array.map()` is a powerful method, and can be used to transform data without compromising the integrity of the original data set.\n\n```javascript\n// since we will not be mutating, \n// use const\nconst origArr = ['a', 'b', 'c', 'd', 'e'];\nconst transformedArr = origArr.map(n => n + 'Hi!'); // ['aHi!', 'bHi!', 'cHi!', 'dHi!', 'eHi!']\n// OR\nconst transformedArr = origArr.map(n => {\n  return n * 2;\n})// ['aHi!', 'bHi!', 'cHi!', 'dHi!', 'eHi!']\nconsole.log(origArr); // ['a', 'b', 'c', 'd', 'e']; // orignal array is intact\n```\n","n":0.036}}},{"i":107,"$":{"0":{"v":"Module Pattern","n":0.707},"1":{"v":"## General Info\n\nModules are actually very similar to factory functions. The main difference is how they’re created.\n\n```javascript\nconst calculator = (() => {\n  const add = (a, b) => a + b;\n  const sub = (a, b) => a - b;\n  const mul = (a, b) => a * b;\n  const div = (a, b) => a / b;\n  return {\n    add,\n    sub,\n    mul,\n    div,\n  };\n})();\n\ncalculator.add(3,5); // 8\ncalculator.sub(6,2); // 4\ncalculator.mul(14,5534); // 77476\n```\n\nThe concepts are exactly the same as the factory function. However, instead of creating a factory that we can use over and over again to create multiple objects, the module pattern wraps the factory in an IIFE (Immediately Invoked Function Expression) [[devnotes.javascript.iife]].\n\nThe Module Pattern is one of the most common design patterns used in JavaScript and for good reason. The module pattern is easy to use and creates encapsulation of our code. Modules are commonly used as singleton style objects where only one instance exists. The Module Pattern is great for services and testing/TDD.\n\n## Creating a Module\n\nStart with an anonymous closure. Anonymous closures are just functions that wrap our code and create an enclosed scope around it. Closures help keep any state or privacy within that function. Closures are one of the best and most powerful features of JavaScript.\n\n```javascript\n(function() {\n  'use strict';\n  // Your code here\n  // All function and variables are scoped to this function\n})();\n```\n\nThis pattern is well known as a Immediately Invoked Function Expression or IIFE. The function is evaluated then immediately invoked. Its also a good practice to run your modules in ES5 strict mode. Strict mode will protect you from some of the more dangerous parts in JavaScript.\n\n## Exporting a Module\n\nThis basically assigns the module to a variable that we can use to call our modules methods.\n\n```javascript\nvar myModule = (function() {\n  'use strict';\n\n})();\n```\n\nNext lets create a public method for our module to call. To expose this method to code outside our module we return an Object with the methods defined.\n\n```javascript\nvar myModule = (function() {\n  'use strict';\n\n  return {\n    publicMethod: function() {\n      console.log('Hello World!');\n    }\n  };\n})();\n\nmyModule.publicMethod(); // outputs 'Hello World'\n```\n\n## Private Methods and Properties\n\nJavaScript does not have a private keyword by default but using closures we can create private methods and private state.\n\n```javascript\nvar myModule = (function() {\n  'use strict';\n\n  var _privateProperty = 'Hello World';\n\n  function _privateMethod() {\n    console.log(_privateProperty);\n  }\n\n  return {\n    publicMethod: function() {\n      _privateMethod();\n    }\n  };\n})();\n\nmyModule.publicMethod(); // outputs 'Hello World'\nconsole.log(myModule._privateProperty); // is undefined protected by the module closure\nmyModule._privateMethod(); // is TypeError protected by the module closure\n```\n\nBecause our private properties are not returned they are not available outside of our module. Only our public method has given us access to our private methods. This gives us ability to create private state and encapsulation within our code.\n\nYou may have noticed the _ before our private methods and properties. Because JavaScript does not have a private keyword its common to prefix private properties with an underscore.\n\n## Revealing Module Pattern\n\nThe Revealing Module Pattern is one of the most popular ways of creating modules. Using the return statement we can return a object literal that 'reveals' only the methods or properties we want to be publicly available.\n\n```javascript\nvar myModule = (function() {\n  'use strict';\n\n  var _privateProperty = 'Hello World';\n  var publicProperty = 'I am a public property';\n\n  function _privateMethod() {\n    console.log(_privateProperty);\n  }\n\n  function publicMethod() {\n    _privateMethod();\n  }\n\n  return {\n    publicMethod: publicMethod,\n    publicProperty: publicProperty\n  };\n})();\n\nmyModule.publicMethod(); // outputs 'Hello World'\nconsole.log(myModule.publicProperty); // outputs 'I am a public property'\nconsole.log(myModule._privateProperty); // is undefined protected by the module closure\nmyModule._privateMethod(); // is TypeError protected by the module closure\n```\n\nThe benefit to the Revealing Module Pattern is that we can look at the bottom of our modules and quickly see what is publicly available for use.\n\nThe Module Pattern is not a silver bullet for adding code re-usability to your JavaScript. Using the Module Pattern with Prototypal Inheritance or ES6 Classes can give you a wide range of design patterns with varying pros and cons.\n\n## require.resolve('some_module')\n\nThe command `require.resolve('some_module')` will show you the path to the module that node finds as a result of the tree climbing process.\n","n":0.039}}},{"i":108,"$":{"0":{"v":"JavaScript Math","n":0.707},"1":{"v":"## General Math Info\n\n*Operand* - is the same as Arugement or Math Variables\n\n*Binary* - an operator that has two operands (ex. ```y - x```)\n\n*Unary* - an operator that has a single Operand (ex. ```-x```)\n\n$\\sqrt{4}$  can be written as ``` 4 ** (1/2) ```\n\nUnary ```+``` converts strings into numbers.\n\n![Operators in C](/assets/images/Operators-in-C.png)\n\nModify and Assign Operators such as ```+=, -=, /=``` exist for all arithmetic operators.\n\nIncrement and Decrement Operators ```++ & --``` only work on variables not values.  \n","n":0.115}}},{"i":109,"$":{"0":{"v":"Loops","n":1},"1":{"v":"## General Info\n\n`.map()` will do something to a loop collection and create a new collection from the changed items.\n\n`.filter()` will test each item and create a new collection containing matches. Difference between them is that filter will return a boolean. \n","n":0.156}}},{"i":110,"$":{"0":{"v":"Logical Operators","n":0.707},"1":{"v":"## Intro\n\nThere are four logical operators in JavaScirpt:\n\n1. ```||``` OR - finds the first truthy value\n\n2. ```&&``` AND - finds the first falsy value\n\n3. ```!``` NOT\n\n4. ```??``` Nullish Coalescing\n","n":0.186}}},{"i":111,"$":{"0":{"v":"Javascript_injection","n":1},"1":{"v":"## General Info\n\nIf `element.innerHTML` is being used you can inject javascript through an input field with a img tag like this:\n\n`<img src onerror=\"alert('hacked')\">`\n\nIf that input field manipulates a url you can do all sorts of bad stuff.\n\nYou can fix this by using innerText or TextContent\n","n":0.149}}},{"i":112,"$":{"0":{"v":"Import Module","n":0.707},"1":{"v":"## General Info\n\nThe name parameter is the name of the \"module object\" which will be used as a kind of namespace to refer to the exports. The export parameters specify individual named exports, while the import * as name syntax imports all of them.\n\n```javascript\nimport * as myModule from '/modules/my-module.js';\n\nmyModule.doAllTheAmazingThings();\n```\n\n### Import a single export from a module\n\n```javascript\nimport {myExport} from '/modules/my-module.js';\n```\n\n### Import an export with a more convenient alias\n\n```javascript\nimport {reallyReallyLongModuleExportName as shortName}\n  from '/modules/my-module.js';\n```\n\n### Importing defaults\n\n```javascript\nimport myDefault from '/modules/my-module.js';\n```\n\nIt is also possible to use the default syntax with the ones seen above (namespace imports or named imports). In such cases, the default import will have to be declared first. For instance:\n\n```javascript\nimport myDefault, * as myModule from '/modules/my-module.js';\n// myModule used as a namespace\n// OR:\nimport myDefault, {foo, bar} from '/modules/my-module.js';\n// specific, named imports\n```\n\n## Dynamic Imports\n\nThe standard import syntax is static and will always result in all code in the imported module being evaluated at load time. In situations where you wish to load a module conditionally or on demand, you can use a dynamic import instead. The following are some reasons why you might need to use dynamic import:\n\n- When importing statically significantly slows the loading of your code and there is a low likelihood that you will need the code you are importing, or you will not need it until a later time.\n- When importing statically significantly increases your program's memory usage and there is a low likelihood that you will need the code you are importing.\n- When the module you are importing does not exist at load time\n- When the import specifier string needs to be constructed dynamically. (Static import only supports static specifiers.)\n- When the module being imported has side effects, and you do not want those side effects unless some condition is true. (It is recommended not to have any side effects in a module, but you sometimes cannot control this in your module dependencies.)\n\nUse dynamic import only when necessary. The static form is preferable for loading initial dependencies, and can benefit more readily from static analysis tools and tree shaking.\n\nTo dynamically import a module, the import keyword may be called as a function. When used this way, it returns a promise.\n\n```javascript\nimport('/modules/my-module.js')\n  .then((module) => {\n    // Do something with the module.\n  });\n```\n\nThis form also supports the await keyword.\n\n```javascript\nlet module = await import('/modules/my-module.js');\n```\n\nDynamic Import Example:\n\n```javascript\nconst main = document.querySelector(\"main\");\nfor (const link of document.querySelectorAll(\"nav > a\")) {\n  link.addEventListener(\"click\", e => {\n    e.preventDefault();\n\n    import('/modules/my-module.js')\n      .then(module => {\n        module.loadPageInto(main);\n      })\n      .catch(err => {\n        main.textContent = err.message;\n      });\n  });\n}\n```\n","n":0.049}}},{"i":113,"$":{"0":{"v":"IIFE","n":1},"1":{"v":"## General Information\n\nAn Immediately-invoked function expression, or IIFE (pronounced “iffy”), is a function expression (named or anonymous) that is executed right away after its creation.\n\nIt doesn't take very long working with JavaScript before you come across this pattern:\n\n```javascript\n(function () {\n    // logic here\n})();\n\n// variant 2\n\n(function () {\n  alert('Woohoo!');\n}());\n```\n\n## How To\n\n1. You need to wrap the whole function in parentheses. As the name suggests, an IIFE must be a function expression, not a function definition. So, the purpose of the enclosing parentheses is to transform a function definition into an expression. This is because, in JavaScript, everything in parentheses is treated as an expression.\n2. You need to add a pair of parentheses at the very end (variant 1), or right after the closing curly brace (variant 2), which causes the function to be executed immediately.\n3. If you assign the function to a variable, you don’t need to enclose the whole function in parentheses, because it is already an expression:\n\n    ```javascript\n    var sayWoohoo = function () {\n    alert('Woohoo!');\n    }();\n    ```\n\n4. A semicolon is required at the end of an IIFE, as otherwise your code may not work properly.\n5. You can pass arguments to an IIFE (it’s a function, after all), as the following example demonstrates:\n\n    ```javascript\n    (function (name, profession) {\n    console.log(\"My name is \" + name + \". I'm an \" + profession + \".\");\n    })(\"Jackie Chan\", \"actor\");   // output: My name is Jackie Chan. I'm an actor.\n    ```\n\n## Why\n\nThe primary reason to use an IIFE is to obtain data privacy. Because JavaScript's var scopes variables to their containing function, any variables declared within the IIFE cannot be accessed by the outside world.\n\nOf course, you could explicitly name and then invoke a function to achieve the same ends.\n\nHowever, this approach has a few downsides. First, it unnecessarily takes up a name in the global namespace, increasing the possibility of name collisions. Second, the intentions of this code aren't as self-documenting as an IIFE. And third, because it is named and isn't self-documenting it might accidentally be invoked more than once.\n\nIt is worth pointing out that you can easily pass arguments into the IIFE as well.\n\n## Sources\n\n[SitePoint Article](https://www.sitepoint.com/demystifying-javascript-closures-callbacks-iifes/)\n","n":0.053}}},{"i":114,"$":{"0":{"v":"Functions","n":1},"1":{"v":"## General Info\n\n[JUST THIS](https://briggs.dev/blog/understanding-callbacks)\n","n":0.5}}},{"i":115,"$":{"0":{"v":"Factory_functions","n":1},"1":{"v":"## General Info\n\nThe factory function pattern is similar to constructors, but instead of using `new` to create an object, factory functions simply set up and return the new object when you call the function.\n\n```javascript\nconst personFactory = (name, age) => {\n  const sayHello = () => console.log('hello!');\n  return { name, age, sayHello };\n};\n\nconst jeff = personFactory('jeff', 27);\n\nconsole.log(jeff.name); // 'jeff'\n\njeff.sayHello(); // calls the function and logs 'hello!'\n```\n\n### Object Shorthand\n\n```javascript\n// thanks to es6 this:\nreturn {name: name, age: age, sayHello: sayHello};\n// is the same as:\nreturn {name, age, sayHello};\n```\n\nalso this:\n\n```javascript\nconst name = \"Maynard\";\nconst color = \"red\";\nconst number = 34;\nconst food = \"rice\";\n\n// logging all of these variables might be a useful thing to do,\n// but doing it like this can be somewhat confusing.\nconsole.log(name, color, number, food); // Maynard red 34 rice\n\n// if you simply turn them into an object with brackets,\n// the output is much easier to decipher:\nconsole.log({name, color, number, food});\n // { name: 'Maynard', color: 'red', number: 34, food: 'rice' }\n ```\n\n## Inheritance with factories\n\nExample of how to inheret a function property with factory functions.\n\n```javascript\nconst Person = (name) => {\n  const sayName = () => console.log(`my name is ${name}`);\n  return {sayName};\n}\n\nconst Nerd = (name) => {\n  // simply create a person and pull out the sayName function with destructuring assignment syntax!\n  const {sayName} = Person(name);\n  const doSomethingNerdy = () => console.log('nerd stuff');\n  return {sayName, doSomethingNerdy};\n}\n\nconst jeff = Nerd('jeff');\n\njeff.sayName(); //my name is jeff\njeff.doSomethingNerdy(); // nerd stuff\n```\n\nIf you want to inheret all methods you can use the `Object.assign` method:\n\n```javascript\nconst Nerd = (name) => {\n  const prototype = Person(name);\n  const doSomethingNerdy = () => console.log('nerd stuff');\n  return Object.assign({}, prototype, {doSomethingNerdy});\n}\n```\n","n":0.062}}},{"i":116,"$":{"0":{"v":"Form Validation","n":0.707},"1":{"v":"## General Info\n\n### novalidate\n\nThe `novalidate` attribute to turn off the browser's automatic validation; this lets our script take control over validation. However, this doesn't disable support for the constraint validation API nor the application of CSS pseudo-classes like `:valid`, etc. That means that even though the browser doesn't automatically check the validity of the form before sending its data, you can still do it yourself and style the form accordingly.\n\n```html\n<form novalidate>\n</form>\n```\n","n":0.119}}},{"i":117,"$":{"0":{"v":"Fetch API","n":0.707},"1":{"v":"## General Info\n\nThe Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.\n\nThis kind of functionality was previously achieved using XMLHttpRequest. Fetch provides a better alternative that can be easily used by other technologies such as Service Workers. Fetch also provides a single logical place to define other HTTP-related concepts such as CORS and extensions to HTTP.\n\n## Sample Usage\n\n```javascript\n// url (required), options (optional)\nfetch('https://davidwalsh.name/some/url', {\n    method: 'get'\n}).then(function(response) {\n\n}).catch(function(err) {\n    // Error :(\n});\n```\n","n":0.1}}},{"i":118,"$":{"0":{"v":"Export","n":1},"1":{"v":"## General Info\n\nThe export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the `import` statement. The value of an imported binding is subject to change in the module that exports it. When a module updates the value of a binding that it exports, the update will be visible in its imported value.\n\nExported modules are in strict mode whether you declare them as such or not. The export statement cannot be used in embedded scripts.\n\n### Syntax\n\nThere are two types of exports:\n\n1. Named Exports (Zero or more exports per module)\n2. Default Exports (One per module)\n\n```javascript\n// Exporting individual features\nexport let name1, name2, …, nameN; // also var, const\nexport let name1 = …, name2 = …, …, nameN; // also var, const\nexport function functionName(){...}\nexport class ClassName {...}\n\n// Export list\nexport { name1, name2, …, nameN };\n\n// Renaming exports\nexport { variable1 as name1, variable2 as name2, …, nameN };\n\n// Exporting destructured assignments with renaming\nexport const { name1, name2: bar } = o;\n\n// Default exports\nexport default expression;\nexport default function (…) { … } // also class, function*\nexport default function name1(…) { … } // also class, function*\nexport { name1 as default, … };\n\n// Aggregating modules\nexport * from …; // does not set the default export\nexport * as name1 from …; // ECMAScript® 2O20\nexport { name1, name2, …, nameN } from …;\nexport { import1 as name1, import2 as name2, …, nameN } from …;\nexport { default, … } from …;\n```\n\n**Note:** The following is syntactically invalid despite its import equivalent:\n\n```javascript\nimport DefaultExport from 'bar.js'; // Valid\nexport DefaultExport from 'bar.js'; // Invalid\nexport { default as DefaultExport } from 'bar.js'; // Correct Export\n```\n","n":0.06}}},{"i":119,"$":{"0":{"v":"Eventcapture","n":1},"1":{"v":"## General Info\n\nCapture is a parameter that can be passed into an event listener. The parameter takes a boolean value indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. If not specified, defaults to false.\n\n## Quick Links\n\n[MDN for addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n[Wes Bos 30 Days of JS Video](https://www.youtube.com/watch?v=F1anRyL37lE)\n\n## Sample Code\n\n```javascript\n  divs.forEach(div => div.addEventListener('click', callback, {\n    capture: false,\n    once: true\n  }));\n```\n","n":0.117}}},{"i":120,"$":{"0":{"v":"ES2018","n":1},"1":{"v":"## List of New Features\n\n- Rest/Spread Properties\n- Asynchronous iteration\n- `Promise.prototype.finally()`\n- Regular Expression improvements\n  - RegExp lookbehind assertions: match a string depending on what precedes it\n  - Unicode property escapes `\\p{…}` and `\\P{…}`\n  - Named capturing groups\n  - The `s` flag for regular expressions\n\n### Rest/Spread Properties\n\nES6 introduced the concept of a rest element when working with array destructuring:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n[first, second, ...others] = numbers\nand spread elements:\n\nconst numbers = [1, 2, 3, 4, 5]\nconst sum = (a, b, c, d, e) => a + b + c + d + e\nconst sumOfNumbers = sum(...numbers)\n```\n\nES2018 introduces the same but for objects.\n\nRest properties:\n\n```javascript\nconst { first, second, ...others } = { first: 1, second: 2, third: 3, fourth: 4, fifth: 5 }\n\nfirst // 1\nsecond // 2\nothers // { third: 3, fourth: 4, fifth: 5 }\n```\n\nSpread properties allow to create a new object by combining the properties of the object passed after the spread operator:\n\n```javascript\nconst items = { first, second, ...others }\nitems //{ first: 1, second: 2, third: 3, fourth: 4, fifth: 5 }\n```\n","n":0.076}}},{"i":121,"$":{"0":{"v":"ES2017","n":1},"1":{"v":"## List of Changes\n\n- Async functions\n- String padding\n- `Object.values()`\n- `Object.entries()`\n- `Object.getOwnPropertyDescriptors()`\n- Trailing commas in function parameter lists and calls\n- Shared memory and atomics\n\n### Async Functions\n\nES2017 introduced the concept of async functions, and it’s the most important change introduced in this ECMAScript edition.\n\nAsync functions are a combination of promises and generators to reduce the boilerplate around promises, and the “don’t break the chain” limitation of chaining promises.\n\n#### Why they are useful\n\nIt’s a higher level abstraction over promises.\n\nWhen Promises were introduced in ES6, they were meant to solve a problem with asynchronous code, and they did, but over the 2 years that separated ES6 and ES2017, it was clear that promises could not be the final solution. Promises were introduced to solve the famous callback hell problem, but they introduced complexity on their own, and syntax complexity. They were good primitives around which a better syntax could be exposed to the developers: enter async functions.\n\n#### Quick Example\n\nA quick example\nCode making use of asynchronous functions can be written as\n\n```javascript\nfunction doSomethingAsync() {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve('I did something'), 3000)\n    })\n}\n\nasync function doSomething() {\n    console.log(await doSomethingAsync())\n}\n\nconsole.log('Before')\ndoSomething()\nconsole.log('After')\n```\n\nThe above code will print the following to the browser console:\n\n```console\nBefore\nAfter\nI did something //after 3s\n```\n\n### String Padding\n\nThe purpose of string padding is to add characters to a string, so it reaches a specific length.\n\n`padStart(targetLength [, padString])`\n\n`padEnd(targetLength [, padString])`\n\nSample usage:\n\n```javascript\npadStart()\t\n‘test’.padStart(4)\t// ‘test’\n‘test’.padStart(5)\t// ‘ test’\n‘test’.padStart(8)\t// ‘    test’\n‘test’.padStart(8, ‘abcd’)\t// ‘abcdtest’\n\npadEnd()\t\n‘test’.padEnd(4)  //\t‘test’\n‘test’.padEnd(5)\t// ‘test ‘\n‘test’.padEnd(8)\t// ‘test    ‘\n‘test’.padEnd(8,  // ‘abcd’)\t‘testabcd’\n```\n\n### Object.values()\n\nThis method returns an array containing all the object own property values.\n\nUsage:\n\n```javascript\nconst person = { name: 'Fred', age: 87 }\nObject.values(person) // ['Fred', 87]\nObject.values() \n\n// also works with arrays!:\n\nconst people = ['Fred', 'Tony']\nObject.values(people) // ['Fred', 'Tony']\n```\n\n### Object.entries()\n\nThis method returns an array containing all the object own properties, as an array of [key, value] pairs.\n\nUsage:\n\n```javascript\nconst person = { name: 'Fred', age: 87 }\nObject.entries(person) // [['name', 'Fred'], ['age', 87]]\nObject.entries() \n\n//also works with arrays:\n\nconst people = ['Fred', 'Tony']\nObject.entries(people) // [['0', 'Fred'], ['1', 'Tony']]\n```\n\n### getOwnPropertyDescriptors()\n\nThis method returns all own (non-inherited) properties descriptors of an object.\n\nAny object in JavaScript has a set of properties, and each of these properties has a descriptor.\n\nA descriptor is a set of attributes of a property, and it’s composed by a subset of the following:\n\n- value: the value of the property\n- writable: true the property can be changed\n- get: a getter function for the property, called when the property is read\n- set: a setter function for the property, called when the property is set to a value\n- configurable: if false, the property cannot be removed nor any attribute can be changed, except its value\n- enumerable: true if the property is enumerable\n\n`Object.getOwnPropertyDescriptors(obj)` accepts an object, and returns an object with the set of descriptors.\n\n#### In what way is this useful?\n\nES6 gave us `Object.assign()`, which copies all enumerable own properties from one or more objects, and return a new object.\n\nHowever there is a problem with that, because it does not correctly copies properties with non-default attributes.\n\nIf an object for example has just a setter, it’s not correctly copied to a new object, using `Object.assign()`.\n\nFor example with\n\n```javascript\nconst person1 = {\n    set name(newName) {\n        console.log(newName)\n    }\n}\n```\n\nThis won’t work:\n\n```javascript\nconst person2 = {}\nObject.assign(person2, person1)\n```\n\nBut this will work:\n\n```javascript\nconst person3 = {}\nObject.defineProperties(person3,\n  Object.getOwnPropertyDescriptors(person1))\n```\n\nAs you can see with a simple console test:\n\n```javascript\nperson1.name = 'x'\n\"x\"\n\nperson2.name = 'x'\n\nperson3.name = 'x'\n\"x\"\n```\n\nperson2 misses the setter, it was not copied over.\n\nThe same limitation goes for shallow cloning objects with `Object.create()`.\n\n### Trailing Commas\n\nThis feature allows to have trailing commas in function declarations, and in functions calls:\n\n```javascript\nconst doSomething = (var1, var2,) => {\n  //...\n}\n\ndoSomething('test2', 'test2',)\n```\n\nThis change will encourage developers to stop the ugly “comma at the start of the line” habit.\n\n### Shared Memory and Atomics\n\nWebWorkers are used to create multithreaded programs in the browser.\n\nThey offer a messaging protocol via events. Since ES2017, you can create a shared memory array between web workers and their creator, using a `SharedArrayBuffer`.\n\nSince it’s unknown how much time writing to a shared memory portion takes to propagate, **Atomics** are a way to enforce that when reading a value, any kind of writing operation is completed.\n\n## Source\n\nMost of these notes are copied from [this site](https://flaviocopes.com/es2017/)\n\n\n","n":0.039}}},{"i":122,"$":{"0":{"v":"Es2016","n":1},"1":{"v":"## List of Changes\n\nJust two changes:\n\n1. Array.prototype.includes\n2. Exponentiation Operator\n\n### Array.prototype.includes()\n\nWith ES6 and lower, to check if an array contained an element you had to use indexOf, which checks the index in the array, and returns -1 if the element is not there.\n\nSince -1 is evaluated as a true value, you could not do for example\n\n```javascript\nif (![1,2].indexOf(3)) {\n  console.log('Not found')\n}\n```\n\nWith this feature introduced in ES2016 we can do\n\n```javascript\nif (![1,2].includes(3)) {\n  console.log('Not found')\n}\n```\n\n### Exponentiation Operator **\n\nThe exponentiation operator ** is the equivalent of Math.pow(), but brought into the language instead of being a library function.\n\n```javascript\nMath.pow(4, 2) == 4 ** 2\n```\n\n","n":0.101}}},{"i":123,"$":{"0":{"v":"Electron","n":1},"1":{"v":"## General Info\n\nElectron is a framework for creating native applications with Javascript, HTML and CSS.\n\n## Preload Script\n\nElectron's main process is a Node.js environment that has full operating system access. On top of [Electron modules](https://www.electronjs.org/docs/latest/api/app), you can also access [Node.js built-ins](https://nodejs.org/dist/latest/docs/api/), as well as any packages installed via npm. On the other hand, renderer processes run web pages and do not run Node.js by default for security reasons.\n\nTo bridge Electron's different process types together, we will need to use a special script called a preload.\n\n## Inter Process Communication\n\nHere is the [guide](https://www.electronjs.org/docs/latest/tutorial/ipc)\n","n":0.105}}},{"i":124,"$":{"0":{"v":"Dom","n":1},"1":{"v":"## General Info\n\nWhen nothing in particular has focus, document.body acts as the target node of key events.\n\nIt’s important to note that when using querySelectorAll, the return value is not an array. It looks like an array, and it somewhat acts like an array, but it’s really a “nodelist”. The big distinction is that several array methods are missing from nodelists. One solution, if problems arise, is to convert the nodelist into an array. You can do this with Array.from() or the spread operator.\n\n### Relational Selectors\n\n[Documentation can be found here](https://developer.mozilla.org/en-US/docs/Web/API/Element)\n\nExamples:\n\npreviousElementSibling\n\nfirstElementChild\n","n":0.106}}},{"i":125,"$":{"0":{"v":"Destructuring","n":1},"1":{"v":"## General Info\n\nThe destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n```javascript\nlet a, b, rest;\n[a, b] = [10, 20];\nconsole.log(a); // 10\nconsole.log(b); // 20\n\n[a, b, ...rest] = [10, 20, 30, 40, 50];\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // [30, 40, 50]\n\n({ a, b } = { a: 10, b: 20 });\nconsole.log(a); // 10\nconsole.log(b); // 20\n\n// Stage 4(finished) proposal\n({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // {c: 30, d: 40}\n```\n","n":0.105}}},{"i":126,"$":{"0":{"v":"Dependency Injection","n":0.707},"1":{"v":"## General Info\n\nDependency injection (DI) is a programming pattern in which a dependency is passed using the parameters instead of instantiating it within the function or class. DI enables creating isolated individual components within application code and makes it easy to switch those dependencies in the future as the requirement changes. Passing parameters as a dependency also allows to easily unit test those components in isolation by injecting their mocked version.\n","n":0.119}}},{"i":127,"$":{"0":{"v":"Data Types","n":0.707},"1":{"v":"\n## General Info\n\nThere are 8 data types, the first six are called *primitives*:\n\n1. **Numbers** (Interger or Floating Point)\n\n2. **BigInt** - is created by appending a **n** to the end of an integer.\n\n3. **String** - created by ```\" \", ' ', ` ` ```\n\n4. **Boolean** - true or false\n\n5. **\"null\"** value - in JS represents \"nothing\", \"empty\" or \"unknown\"\n\n6. **\"undefined\"** value - \"value is not assigned\"\n\n7. **Object** - for complex data structures\n\n8. **Symbol** - for unique identifiers\n\n## Additional Notes\n\n```typeof null``` returns ```\"object\"``` - That’s an officially recognized error in typeof, coming from very early days of JavaScript and kept for compatibility. Definitely, null is not an object. It is a special value with a separate type of its own. The behavior of typeof is wrong here.\n\n```typeof alert``` returns ```function``` - There’s no special “function” type in JavaScript. Functions belong to the object type. But typeof treats them differently, returning \"function\". That also comes from the early days of JavaScript. Technically, such behavior isn’t correct, but can be convenient in practice.\n\n```typeof``` is an operator not a function seeing ```typeof(x)``` is just syntactic sugar.\n","n":0.074}}},{"i":128,"$":{"0":{"v":"CORS","n":1},"1":{"v":"## General Info\n\nCross Origin Resource Sharing is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served.\n\n```javascript\nfetch('url.url.com/api', {\n  mode: 'cors'\n});\n```\n\nSimply adding the `{mode: 'cors'}` after the URL, as shown above, will solve our problems for now. In the future, however, you may want to look further into the implications of this restriction.\n\n## From Javascript.info\n\nCross-origin requests – those sent to another domain (even a subdomain) or protocol or port – require special headers from the remote side.\n\n### Safe requests\n\nThere are two types of cross-origin requests:\n\n1. Safe requests.\n2. All the others.\n\nSafe Requests are simpler to make, so let’s start with them.\n\nA request is safe if it satisfies two conditions:\n\n1. Safe method: GET, POST or HEAD\n2. Safe headers – the only allowed custom headers are:\n    - `Accept`,\n    - `Accept-Language`,\n    - `Content-Language`,\n    - `Content-Type` with the value:\n        - `application/x-www-form-urlencoded` OR\n        - `multipart/form-data` OR\n        - `text/plain`\n\nAny other request is considered “unsafe”. For instance, a request with `PUT` method or with an API-Key HTTP-header does not fit the limitations.\n\n**The essential difference is that a safe request can be made with a `<form>` or a `<script>`, without any special methods.**\n\nSo, even a very old server should be ready to accept a safe request.\n\nContrary to that, requests with non-standard headers or e.g. method DELETE can’t be created this way. For a long time JavaScript was unable to do such requests. So an old server may assume that such requests come from a privileged source, “because a webpage is unable to send them”.\n\nWhen we try to make a unsafe request, the browser sends a special “preflight” request that asks the server – does it agree to accept such cross-origin requests, or not?\n\nAnd, unless the server explicitly confirms that with headers, an unsafe request is not sent.\n\n#### CORS for safe requests\n\nIf a request is cross-origin, the browser always adds the Origin header to it.\n\n```header\nGET /request\nHost: anywhere.com\nOrigin: https://javascript.info\n```\n\nAs you can see, the `Origin` header contains exactly the origin (domain/protocol/port), without a path.\n\nThe server can inspect the `Origin` and, if it agrees to accept such a request, add a special header `Access-Control-Allow-Origin` to the response. That header should contain the allowed origin (in our case `https://javascript.info`), or a star `*`. Then the response is successful, otherwise it’s an error.\n\nThe browser plays the role of a trusted mediator here:\n\n1. It ensures that the correct `Origin` is sent with a cross-origin request.\n2. It checks for permitting `Access-Control-Allow-Origin` in the response, if it exists, then JavaScript is allowed to access the response, otherwise it fails with an error.\n\n![CORS Image 1](/assets/cors1.png)\n\nHere’s an example of a permissive server response:\n\n```header\n200 OK\nContent-Type:text/html; charset=UTF-8\nAccess-Control-Allow-Origin: https://javascript.info\n```\n\n#### Response headers\n\nFor cross-origin request, by default JavaScript may only access so-called “safe” response headers:\n\n- `Cache-Control`\n- `Content-Language`\n- `Content-Type`\n- `Expires`\n- `Last-Modified`\n- `Pragma`\n\nAccessing any other response header causes an error.\n\n**There’s no Content-Length header in the list!**\n\nThis header contains the full response length. So, if we’re downloading something and would like to track the percentage of progress, then an additional permission is required to access that header (see below).\n\nTo grant JavaScript access to any other response header, the server must send the Access-Control-Expose-Headers header. It contains a comma-separated list of unsafe header names that should be made accessible.\n\nFor example:\n\n```header\n200 OK\nContent-Type:text/html; charset=UTF-8\nContent-Length: 12345\nAPI-Key: 2c9de507f2c54aa1\nAccess-Control-Allow-Origin: https://javascript.info\nAccess-Control-Expose-Headers: Content-Length,API-Key\n```\n\nWith such an Access-Control-Expose-Headers header, the script is allowed to read the Content-Length and API-Key headers of the response.\n\n### \"Unsafe\" Requests\n\nWe can use any HTTP-method: not just `GET/POST`, but also `PATCH`, `DELETE` and others.\n\nSome time ago no one could even imagine that a webpage could make such requests. So there may still exist webservices that treat a non-standard method as a signal: “That’s not a browser”. They can take it into account when checking access rights.\n\nSo, to avoid misunderstandings, any “unsafe” request – that couldn’t be done in the old times, the browser does not make such requests right away. First, it sends a preliminary, so-called “preflight” request, to ask for permission.\n\nA preflight request uses the method `OPTIONS`, no body and three headers:\n\n- `Access-Control-Request-Method` header has the method of the unsafe request.\n- `Access-Control-Request-Headers` header provides a comma-separated list of its unsafe HTTP-headers.\n- `Origin` header tells from where the request came. (such as [](https://javascript.info))\n\nIf the server agrees to serve the requests, then it should respond with empty body, status 200 and headers:\n\n- `Access-Control-Allow-Origin` must be either `*` or the requesting origin, such as [](https://javascript.info), to allow it.\n- `Access-Control-Allow-Methods` must have the allowed method.\n- `Access-Control-Allow-Headers` must have a list of allowed headers.\n- Additionally, the header Access-Control-Max-Age may specify a number of seconds to cache the permissions. So the browser won’t have to send a preflight for subsequent requests that satisfy given permissions.\n\n![CORS Image 1](/assets/cors2.png)\n\nLet’s see how it works step-by-step on the example of a cross-origin PATCH request (this method is often used to update data):\n\n```javascript\nlet response = await fetch('https://site.com/service.json', {\n  method: 'PATCH',\n  headers: {\n    'Content-Type': 'application/json',\n    'API-Key': 'secret'\n  }\n});\n```\n\nThere are three reasons why the request is unsafe (one is enough):\n\n- Method `PATCH`\n- `Content-Type` is not one of: `application/x-www-form-urlencoded`, `multipart/form-data`, `text/plain`.\n- “Unsafe” `API-Key` header.\n\n#### Step 1 (preflight request)\n\nPrior to sending such a request, the browser, on its own, sends a preflight request that looks like this:\n\n```header\nOPTIONS /service.json\nHost: site.com\nOrigin: https://javascript.info\nAccess-Control-Request-Method: PATCH\nAccess-Control-Request-Headers: Content-Type,API-Key\n```\n\n- Method: `OPTIONS`.\n- The path – exactly the same as the main request: `/service.json`.\n- Cross-origin special headers:\n  - `Origin` – the source origin.\n  - `Access-Control-Request-Method` – requested method.\n  - `A`ccess-Control-Request-Headers` – a comma-separated list of “unsafe” headers.\n\n#### Step 2 (preflight response)\n\nThe server should respond with status 200 and the headers:\n\n- `Access-Control-Allow-Origin: https://javascript.info`\n- `Access-Control-Allow-Methods: PATCH`\n- `Access-Control-Allow-Headers: Content-Type,API-Key`.\n\nThat allows future communication, otherwise an error is triggered.\n\nIf the server expects other methods and headers in the future, it makes sense to allow them in advance by adding them to the list.\n\nFor example, this response also allows `PUT`, `DELETE` and additional headers:\n\n```header\n200 OK\nAccess-Control-Allow-Origin: https://javascript.info\nAccess-Control-Allow-Methods: PUT,PATCH,DELETE\nAccess-Control-Allow-Headers: API-Key,Content-Type,If-Modified-Since,Cache-Control\nAccess-Control-Max-Age: 86400\n```\n\nNow the browser can see that `PATCH` is in `Access-Control-Allow-Methods` and `Content-Type,API-Key` are in the list `Access-Control-Allow-Headers`, so it sends out the main request.\n\nIf there’s the header `Access-Control-Max-Age` with a number of seconds, then the preflight permissions are cached for the given time. The response above will be cached for 86400 seconds (one day). Within this timeframe, subsequent requests will not cause a preflight. Assuming that they fit the cached allowances, they will be sent directly.\n\n#### Step 3 (actual request)\n\nWhen the preflight is successful, the browser now makes the main request. The process here is the same as for safe requests.\n\nThe main request has the `Origin` header (because it’s cross-origin):\n\n```header\nPATCH /service.json\nHost: site.com\nContent-Type: application/json\nAPI-Key: secret\nOrigin: https://javascript.info\n```\n\n#### Step 4 (actual response)\n\nThe server should not forget to add Access-Control-Allow-Origin to the main response. A successful preflight does not relieve from that:\n\n```header\nAccess-Control-Allow-Origin: https://javascript.info\n```\n\nThen JavaScript is able to read the main server response.\n\n**Please note:**\n\nPreflight request occurs “behind the scenes”, it’s invisible to JavaScript.\n\nJavaScript only gets the response to the main request or an error if there’s no server permission.\n\n### Credentials\n\nA cross-origin request initiated by JavaScript code by default does not bring any credentials (cookies or HTTP authentication).\n\nThat’s uncommon for HTTP-requests. Usually, a request to [http://site.com](http://site.com) is accompanied by all cookies from that domain. Cross-origin requests made by JavaScript methods on the other hand are an exception.\n\nFor example, `fetch('http://another.com')` does not send any cookies, even those (!) that belong to `another.com` domain.\n\nWhy?\n\nThat’s because a request with credentials is much more powerful than without them. If allowed, it grants JavaScript the full power to act on behalf of the user and access sensitive information using their credentials.\n\nDoes the server really trust the script that much? Then it must explicitly allow requests with credentials with an additional header.\n\nTo send credentials in fetch, we need to add the option credentials: \"include\", like this:\n\n```javascript\nfetch('http://another.com', {\n  credentials: \"include\"\n});\n```\n\nNow fetch sends cookies originating from `another.com` with request to that site.\n\nIf the server agrees to accept the request with credentials, it should add a header `Access-Control-Allow-Credentials: true` to the response, in addition to `Access-Control-Allow-Origin`.\n\nFor example:\n\n```header\n200 OK\nAccess-Control-Allow-Origin: https://javascript.info\nAccess-Control-Allow-Credentials: true\n```\n\nPlease note: `Access-Control-Allow-Origin` is prohibited from using a star `*` for requests with credentials. Like shown above, it must provide the exact origin there. That’s an additional safety measure, to ensure that the server really knows who it trusts to make such requests.\n\n#### Why do we need Origin?\n\nAs you probably know, there’s HTTP-header Referer, that usually contains an url of the page which initiated a network request.\n\nFor instance, when fetching [](http://google.com) from [](http://javascript.info/some/url), the headers look like this:\n\n```header\nAccept: */*\nAccept-Charset: utf-8\nAccept-Encoding: gzip,deflate,sdch\nConnection: keep-alive\nHost: google.com\nOrigin: http://javascript.info\nReferer: http://javascript.info/some/url\n```\n\nAs you can see, both `Referer` and `Origin` are present.\n\nThe questions:\n\nWhy `Origin` is needed, if `Referer` has even more information?\nIs it possible that there’s no `Referer` or `Origin`, or is it incorrect?\n\n1. We need `Origin`, because sometimes `Referer` is absent. For instance, when we fetch HTTP-page from `HTTPS` (access less secure from more secure), then there’s no `Referer`.\n\n2. The [[devnotes.content-security-policy]] may forbid sending a Referer.\n\n3. As we’ll see, fetch has options that prevent sending the Referer and even allow to change it (within the same site).\n\n4. By specification, `Referer` is an optional HTTP-header.\n\n5. Exactly because `Referer` is unreliable, `Origin` was invented. The browser guarantees correct `Origin` for cross-origin requests.\n","n":0.026}}},{"i":129,"$":{"0":{"v":"Constructors","n":1},"1":{"v":"## General Info\n\n```javascript\nfunction Apple(color, weight) {\n    this.color = color;\n    this.weight = weight;\n}\n```\n\nIf you’re using constructors to make your objects it is best to define functions on the prototype of that object. Doing so means that a single instance of each function will be shared between all of the Student objects. If we declare the function directly in the constructor, like we did when they were first introduced, that function would be duplicated every time a new Student is created.\n\n## Recommended Method for Prototypal Inheretance\n\nThe recommended way of setting the prototype of an object is Object.create (here is the documentation for that method). Object.create very simply returns a new object with the specified prototype and any additional properties you want to add. For our purposes, you use it like so:\n\n```javascript\nfunction Student() {\n}\n\nStudent.prototype.sayName = function() {\n  console.log(this.name)\n}\n\nfunction EighthGrader(name) {\n  this.name = name\n  this.grade = 8\n}\n\nEighthGrader.prototype = Object.create(Student.prototype)\n\nconst carl = new EighthGrader(\"carl\")\ncarl.sayName() // console.logs \"carl\"\ncarl.grade // 8\n```\n\nAfter creating the constructor for EighthGrader, we set its prototype to a new object that has a copy of Student.prototype.\n\nA warning… this doesn’t work:\n\n```javascript\nEighthGrader.prototype = Student.prototype\n```\n\n## Constructor Method in Classes\n\nThe constructor method is a special method for creating and initializing an object created with a class. There can only be one special method with the name \"constructor\" in a class. A SyntaxError will be thrown if the class contains more than one occurrence of a constructor method.\n\nA constructor can use the super keyword to call the constructor of the super class.\n","n":0.064}}},{"i":130,"$":{"0":{"v":"Closure","n":1},"1":{"v":"## Definition\n\nIn JavaScript, a closure is any function that keeps reference to variables from its parent’s scope even after the parent has returned.\n\nThe concept of closure is the idea that functions retain their scope even if they are passed around and called outside of that scope.\n\nClosures allow us to create private variables and functions. Private functions are functions that are used in the workings of our objects that are not intended to be used elsewhere in our program. In other words, even though our objects might only do one or two things, we are free to split our functions up as much as we want (allowing for cleaner, easier to read code) and only export the functions that the rest of the program is going to use.\n\n## Example / Explanation\n\nClosures ties in very closely with Lexical Scope. A better example of how the closure side of things works, can be seen when returning a function reference - a more practical usage. Inside our scope, we can return things so that they’re available in the parent scope:\n\n```javascript\nvar sayHello = function (name) {\n  var text = 'Hello, ' + name;\n  return function () {\n    console.log(text);\n  };\n};\n```\n\nThe closure concept we’ve used here makes our scope inside sayHello inaccessible to the public scope. Calling the function alone will do nothing as it returns a function:\n\n```javascript\nsayHello('Todd'); // nothing happens, no errors, just silence...\n```\n\nThe function returns a function, which means it needs assignment, and then calling:\n\n```javascript\nvar helloTodd = sayHello('Todd');\nhelloTodd(); // will call the closure and log 'Hello, Todd'\n```\n\nOkay, I lied, you can call it, and you may have seen functions like this, but this will call your closure:\n\n```javascript\nsayHello('Bob')(); // calls the returned function without assignment\n```\n\nAngularJS uses the above technique for its $compile method, where you pass the current scope reference into the closure:\n\n```javascript\n$compile(template)(scope);\n```\n\nMeaning we could guess that their code would (over-simplified) look like this:\n\n```javascript\nvar $compile = function (template) {\n  // some magic stuff here\n  // scope is out of scope, though...\n  return function (scope) {\n    // access to `template` and `scope` to do magic with too\n  };\n};\n```\n\nA function doesn’t have to return in order to be called a closure though. Simply accessing variables outside of the immediate lexical scope creates a closure.\n","n":0.052}}},{"i":131,"$":{"0":{"v":"Classes","n":1},"1":{"v":"## General Info\n\nIntroduced in ES6 with the `class` keyword.\n\nJavaScript provides a very flexible object system without the need to rely on `class`. So why did we add `class` in the first place? Because a lot of people are familiar with the class paradigm from other languages, and people kept trying to emulate it in JavaScript.\n\n>Inheritance in JavaScript is so easy, it confuses people who expect it to >take effort. To make it harder, we added `class`.\n\nSeveral popular libraries implemented pseudo-class inheritance in JavaScript using the delegate prototype chain to emulate class inheritance. Adding an official `class` keyword provided a single canonical way to emulate class inheritance in JavaScript — but in my opinion, you should avoid it altogether.\n\nIn JavaScript, composition is simpler, more expressive, and more flexible than class inheritance. I can’t think of a single good use case where `class` is a better fit than the native prototypal alternatives.\n\nOnce you start thinking in terms of class-free objects and inheritance using prototypes, and concatenation, you begin to really appreciate how simple, powerful, and flexible JavaScript’s object system can be.\n\n```javascript\nclass User {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHi() {\n    alert(this.name);\n  }\n\n}\n\n// Usage:\nlet user = new User(\"John\");\nuser.sayHi();\n```\n\n> No comma between class methods\n> A common pitfall for novice developers is to put a comma between class methods, which would result in a syntax error.\n>The notation here is not to be confused with object literals. Within the class, no commas are required.\n\n### What is a class?\n\nWhat class User {...} construct really does is:\n\n1. Creates a function named User, that becomes the result of the class declaration. The function code is taken from the constructor method (assumed empty if we don’t write such method).\n2. Stores class methods, such as sayHi, in User.prototype.\n\n### Hoisting\n\nAn important difference between function declarations and class declarations is that while functions can be called in code that appears before they are defined, classes must be defined before they can be constructed. Code like the following will throw a ReferenceError:\n\n```javascript\nconst p = new Rectangle(); // ReferenceError\n\nclass Rectangle {}\n```\n\n### Not Just Syntactic Sugar\n\nSometimes people say that class is a “syntactic sugar” (syntax that is designed to make things easier to read, but doesn’t introduce anything new), because we could actually declare the same thing without using the class keyword at all.\n\nStill, there are important differences.\n\n1. First, a function created by class is labelled by a special internal property `[[IsClassConstructor]]`: true. So it’s not entirely the same as creating it manually. The language checks for that property in a variety of places. For example, unlike a regular function, it must be called with `new`\n\n2. Class methods are non-enumerable. A class definition sets `enumerable` flag to false for all methods in the \"prototype\". That’s good, because if we for..in over an object, we usually don’t want its class methods.\n\n3. Classes always use strict. All code inside the class construct is automatically in strict mode.\n\n### Class Expression\n\nHere is a class expression:\n\n```javascript\nlet User = class {\n  sayHi() {\n    alert(\"Hello\");\n  }\n};\n```\n\nIf a class expression has a name, it’s visible inside the class only:\n\n```javascript\n// \"Named Class Expression\"\n// (no such term in the spec, but that's similar to Named Function Expression)\nlet User = class MyClass {\n  sayHi() {\n    alert(MyClass); // MyClass name is visible only inside the class\n  }\n};\n\nnew User().sayHi(); // works, shows MyClass definition\n\nalert(MyClass); // error, MyClass name isn't visible outside of the class\n```\n\nWe can even make classes dynamically “on-demand”, like this:\n\n```javascript\nfunction makeClass(phrase) {\n  // declare a class and return it\n  return class {\n    sayHi() {\n      alert(phrase);\n    }\n  };\n}\n\n// Create a new class\nlet User = makeClass(\"Hello\");\n\nnew User().sayHi(); // Hello\n```\n\n### Getters and Setters in Classes\n\nJust like literal objects, classes may include getters/setters, computed properties etc.\n\n```javascript\nclass User {\n\n  constructor(name) {\n    // invokes the setter\n    this.name = name;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    if (value.length < 4) {\n      alert(\"Name is too short.\");\n      return;\n    }\n    this._name = value;\n  }\n\n}\n\nlet user = new User(\"John\");\nalert(user.name); // John\n\nuser = new User(\"\"); // Name is too short.\n```\n\n#### Computed Names\n\nHere’s an example with a computed method name using brackets [...]:\n\n```javascript\nclass User {\n\n  ['say' + 'Hi']() {\n    alert(\"Hello\");\n  }\n\n}\n\nnew User().sayHi();\n```\n\n### Class Fields\n\n> Old browsers may need a polyfill\n\n“Class fields” is a syntax that allows to add any properties.\n\nPreviously, our classes only had methods.\n\n“Class fields” is a syntax that allows to add any properties.\n\nThe important difference of class fields is that they are set on individual objects, not User.prototype:\n\n```javascript\nclass User {\n  name = \"John\";\n\n  sayHi() {\n    alert(`Hello, ${this.name}!`);\n  }\n}\n\nnew User().sayHi(); // Hello, John!\nalert(user.name); // John\nalert(User.prototype.name); // undefined\n```\n\n#### Bound Methods with Class Fields\n\nAs demonstrated in the chapter Function binding functions in JavaScript have a dynamic this. It depends on the context of the call.\n\nSo if an object method is passed around and called in another context, this won’t be a reference to its object any more.\n\nFor instance, this code will show undefined:\n\n```javascript\nclass Button {\n  constructor(value) {\n    this.value = value;\n  }\n\n  click() {\n    alert(this.value);\n  }\n}\n\nlet button = new Button(\"hello\");\n\nsetTimeout(button.click, 1000); // undefined\n```\n\nThe problem is called \"losing this\".\n\nThere are two approaches to fixing it, as discussed in the chapter Function binding:\n\n1. Pass a wrapper-function, such as `setTimeout(() => button.click(), 1000)`.\n2. Bind the method to object, e.g. in the constructor.\n\nClass fields provide another, quite elegant syntax:\n\n```javascript\nclass Button {\n  constructor(value) {\n    this.value = value;\n  }\n  click = () => {\n    alert(this.value);\n  }\n}\n\nlet button = new Button(\"hello\");\n\nsetTimeout(button.click, 1000); // hello\n```\n\nThe class field click = () => {...} is created on a per-object basis, there’s a separate function for each Button object, with this inside it referencing that object. We can pass button.click around anywhere, and the value of this will always be correct.\n\nThat’s especially useful in browser environment, for event listeners.\n\n### Static Initialization Blocks\n\nClass static initialization blocks allow flexible initialization of class static properties including the evaluation of statements during initialization, and granting access to private scope.\n\nMultiple static blocks can be declared, and these can be interleaved with the declaration of static properties and methods (all static items are evaluated in declaration order).\n\n```javascript\nclass ClassWithStaticInitializationBlock {\n  static staticProperty1 = 'Property 1';\n  static staticProperty2;\n  static {\n    this.staticProperty2 = 'Property 2';\n  }\n}\n\nconsole.log(ClassWithStaticInitializationBlock.staticProperty1);\n// output: \"Property 1\"\nconsole.log(ClassWithStaticInitializationBlock.staticProperty2);\n// output: \"Property 2\"\n```\n\n### Static Methods and Properties\n\nThe static keyword defines a static method or property for a class. Static members (properties and methods) are called without instantiating their class and **cannot** be called through a class instance. Static methods are often used to create utility functions for an application, whereas static properties are useful for caches, fixed-configuration, or any other data you don't need to be replicated across instances.\n\n### Sub classing with extends\n\nThe extends keyword is used in class declarations or class expressions to create a class as a child of another class.\n\n```javascript\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name); // call the super class constructor and pass in the name parameter\n  }\n\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nlet d = new Dog('Mitzie');\nd.speak(); // Mitzie barks.\n```\n\nIf there is a constructor present in the subclass, it needs to first call super() before using \"this\".\n\nOne may also extend traditional function-based \"classes\":\n\n```javascript\nfunction Animal (name) {\n  this.name = name;\n}\n\nAnimal.prototype.speak = function () {\n  console.log(`${this.name} makes a noise.`);\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nlet d = new Dog('Mitzie');\nd.speak(); // Mitzie barks.\n\n// For similar methods, the child's method takes precedence over parent's method\n```\n\n### Mixin's\n\nAbstract subclasses or mix-ins are templates for classes. An ECMAScript class can only have a single superclass, so multiple inheritance from tooling classes, for example, is not possible. The functionality must be provided by the superclass.\n\nA function with a superclass as input and a subclass extending that superclass as output can be used to implement mix-ins in ECMAScript:\n\n```javascript\nlet calculatorMixin = Base => class extends Base {\n  calc() { }\n};\n\nlet randomizerMixin = Base => class extends Base {\n  randomize() { }\n};\n```\n\nA class that uses these mix-ins can then be written like this:\n\n```javascript\nclass Foo { }\nclass Bar extends calculatorMixin(randomizerMixin(Foo)) { }\n```\n","n":0.028}}},{"i":132,"$":{"0":{"v":"Functional to OOP Example","n":0.5},"1":{"v":"## Functional Example\n\n```javascript\nfunction Clock({ template }) {\n  \n    let timer;\n  \n    function render() {\n      let date = new Date();\n  \n      let hours = date.getHours();\n      if (hours < 10) hours = '0' + hours;\n  \n      let mins = date.getMinutes();\n      if (mins < 10) mins = '0' + mins;\n  \n      let secs = date.getSeconds();\n      if (secs < 10) secs = '0' + secs;\n  \n      let output = template\n        .replace('h', hours)\n        .replace('m', mins)\n        .replace('s', secs);\n  \n      console.log(output);\n    }\n  \n    this.stop = function() {\n      clearInterval(timer);\n    };\n  \n    this.start = function() {\n      render();\n      timer = setInterval(render, 1000);\n    };\n  \n  }\n  \n  let clock = new Clock({template: 'h:m:s'});\n  clock.start();\n  ```\n\n  OOP Class Example\n\n  ```javascript\n  class Clock {\n  constructor({ template }) {\n    this.template = template;\n  }\n\n  render() {\n    let date = new Date();\n\n    let hours = date.getHours();\n    if (hours < 10) hours = '0' + hours;\n\n    let mins = date.getMinutes();\n    if (mins < 10) mins = '0' + mins;\n\n    let secs = date.getSeconds();\n    if (secs < 10) secs = '0' + secs;\n\n    let output = this.template\n      .replace('h', hours)\n      .replace('m', mins)\n      .replace('s', secs);\n\n    console.log(output);\n  }\n\n  stop() {\n    clearInterval(this.timer);\n  }\n\n  start() {\n    this.render();\n    this.timer = setInterval(() => this.render(), 1000);\n  }\n}\n\n\nlet clock = new Clock({template: 'h:m:s'});\nclock.start();\n```\n","n":0.071}}},{"i":133,"$":{"0":{"v":"Callback Functions","n":0.707},"1":{"v":"## General Info\n\nA simple callback function in an event handler:\n\n```javascript\nmyDiv.addEventListener(\"click\", function(){\n  // do something!\n})\n```\n\n## Callback Hell\n\n```javascript\nfs.readdir(source, function (err, files) {\n  if (err) {\n    console.log('Error finding files: ' + err)\n  } else {\n    files.forEach(function (filename, fileIndex) {\n      console.log(filename)\n      gm(source + filename).size(function (err, values) {\n        if (err) {\n          console.log('Error identifying file size: ' + err)\n        } else {\n          console.log(filename + ' : ' + values)\n          aspect = (values.width / values.height)\n          widths.forEach(function (width, widthIndex) {\n            height = Math.round(width / aspect)\n            console.log('resizing ' + filename + 'to ' + height + 'x' + height)\n            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {\n              if (err) console.log('Error writing file: ' + err)\n            })\n          }.bind(this))\n        }\n      })\n    })\n  }\n})\n```\n\n### Tips to Fix Callback Hell\n\n1. Keep your code shallow\n\n    Instead of this:\n\n    ```javascript\n    var form = document.querySelector('form')\n    form.onsubmit = function (submitEvent) {\n    var name = document.querySelector('input').value\n    request({\n        uri: \"http://example.com/upload\",\n        body: name,\n        method: \"POST\"\n    }, function (err, response, body) {\n        var statusMessage = document.querySelector('.status')\n        if (err) return statusMessage.value = err\n        statusMessage.value = body\n    })\n    }\n    ```\n\n    do this:\n\n    ```javascript\n    document.querySelector('form').onsubmit = formSubmit\n\n    function formSubmit (submitEvent) {\n    var name = document.querySelector('input').value\n    request({\n        uri: \"http://example.com/upload\",\n        body: name,\n        method: \"POST\"\n    }, postResponse)\n    }\n\n    function postResponse (err, response, body) {\n    var statusMessage = document.querySelector('.status')\n    if (err) return statusMessage.value = err\n    statusMessage.value = body\n    }\n    ```\n\n2. Modularize\n\n    Write small modules that each do one thing, and assemble them into other modules that do a bigger thing. You can't get into callback hell if you don't go there.\n\n3. Handle Every Single Error\n\n    There are different types of errors: syntax errors caused by the programmer (usually caught when you try to first run the program), runtime errors caused by the programmer (the code ran but had a bug that caused something to mess up), platform errors caused by things like invalid file permissions, hard drive failure, no network connection etc. This section is only meant to address this last class of errors.\n\n    The first two rules are primarily about making your code readable, but this one is about making your code stable. When dealing with callbacks you are by definition dealing with tasks that get dispatched, go off and do something in the background, and then complete successfully or abort due to failure. Any experienced developer will tell you that you can never know when these errors happen, so you have to plan on them always happening.\n\n    With callbacks the most popular way to handle errors is the Node.js style where the first argument to the callback is always reserved for an error.\n\n    ```javascript\n    var fs = require('fs')\n\n    fs.readFile('/Does/not/exist', handleFile)\n\n    function handleFile (error, file) {\n    if (error) return console.error('Uhoh, there was an error', error)\n    // otherwise, continue on and use `file` in your code\n    }\n    ```\n\n### Example of NodeJS CallBack With FS\n\n```javascript\nvar fs = require('fs')\nvar myNumber = undefined\n\nfunction addOne(callback) {\n  fs.readFile('number.txt', function doneReading(err, fileContents) {\n    myNumber = parseInt(fileContents)\n    myNumber++\n    callback()\n  })\n}\n\nfunction logMyNumber() {\n  console.log(myNumber)\n}\n\naddOne(logMyNumber)\n```\n\nTo break down this example even more, here is a timeline of events that happen when we run this program:\n\n1. The code is parsed, which means if there are any syntax errors they would make the program break. During this initial phase, fs and myNumber are declared as variables while addOne and logMyNumber are declared as functions. Note that these are just declarations. Neither function has been called nor invoked yet.\n2. When the last line of our program gets executed addOne is invoked with the logMyNumber function passed as its callback argument. Invoking addOne will first run the asynchronous fs.readFile function. This part of the program takes a while to finish.\n3. With nothing to do, node idles for a bit as it waits for readFile to finish. If there was anything else to do during this time, node would be available for work.\n4. As soon as readFile finishes it executes its callback, doneReading, which parses fileContents for an integer called myNumber, increments myNumber and then immediately invokes the function that addOne passed in (its callback), logMyNumber.\n\n## Function Definition not Function Call\n\n```javascript\nfunction fullName(firstName, lastName, callback){\n  console.log(\"My name is \" + firstName + \" \" + lastName);\n  callback(lastName);\n}\n\n// NOT\nfunction fullName(firstName, lastName, callback()){\n  console.log(\"My name is \" + firstName + \" \" + lastName);\n  callback(lastName);\n}\n```\n\nWe are passing the function definition, not the function call. This prevents the callback from being executed immediately, which is not the idea behind the callbacks.\n\nThe callback can be an existing function as shown in the preceding example, or it can be an anonymous function, which we create when we call the higher-order function, as shown in the following example:\n","n":0.036}}},{"i":134,"$":{"0":{"v":"Bubbling","n":1},"1":{"v":"## General Info\n\nEvent listeners will bubble up if they are listening to multiple levels of the DOM when you click on a nested element and trigger any other event listeners on parent items.\n\n## Quick Links\n\n[Wes Bos Video](https://www.youtube.com/watch?v=F1anRyL37lE)\n\n## Sample Code\n\nHTML\n\n```html\n  <div class=\"one\">\n    <div class=\"two\">\n      <div class=\"three\">\n      </div>\n    </div>\n  </div>\n```\n\nJS\n\n```Javascript\nconst divs = document.querySelectorAll('div');\nconst button = document.querySelector('button');\n\n  function logText(e) {\n    console.log(this.classList.value);\n    e.stopPropagation(); // stops bubbling!\n    console.log(this);\n  }\n```\n","n":0.125}}},{"i":135,"$":{"0":{"v":"Bind Function","n":0.707},"1":{"v":"## General Info\n\nThe bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.\n\nThe bind() function creates a new bound function, which is an exotic function object (a term from ECMAScript 2015) that wraps the original function object. Calling the bound function generally results in the execution of its wrapped function.\n\n## Example Usage\n\n```javascript\nconst module = {\n  x: 42,\n  getX: function() {\n    return this.x;\n  }\n};\n\nconst unboundGetX = module.getX;\nconsole.log(unboundGetX()); // The function gets invoked at the global scope\n// expected output: undefined\n\nconst boundGetX = unboundGetX.bind(module);\nconsole.log(boundGetX());\n// expected output: 42\n```\n","n":0.097}}},{"i":136,"$":{"0":{"v":"Bind()","n":1}}},{"i":137,"$":{"0":{"v":"Aync Await","n":0.707},"1":{"v":"## General Info\n\nAn important thing to understand is async functions are just syntactical sugar for promises.\n\nAsynchronous code can become difficult to follow when it has a lot of things going on. async and await are two keywords that can help make asynchronous read more like synchronous code. This can help code look cleaner while keeping the benefits of asynchronous code.\n\nFor example, the two code blocks below do the exact same thing. They both get information from a server, process it, and return a promise.\n\n```javascript\nfunction getPersonsInfo(name) {\n  return server.getPeople().then(people => {\n    return people.find(person => { return person.name === name });\n  });\n}\n```\n\n```javascript\nasync function getPersonsInfo(name) {\n  const people = await server.getPeople();\n  const person = people.find(person => { return person.name === name });\n  return person;\n}\n```\n\n### The Async Keyword\n\nThe `async` keyword can also be used with any of the ways a function can be created. Said differently: it is valid to use an `async` function anywhere you can use a normal function. Below you will see some examples that may not be intuitive. If you don’t understand them, come back and take a look when you are done with the assignments.\n\n```javascript\nconst yourAsyncFunction = async () => {\n    // do something asynchronously and return a promise\n    return result;\n  }\n\n anArray.forEach(async item => {\n   // do something asynchronously for each item in 'anArray'\n   // one could also use .map here to return an array of promises to use with 'Promise.all()'\n });\n \nserver.getPeople().then(async people => {\n  people.forEach(person => {\n    // do something asynchronously for each person\n  });\n});\n```\n\n### The Await Keyword\n\n`await` is pretty simple: it tells JavaScript to wait for an asynchronous action to finish before continuing the function. It’s like a ‘pause until done’ keyword. The `await` keyword is used to get a value from a function where you would normally use `.then()`. Instead of calling `.then()` after the asynchronous function, you would simply assign a variable to the result using await. Then you can use the result in your code as you would in your synchronous code.\n\n**Await accepts thenables**: Like `promise.then`, `await` allows us to use thenable objects (those with a callable then method). The idea is that a third-party object may not be a promise, but promise-compatible: if it supports `.then`, that’s enough to use it with await.\n\nIn modern browsers, await on top level works just fine, when we’re inside a module.\n\nIf we’re not using modules, or older browsers must be supported, there’s a universal recipe: wrapping into an anonymous async function.\n\n### Error Handling\n\nHandling errors in async functions is very easy. Promises have the `.catch()` method for handling rejected promises, and since async functions just return a promise, you can simply call the function, and append a `.catch()` method to the end.\n\n```javascript\nasyncFunctionCall().catch(err => {\n  console.error(err)\n});\n```\n\nBut there is another way: the mighty try/catch block! If you want to handle the error directly inside the async function, you can use try/catch just like you would inside synchronous code.\n\n```javascript\nasync function getPersonsInfo(name) {\n  try {\n    const people = await server.getPeople();\n    const person = people.find(person => { return person.name === name });\n    return person;\n  } catch (error) {\n    // Handle the error any way you'd like\n  }\n}\n```\n\nDoing this can look messy, but it is a very easy way to handle errors without appending `.catch()` after your function calls. How you handle the errors is up to you, and which method you use should be determined by how your code was written. You will get a feel for what needs to be done over time. The assignments will also help you understand how to handle your errors.\n","n":0.041}}},{"i":138,"$":{"0":{"v":"ASI","n":1},"1":{"v":"\n- empty statement\n- `var` statement\n- expression statement\n- `do-while` statement\n- `continue` statement\n- `break` statement\n- `return` statement\n- `throw` statement\n\n1. When an offending token is encountered that is not allowed by the grammar, a semicolon is inserted before it if:\n    - The token is separated from the previous token by at least one LineTerminator.\n    - The token is `}`\n2. When the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete Program, then a semicolon is automatically inserted at the end of the input stream.\n3. This case occurs when a token is allowed by some production of the grammar, but the production is a restricted production, a semicolon is automatically inserted before the restricted token.\n","n":0.089}}},{"i":139,"$":{"0":{"v":"Arrays","n":1},"1":{"v":"## General Notes\n\n`Array.isArray()` was created because there is no typeof property for arrays since they are typeof `objects`\n\nWeird stuff happens when you use an array constructor for a single item in an array.\n\n```javascript\nconst points = new Array(40, 100, 1);\npoints\n[40, 100, 1\n\nconst points2 = [40, 100, 1]\npoints\n[40, 100, 1]\n\nconst points3 = new Array(40)\npoints\n[ <40 empty items> ]\n\nconst points4 = [40]\npoints\n[ 40 ]\n```\n\n## Array Methods\n\n### Converting Arrays to Strings\n\n`.toString()` converts an array into a comma separated string\n\n`.join(separator)` also converts an array into a string and you can specify the separator as a parameter.\n\nJavaScript automatically converts an array to a comma separated string when a primitive value is expected. Without needing to call the `.toString()` method\n\n### Popping and Pushing\n\n`.pop(element)` removes the last element\n\n`.push(element)` adds an element to the end of the array\n\n### Shifting Elements\n\n`.shift()` removes the first element and shifts the others to the left, it also returns the element that was shifted out\n\n`.unshift()` adds a new element at the beginning of the array and returns the new array length\n\n### Changing Elements\n\n`.length` easy way to append an element to an array, also provides the length of an array\n\n`delete array[0]` will delete the element but leave an `undefined` hole\n\n`.concat()` will combine any number of arrays or strings\n\n`.splice()` can be used to add new items to the array ex:\n\n```javascript\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");\n```\n\n`.slice(start, end)` slices out a piece of an array into a new array but does not modify the old array.\n\n```javascript\nconst fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1);\ncitrus = [ 'Orange', 'Lemon', 'Apple', 'Mango' ]\nfruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"]\n```\n\n","n":0.061}}},{"i":140,"$":{"0":{"v":"Ajax","n":1},"1":{"v":"## General Info\n\nAjax is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. With Ajax, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behaviour of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows web pages and, by extension, web applications, to change content dynamically without the need to reload the entire page. In practice, modern implementations commonly utilize JSON instead of XML.\n\nAjax is not a technology, but rather a programming concept. HTML and CSS can be used in combination to mark up and style information. The webpage can be modified by JavaScript to dynamically display—and allow the user to interact with the new information. The built-in XMLHttpRequest object is used to execute Ajax on webpages, allowing websites to load content onto the screen without refreshing the page. Ajax is not a new technology, nor is it a new language. Instead, it is existing technologies used in a new way.\n","n":0.075}}},{"i":141,"$":{"0":{"v":"IdP - Identity Provider","n":0.5},"1":{"v":"## General Info\n\nAn identity provider (abbreviated IdP or IDP) is a system entity that creates, maintains, and manages identity information for principals and also provides authentication services to relying applications within a federation or distributed network.\n\nIdentity providers offer user authentication as a service. Relying party applications, such as web applications, outsource the user authentication step to a trusted identity provider. Such a relying party application is said to be federated, that is, it consumes federated identity.\n\nAn identity provider is “a trusted provider that lets you use single sign-on (SSO) to access other websites.” SSO enhances usability by reducing password fatigue. It also provides better security by decreasing the potential attack surface.\n\nIdentity providers can facilitate connections between cloud computing resources and users, thus decreasing the need for users to re-authenticate when using mobile and roaming applications.\n","n":0.086}}},{"i":142,"$":{"0":{"v":"HTML","n":1},"1":{"v":"## General Info\n\nYou can use a `start` attribute when using ordered (numbered) lists to start at a different interger. If you want to start your list at number 10 simply do `<ol start=\"10\">`\nEx:\n\n```HTML\n<ol start=\"10\">\n<li>This should be 10\n<li>This should be 11\n<li>This should be 12\n</ol>\n```\n\nApparently this does not work on Dendron.\n\nOn the same note `reversed` attribute flips the number order.\n\nAlso `value` can change the value on an individual `<li>` and change the following list items.\n\n[Shay Howe's Lists Tutorial](https://learn.shayhowe.com/html-css/creating-lists/) has a bunch of uncommon use cases.\n\n## Best Practices from [this GH Repo](https://github.com/hail2u/html-best-practices)\n\nFor writing maintainable and scalable HTML documents\n\n## General\n\n### Start with DOCTYPE\n\nDOCTYPE is required for activating no-quirks mode.\n\nBad:\n\n```html\n    <html>\n      ...\n    </html>\n```\n\nGood:\n\n```html\n    <!DOCTYPE html>\n    <html>\n      ...\n    </html>\n```\n\n### Don’t use legacy or obsolete DOCTYPE\n\nDOCTYPE is not for DTD anymore, be simple.\n\nBad:\n\n`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">`\n\nGood:\n\n`<!DOCTYPE html>`\n\n### Don’t use XML Declaration\n\nAre you sure you want to write XHTML?\n\nBad:\n\n`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><!DOCTYPE html>`\n\nGood:\n\n`<!DOCTYPE html>`\n\n### Don’t use character references as much as possible\n\nIf you write an HTML document with UTF-8, almost all characters (including\nEmoji) can be written directly.\n\nBad:\n\n`<p><small>Copyright &copy; 2014 W3C<sup>&reg;</sup></small></p>`\n\nGood:\n\n`<p><small>Copyright © 2014 W3C<sup>®</sup></small></p>`\n\n### Escape `&`, `<`, `>`, `\"`, and `'` with named character references\n\nThese characters should escape always for a bug-free HTML document.\n\nBad:\n\n    <h1>The \"&\" character</h1>\n\nGood:\n\n    <h1>The &quot;&amp;&quot; character</h1>\n\n### Use numeric character references for control or invisible characters\n\nThese characters are easily mistaken for another character. And also spec does\nnot guarantee to define a human readable name for these characters.\n\nBad:\n\n    <p>This book can read in 1 hour.</p>\n\nGood:\n\n    <p>This book can read in 1&#xA0;hour.</p>\n\n### Put white spaces around comment contents\n\nSome character cannot be used immediately after comment open or before comment\nclose.\n\nBad:\n\n    <!--This section is non-normative-->\n\nGood:\n\n    <!-- This section is non-normative -->\n\n### Don’t omit closing tag\n\nI think you don’t understand a rule for omitting closing tag.\n\nBad:\n\n    <html>\n      <body>\n        ...\n\nGood:\n\n    <html>\n      <body>\n        ...\n      </body>\n    </html>\n\n### Don’t mix empty element format\n\nConsistency is a key for readability.\n\nBad:\n\n    <img alt=\"HTML Best Practices\" src=\"/img/logo.png\">\n    <hr />\n\nGood:\n\n    <img alt=\"HTML Best Practices\" src=\"/img/logo.png\">\n    <hr>\n\n### Don’t put white spaces around tags and attribute values\n\nThere is no reason for doing this.\n\nBad:\n\n    <h1 class=\" title \" >HTML Best Practices</h1>\n\nGood:\n\n    <h1 class=\"title\">HTML Best Practices</h1>\n\n### Don’t mix character cases\n\nIt gives a consistency also.\n\nBad:\n\n    <a HREF=\"#general\">General</A>\n\nGood:\n\n    <a href=\"#general\">General</a>\n\nAlso Good:\n\n    <A HREF=\"#general\">General</A>\n\n### Don’t mix quotation marks\n\nSame as above.\n\nBad:\n\n    <img alt=\"HTML Best Practices\" src='/img/logo.jpg'>\n\nGood:\n\n    <img alt=\"HTML Best Practices\" src=\"/img/logo.jpg\">\n\n### Don’t separate attributes with two or more white spaces\n\nYour weird formatting rule confuses someone.\n\nBad:\n\n    <input   name=\"q\"  type=\"search\">\n\nGood:\n\n    <input name=\"q\" type=\"search\">\n\n### Omit boolean attribute value\n\nIt’s easy to write, isn’t it?\n\nBad:\n\n    <audio autoplay=\"autoplay\" src=\"/audio/theme.mp3\">\n\nGood:\n\n    <audio autoplay src=\"/audio/theme.mp3\">\n\n### Omit namespaces\n\nSVG and MathML can be used directly in an HTML document.\n\nBad:\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\">\n      ...\n    </svg>\n\nGood:\n\n    <svg>\n      ...\n    </svg>\n\n### Don’t use XML attributes\n\nWe write an HTML document.\n\nBad:\n\n    <span lang=\"ja\" xml:lang=\"ja\">...</span>\n\nGood:\n\n    <span lang=\"ja\">...</span>\n\n### Don’t mix `data-*`, Microdata, and RDFa Lite attributes with common attributes\n\nA tag string can be very complicated. This simple rule helps reading such tag\nstring.\n\nBad:\n\n    <img alt=\"HTML Best Practices\" data-height=\"31\" data-width=\"88\" itemprop=\"image\" src=\"/img/logo.png\">\n\nGood:\n\n    <img alt=\"HTML Best Practices\" src=\"/img/logo.png\" data-width=\"88\" data-height=\"31\" itemprop=\"image\">\n\n### Prefer default implicit ARIA semantics\n\nSome element has an ARIA `role` implicitly in an HTML document, don’t specify it.\n\nBad:\n\n    <nav role=\"navigation\">\n      ...\n    </nav>\n\n    <hr role=\"separator\">\n\nGood:\n\n    <nav>\n      ...\n    </nav>\n\n    <hr>\n\n## The root element\n\n### Add `lang` attribute\n\n`lang` attribute will help translating an HTML document.\n\nBad:\n\n    <html>\n\nGood:\n\n    <html lang=\"en-US\">\n\n### Keep `lang` attribute value as short as possible\n\nJapanese is only used in Japan. So country code is not necessary.\n\nBad:\n\n    <html lang=\"ja-JP\">\n\nGood:\n\n    <html lang=\"ja\">\n\n### Avoid `data-*` as much as possible\n\nAn appropriate attribute can be handled properly by browsers.\n\nBad:\n\n    <span data-language=\"french\">chemises</span>\n    ...\n    <strong data-type=\"warning\">Do not wash!</strong>\n\nGood:\n\n    <span title=\"French\"><span lang=\"fr-FR\">chemises</span></span>\n    ...\n    <strong class=\"warning\">Do not wash!</strong>\n\n## Document metadata\n\n### Add `title` element\n\nA value for `title` element is used by various application not only a browser.\n\nBad:\n\n    <head>\n      <meta charset=\"UTF-8\">\n    </head>\n\nGood:\n\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>HTML Best Practices</title>\n    </head>\n\n### Don’t use `base` element\n\nAn absolute path or URL is safer for both developers and users.\n\nBad:\n\n    <head>\n      ...\n      <base href=\"/blog/\">\n      <link href=\"hello-world\" rel=\"canonical\">\n      ...\n    </head>\n\nGood:\n\n    <head>\n      ...\n      <link href=\"/blog/hello-world\" rel=\"canonical\">\n      ...\n    </head>\n\n### Specify MIME type of minor linked resources\n\nThis is a hint how application handles this resource.\n\nBad:\n\n    <link href=\"/pdf\" rel=\"alternate\">\n    <link href=\"/feed\" rel=\"alternate\">\n    <link href=\"/css/screen.css\" rel=\"stylesheet\">\n\nGood:\n\n    <link href=\"/pdf\" rel=\"alternate\" type=\"application/pdf\">\n    <link href=\"/feed\" rel=\"alternate\" type=\"application/rss+xml\">\n    <link href=\"/css/screen.css\" rel=\"stylesheet\">\n\n### Don’t link to `favicon.ico`\n\nAlmost all browsers fetch `/favicon.ico` automatically and asynchronously.\n\nBad:\n\n    <link href=\"/favicon.ico\" rel=\"icon\" type=\"image/vnd.microsoft.icon\">\n\nGood:\n\n    <!-- Place `favicon.ico` in the root directory. -->\n\n### Add `apple-touch-icon` link\n\nA default request path for touch icon was changed suddenly.\n\nBad:\n\n    <!-- Hey Apple! Please download `/apple-touch-icon.png`! -->\n\nGood:\n\n    <link href=\"/apple-touch-icon.png\" rel=\"apple-touch-icon\">\n\n### Add `title` attribute to alternate stylesheets\n\nA human readable label helps people selecting proper stylesheet.\n\nBad:\n\n    <link href=\"/css/screen.css\" rel=\"stylesheet\">\n    <link href=\"/css/high-contrast.css\" rel=\"alternate stylesheet\">\n\nGood:\n\n    <link href=\"/css/screen.css\" rel=\"stylesheet\">\n    <link href=\"/css/high-contrast.css\" rel=\"alternate stylesheet\" title=\"High contrast\">\n\n### For URL, use `link` element\n\nA value of `href` attribute can be resolved as URL.\n\nBad:\n\n    <section itemscope itemtype=\"http://schema.org/BlogPosting\">\n      <meta content=\"https://example.com/blog/hello\" itemprop=\"url\">\n      ...\n    </section>\n\nGood:\n\n    <section itemscope itemtype=\"http://schema.org/BlogPosting\">\n      <link href=\"/blog/hello\" itemprop=\"url\">\n      ...\n    </section>\n\n### Specify document character encoding\n\nUTF-8 is not default in all browsers yet.\n\nBad:\n\n    <head>\n      <title>HTML Best Practices</title>\n    </head>\n\nGood:\n\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>HTML Best Practices</title>\n    </head>\n\n### Don’t use legacy character encoding format\n\nHTTP headers should be specified by a server, be simple.\n\nBad:\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n\nGood:\n\n    <meta charset=\"UTF-8\">\n\n### Specify character encoding at first\n\nSpec requires the character encoding is specified within the first 1024 bytes of\nthe document.\n\nBad:\n\n    <head>\n      <meta content=\"width=device-width\" name=\"viewport\">\n      <meta charset=\"UTF-8\">\n      ...\n    </head>\n\nGood:\n\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta content=\"width=device-width\" name=\"viewport\">\n      ...\n    </head>\n\n### Use UTF-8\n\nWith UTF-8, you are free to use Emoji.\n\nBad:\n\n    <meta charset=\"Shift_JIS\">\n\nGood:\n\n    <meta charset=\"UTF-8\">\n\n### Omit `type` attribute for CSS\n\nIn HTML, default `type` attribute’s value of `style` element is `text/css`.\n\nBad:\n\n    <style type=\"text/css\">\n      ...\n    </style>\n\nGood:\n\n    <style>\n      ...\n    </style>\n\n### Don’t comment out contents of `style` element\n\nThis ritual is for the old browser.\n\nBad:\n\n    <style>\n    <!--\n      ...\n      -->\n    </style>\n\nGood:\n\n    <style>\n      ...\n    </style>\n\n### Don’t mix tag for CSS and JavaScript\n\nSometimes `script` element blocks DOM construction.\n\nBad:\n\n    <script src=\"/js/jquery.min.js\"></script>\n    <link href=\"/css/screen.css\" rel=\"stylesheet\">\n    <script src=\"/js/main.js\"></script>\n\nGood:\n\n    <link href=\"/css/screen.css\" rel=\"stylesheet\">\n    <script src=\"/js/jquery.min.js\"></script>\n    <script src=\"/js/main.js\"></script>\n\nAlso good:\n\n    <script src=\"/js/jquery.min.js\"></script>\n    <script src=\"/js/main.js\"></script>\n    <link href=\"/css/screen.css\" rel=\"stylesheet\">\n\n## Sections\n\n### Add `body` element\n\nSometimes `body` element is complemented in unexpected position by a browser.\n\nBad:\n\n    <html>\n      <head>\n        ...\n      </head>\n      ...\n    </html>\n\nGood:\n\n    <html>\n      <head>\n        ...\n      </head>\n      <body>\n        ...\n      </body>\n    </html>\n\n### Forget about `hgroup` element\n\nThis element is not used very much.\n\nBad:\n\n    <hgroup>\n      <h1>HTML Best Practices</h1>\n      <h2>For writing maintainable and scalable HTML documents.</h2>\n    </hgroup>\n\nGood:\n\n    <h1>HTML Best Practices</h1>\n    <p>For writing maintainable and scalable HTML documents.</p>\n\n### Use `address` element only for contact information\n\n`address` element is for email address, social network account, street address,\ntelephone number, or something you can get in touch with.\n\nBad:\n\n    <address>No rights reserved.</address>\n\nGood:\n\n    <address>Contact: <a href=\"https://twitter.com/hail2u_\">Kyo Nagashima</a></address>\n\n## Grouping content\n\n### Don’t start with newline in `pre` element\n\nA first newline will ignored in the browsers, but second and later are rendered.\n\nBad:\n\n    <pre>\n    &lt;!DOCTYPE html&gt;\n    </pre>\n\nGood:\n\n    <pre>&lt;!DOCTYPE html&gt;\n    </pre>\n\n### Use appropriate element in `blockquote` element\n\n`blockquote` element’s content is a quote, not a chunks of characters.\n\nBad:\n\n    <blockquote>For writing maintainable and scalable HTML documents.</blockquote>\n\nGood:\n\n    <blockquote>\n      <p>For writing maintainable and scalable HTML documents.</p>\n    </blockquote>\n\n### Don’t include attribution directly in `blockquote` element\n\n`blockquote` element’s content is a quote.\n\nBad:\n\n    <blockquote>\n      <p>For writing maintainable and scalable HTML documents.</p>\n\n      <p>— HTML Best Practices</p>\n    </blockquote>\n\nGood:\n\n    <blockquote>\n      <p>For writing maintainable and scalable HTML documents.</p>\n    </blockquote>\n\n    <p>— HTML Best Practices</p>\n\nAlso good:\n\n    <figure>\n      <blockquote>\n        <p>For writing maintainable and scalable HTML documents.</p>\n      </blockquote>\n\n      <figcaption>— HTML Best Practices</figcaption>\n    </figure>\n\n### Write one list item per line\n\nLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\nline is hard toooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo read.\n\nBad:\n\n    <ul>\n      <li>General</li><li>The root Element</li><li>Sections</li>...\n    </ul>\n\nGood:\n\n    <ul>\n      <li>General</li>\n      <li>The root Element</li>\n      <li>Sections</li>\n      ...\n    </ul>\n\n### Use `type` attribute for `ol` element\n\nSometimes marker referenced by the contents in the near. If you change marker\nwith `type` attribute, you will be safe to reference.\n\nBad:\n\n    <head>\n      <style>\n        .toc {\n          list-style-type: upper-roman;\n        }\n      </style>\n    </head>\n    <body>\n      <ol class=\"toc\">\n        <li>General</li>\n        <li>The root Element</li>\n        <li>Sections</li>\n        ...\n      </ol>\n    </body>\n\nGood:\n\n    <body>\n      <ol type=\"I\">\n        <li>General</li>\n        <li>The root Element</li>\n        <li>Sections</li>\n        ...\n      </ol>\n    </body>\n\n### Don’t use `dl` for dialogue\n\n`dl` element is restricted to an association list in HTML.\n\nBad:\n\n    <dl>\n      <dt>Costello</dt>\n      <dd>Look, you gotta first baseman?</dd>\n      <dt>Abbott</dt>\n      <dd>Certainly.</dd>\n      <dt>Costello</dt>\n      <dd>Who’s playing first?</dd>\n      <dt>Abbott</dt>\n      <dd>That’s right.</dd>\n      <dt>Costello becomes exasperated.</dd>\n      <dt>Costello</dt>\n      <dd>When you pay off the first baseman every month, who gets the money?</dd>\n      <dt>Abbott</dt>\n      <dd>Every dollar of it.</dd>\n    </dl>\n\nGood:\n\n    <p>Costello: Look, you gotta first baseman?</p>\n    <p>Abbott: Certainly.</p>\n    <p>Costello: Who’s playing first?</p>\n    <p>Abbott: That’s right.</p>\n    <p>Costello becomes exasperated.</p>\n    <p>Costello: When you pay off the first baseman every month, who gets the money?</p>\n    <p>Abbott: Every dollar of it.</p>\n\n### Place `figcaption` element as first or last child of `figure` element\n\nSpec disallows `figcaption` element in the middle of `figure` element.\n\nBad:\n\n```html\n    <figure>\n      <img alt=\"Front cover of the “HTML Best Practices” book\" src=\"/img/front-cover.png\">\n      <figcaption>“HTML Best Practices” Cover Art</figcaption>\n      <img alt=\"Back cover of the “HTML Best Practices” book\" src=\"/img/back-cover.png\">\n    </figure>\n```\n\nGood:\n\n```html\n    <figure>\n      <img alt=\"Front cover of the “HTML Best Practices” book\" src=\"/img/front-cover.png\">\n      <img alt=\"Back cover of the “HTML Best Practices” book\" src=\"/img/back-cover.png\">\n      <figcaption>“HTML Best Practices” Cover Art</figcaption>\n    </figure>\n```\n\n### Use `main` element\n\n`main` element can be used wrapping contents.\n\nBad:\n\n    <div id=\"content\">\n      ...\n    </div>\n\nGood:\n\n    <main>\n      ...\n    </main>\n\n### Avoid `div` element as much as possible\n\n`div` element is an element of last resort.\n\nBad:\n\n    <div class=\"chapter\">\n      ...\n    </div>\n\nGood:\n\n    <section>\n      ...\n    </section>\n\n## Text-level semantics\n\n### Don’t split same link that can be grouped\n\n`a` element can wrap almost all elements (except interactive elements like form\ncontrols and `a` element itself).\n\nBad:\n\n    <h1><a href=\"https://whatwg.org/\">WHATWG</a></h1>\n\n    <p><a href=\"https://whatwg.org/\">A community maintaining and evolving HTML since 2004.</a></p>\n\nGood:\n\n    <a href=\"https://whatwg.org/\">\n      <h1>WHATWG</h1>\n\n      <p>A community maintaining and evolving HTML since 2004.</p>\n    </a>\n\n### Use `download` attribute for downloading a resource\n\nIt will force browsers to download linked resource to the storage.\n\nBad:\n\n    <a href=\"/downloads/offline.zip\">offline version</a>\n\nGood:\n\n    <a download href=\"/downloads/offline.zip\">offline version</a>\n\n### Use `rel`, `hreflang`, and `type` attribute if needed\n\nThese hints helps applications how handle linked resource.\n\nBad:\n\n    <a href=\"/ja/pdf\">Japanese PDF version</a>\n\nGood:\n\n    <a href=\"/ja/pdf\" hreflang=\"ja\" rel=\"alternate\" type=\"application/pdf\">Japanese PDF version</a>\n\n### Clear link text\n\nLink text should be the label of its linked resource.\n\nBad:\n\n    <p><a href=\"/pdf\" rel=\"alternate\" type=\"application/pdf\">Click here</a> to view PDF version.</p>\n\nGood:\n\n    <p><a href=\"/pdf\" rel=\"alternate\" type=\"application/pdf\">PDF version</a> is also available.</p>\n\n### Don’t use `em` element for warning or caution\n\nThese are seriousness. So, `strong` element is more appropriate.\n\nBad:\n\n    <em>Caution!</em>\n\nGood:\n\n    <strong>Caution!</strong>\n\n### Avoid `s`, `i`, `b`, and `u` element as much as possible\n\nThese elements’ semantics is too difficult to humans.\n\nBad:\n\n    <i class=\"icon-search\"></i>\n\nGood:\n\n    <span class=\"icon-search\" aria-hidden=\"true\"></span>\n\n### Don’t put quotes to `q` element\n\nQuotes are provided by the browser.\n\nBad:\n\n    <q>“For writing maintainable and scalable HTML documents”</q>\n\nGood:\n\n    <q>For writing maintainable and scalable HTML documents</q>\n\nAlso good:\n\n    “For writing maintainable and scalable HTML documents”\n\n### Add `title` attribute to `abbr` element\n\nThere is no other way to represent its expansion.\n\nBad:\n\n    <abbr>HBP</abbr>\n\nGood:\n\n    <abbr title=\"HTML Best Practices\">HBP</abbr>\n\n### Markup `ruby` element verbosely\n\n`ruby` element support is not completed across the modern browsers.\n\nBad:\n\n    <ruby>HTML<rt>えいちてぃーえむえる</ruby>\n\nGood:\n\n    <ruby>HTML<rp> (</rp><rt>えいちてぃーえむえる</rt><rp>) </rp></ruby>\n\n### Add `datetime` attribute to non-machine-readable `time` element\n\nWhen `datetime` attribute does not present, the format of `time` element’s\ncontent is restricted.\n\nBad:\n\n    <time>Dec 19, 2014</time>\n\nGood:\n\n    <time datetime=\"2014-12-19\">Dec 19, 2014</time>\n\n### Specify code language with `class` attribute prefixed with `language-`\n\nThis is not a formal way, but spec mentions this.\n\nBad:\n\n    <code>&lt;!DOCTYPE html&gt;</code>\n\nGood:\n\n    <code class=\"language-html\">&lt;!DOCTYPE html&gt;</code>\n\n### Keep `kbd` element as simple as possible\n\nNesting `kbd` element is too difficult to humans.\n\nBad:\n\n    <kbd><kbd>Ctrl</kbd>+<kbd>F5</kbd></kbd>\n\nGood:\n\n    <kbd>Ctrl+F5</kbd>\n\n### Avoid `span` element as much as possible\n\n`span` element is an element of last resort.\n\nBad:\n\n    HTML <span class=\"best\">Best</span> Practices\n\nGood:\n\n    HTML <em>Best</em> Practices\n\n### Break after `br` element\n\nLine break should be needed where `br` element is used.\n\nBad:\n\n    <p>HTML<br>Best<br>Practices</p>\n\nGood:\n\n    <p>HTML<br>\n    Best<br>\n    Practices</p>\n\n### Don’t use `br` element only for presentational purpose\n\n`br` element is not for line breaking, it is for line breaks in the contents.\n\nBad:\n\n    <p><label>Rule name: <input name=\"rule-name\" type=\"text\"></label><br>\n    <label>Rule description:<br>\n    <textarea name=\"rule-description\"></textarea></label></p>\n\nGood:\n\n    <p><label>Rule name: <input name=\"rule-name\" type=\"text\"></label></p>\n    <p><label>Rule description:<br>\n    <textarea name=\"rule-description\"></textarea></label></p>\n\n## Edits\n\n### Don’t stride `ins` and `del` element over other elements\n\nElements cannot be overflow other elements.\n\nBad:\n\n    <p>For writing maintainable and scalable HTML documents.<del> And for mental stability.</p>\n\n    <p>Don’t trust!</p></del>\n\nGood:\n\n    <p>For writing maintainable and scalable HTML documents.<del> And for mental stability.</del></p>\n\n    <del><p>Don’t trust!</p></del>\n\n## Embedded content\n\n### Provide fallback `img` element for `picture` element\n\nThe support of `picture` element is not good yet.\n\nBad:\n\n    <picture>\n      <source srcset=\"/img/logo.webp\" type=\"image/webp\">\n      <source srcset=\"/img/logo.hdp\" type=\"image/vnd.ms-photo\">\n      <source srcset=\"/img/logo.jp2\" type=\"image/jp2\">\n      <source srcset=\"/img/logo.jpg\" type=\"image/jpg\">\n    </picture>\n\nGood:\n\n    <picture>\n      <source srcset=\"/img/logo.webp\" type=\"image/webp\">\n      <source srcset=\"/img/logo.hdp\" type=\"image/vnd.ms-photo\">\n      <source srcset=\"/img/logo.jp2\" type=\"image/jp2\">\n      <img src=\"/img/logo.jpg\">\n    </picture>\n\n### Add `alt` attrbute to `img` element if needed\n\n`alt` attribute helps those who cannot process images or have image loading\ndisabled.\n\nBad:\n\n    <img src=\"/img/logo.png\">\n\nGood:\n\n    <img alt=\"HTML Best Practices\" src=\"/img/logo.png\">\n\n### Empty `alt` attribute if possible\n\nIf the image is supplemental, there is equivalent content somewhere in the near.\n\nBad:\n\n    <img alt=\"Question mark icon\" src=\"/img/icon/help.png\"> Help\n\nGood:\n\n    <img alt=\"\" src=\"/img/icon/help.png\"> Help\n\n### Omit `alt` attribute if possible\n\nSometimes you don’t know what text is suitable for `alt` attribute.\n\nBad:\n\n    <img alt=\"CAPTCHA\" src=\"captcha.cgi?id=82174\">\n\nGood:\n\n    <img src=\"captcha.cgi?id=82174\" title=\"CAPTCHA\">\n    (If you cannot see the image, you can use an <a href=\"?audio\">audio</a> test instead.)\n\n### Empty `iframe` element\n\nThere is some restriction in its content. Being empty is always safe.\n\nBad:\n\n    <iframe src=\"/ads/default.html\">\n      <p>If your browser support inline frame, ads are displayed here.</p>\n    </iframe>\n\nGood:\n\n    <iframe src=\"/ads/default.html\"></iframe>\n\n### Markup `map` element content\n\nThis content presents to a screen reader.\n\nBad:\n\n    <map name=\"toc\">\n      <a href=\"#general\">General</a>\n      <area alt=\"General\" coords=\"0, 0, 40, 40\" href=\"#General\"> |\n      <a href=\"#the_root_element\">The root element</a>\n      <area alt=\"The root element\" coords=\"50, 0, 90, 40\" href=\"#the_root_element\"> |\n      <a href=\"#sections\">Sections</a>\n      <area alt=\"Sections\" coords=\"100, 0, 140, 40\" href=\"#sections\">\n    </map>\n\nGood:\n\n    <map name=\"toc\">\n      <p>\n        <a href=\"#general\">General</a>\n        <area alt=\"General\" coords=\"0, 0, 40, 40\" href=\"#General\"> |\n        <a href=\"#the_root_element\">The root element</a>\n        <area alt=\"The root element\" coords=\"50, 0, 90, 40\" href=\"#the_root_element\"> |\n        <a href=\"#sections\">Sections</a>\n        <area alt=\"Sections\" coords=\"100, 0, 140, 40\" href=\"#sections\">\n      </p>\n    </map>\n\n### Provide fallback content for `audio` or `video` element\n\nFallback content is needed for newly introduced elements in HTML.\n\nBad:\n\n    <video>\n      <source src=\"/mov/theme.mp4\" type=\"video/mp4\">\n      <source src=\"/mov/theme.ogv\" type=\"video/ogg\">\n      ...\n    </video>\n\nGood:\n\n    <video>\n      <source src=\"/mov/theme.mp4\" type=\"video/mp4\">\n      <source src=\"/mov/theme.ogv\" type=\"video/ogg\">\n      ...\n      <iframe src=\"//www.youtube.com/embed/...\" allowfullscreen></iframe>\n    </video>\n\n## Tabular data\n\n### Write one cell per line\n\nLong lines are hard to scan.\n\nBad:\n\n    <tr>\n      <td>General</td><td>The root Element</td><td>Sections</td>\n    </tr>\n\nGood:\n\n    <tr>\n      <td>General</td>\n      <td>The root Element</td>\n      <td>Sections</td>\n    </tr>\n\n### Use `th` element for header cell\n\nThere is no reason to avoid this.\n\nBad:\n\n    <table>\n      <thead>\n        <tr>\n          <td><strong>Element</strong></td>\n          <td><strong>Empty</strong></td>\n          <td><strong>Tag omission</strong></td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><strong><code>pre</code></strong></td>\n          <td>No</td>\n          <td>Neither tag is omissible</td>\n        </tr>\n        <tr>\n          <td><strong><code>img</code></strong></td>\n          <td>Yes</td>\n          <td>No end tag</td>\n        </tr>\n      </tbody>\n    </table>\n\nGood:\n\n    <table>\n      <thead>\n        <tr>\n          <th>Element</th>\n          <th>Empty</th>\n          <th>Tag omission</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th><code>pre</code></th>\n          <td>No</td>\n          <td>Neither tag is omissible</td>\n        </tr>\n        <tr>\n          <th><code>img</code></th>\n          <td>Yes</td>\n          <td>No end tag</td>\n        </tr>\n      </tbody>\n    </table>\n\n## Forms\n\n### Wrap form control with `label` element\n\n`label` element helps focusing form element.\n\nBad:\n\n    <p>Query: <input name=\"q\" type=\"text\"></p>\n\nGood:\n\n    <p><label>Query: <input name=\"q\" type=\"text\"></label></p>\n\n### Omit `for` attribute if possible\n\n`label` element can contain some form elements.\n\nBad:\n\n    <label for=\"q\">Query: </label><input id=\"q\" name=\"q\" type=\"text\">\n\nGood:\n\n    <label>Query: <input name=\"q\" type=\"text\"></label>\n\n### Use appropriate `type` attribute for `input` element\n\nWith appropriate `type`, a browser gives tiny features to the `input` element.\n\nBad:\n\n    <label>Search keyword: <input name=\"q\" type=\"text\"></label>\n\nGood:\n\n    <label>Search keyword: <input name=\"q\" type=\"search\"></label>\n\n### Add `value` attribute to `input type=\"submit\"`\n\nThe default label for submit button is not standarized across the browser and\nlanguages.\n\nBad:\n\n    <input type=\"submit\">\n\nGood:\n\n    <input type=\"submit\" value=\"Search\">\n\n### Add `title` attribute to `input` element when there is `pattern` attribute\n\nIf input text does not match to `pattern` attribute, the value of `title`\nattribute will be display as a hint.\n\nBad:\n\n    <input name=\"security-code\" pattern=\"[0-9]{3}\" type=\"text\">\n\nGood:\n\n    <input name=\"security-code\" pattern=\"[0-9]{3}\" title=\"A security code is a number in three figures.\" type=\"text\">\n\n### Don’t use `placeholder` attribute for labeling\n\n`label` element is for a label, `placeholder` attribute is for a short hint.\n\nBad:\n\n    <input name=\"email\" placeholder=\"Email\" type=\"text\">\n\nGood:\n\n    <label>Email: <input name=\"email\" placeholder=\"john.doe@example.com\" type=\"text\"></label>\n\n### Write one `option` element per line\n\nLong lines are hard to scan.\n\nBad:\n\n    <datalist id=\"toc\">\n      <option label=\"General\"><option label=\"The root element\"><option label=\"Sections\">\n    </datalist>\n\nGood:\n\n    <datalist id=\"toc\">\n      <option label=\"General\">\n      <option label=\"The root element\">\n      <option label=\"Sections\">\n    </datalist>\n\n### Add `max` attribute to `progress` element\n\nWith `max` attribute, the `value` attribute can be write in an easy format.\n\nBad:\n\n    <progress value=\"0.5\"> 50%</progress>\n\nGood:\n\n    <progress max=\"100\" value=\"50\"> 50%</progress>\n\n### Add `min` and `max` attribute to `meter` element\n\nWith `min` and `max` attribute, the `value` attribute can be write in an easy\nformat.\n\nBad:\n\n    <meter value=\"0.5\"> 512GB used (1024GB total)</meter>\n\nGood:\n\n    <meter min=\"0\" max=\"1024\" value=\"512\"> 512GB used (1024GB total)</meter>\n\n### Place `legend` element as the first child of `fieldset` element\n\nSpec requires this.\n\nBad:\n\n    <fieldset>\n      <p><label>Is this section is useful?: <input name=\"usefulness-general\" type=\"checkbox\"></label></p>\n      ...\n      <legend>About \"General\"</legend>\n    </fieldset>\n\nGood:\n\n    <fieldset>\n      <legend>About \"General\"</legend>\n      <p><label>Is this section is useful?: <input name=\"usefulness-general\" type=\"checkbox\"></label></p>\n      ...\n    </fieldset>\n\n## Scripting\n\n### Omit `type` attribute for JavaScript\n\nIn HTML, the default `type` attribute’s value of `script` element is\n`text/javascript`.\n\nBad:\n\n    <script type=\"text/javascript\">\n      ...\n    </script>\n\nGood:\n\n    <script>\n      ...\n    </script>\n\n### Don’t comment out contents of `script` element\n\nThis ritual is for the old browser.\n\nBad:\n\n    <script>\n    /*<![CDATA[*/\n      ...\n    /*]]>*/\n    </script>\n\nAlso bad:\n\n    <script>\n    <!--\n      ...\n    // -->\n    </script>\n\nGood:\n\n    <script>\n      ...\n    </script>\n\n### Don’t use script-injected `script` element\n\n`async` attribute is the best for both simplicity and performance.\n\nBad:\n\n    <script>\n      var script = document.createElement(\"script\");\n      script.async = true;\n      script.src = \"//example.com/widget.js\";\n      document.getElementsByTagName(\"head\")[0].appendChild(script);\n    </script>\n\nGood:\n\n    <script async defer src=\"https://example.com/widget.js\"></script>\n\n## Other\n\n### Indent consistently\n\nIndentation is important for readability.\n\nBad:\n\n    <html>\n     <head>\n       ...\n     </head>\n      <body>\n        ...\n      </body>\n    </html>\n\nGood:\n\n    <html>\n      <head>\n        ...\n      </head>\n      <body>\n        ...\n      </body>\n    </html>\n\n### Use absolute path for internal links\n\nAn absolute path works better on your localhost without internet connection.\n\nBad:\n\n    <link rel=\"apple-touch-icon\" href=\"http://you.example.com/apple-touch-icon-precomposed.png\">\n    ...\n    <p>You can find more at <a href=\"//you.example.com/contact.html\">contact page</a>.</p>\n\nGood:\n\n    <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon-precomposed.png\">\n    ...\n    <p>You can find more at <a href=\"/contact.html\">contact page</a>.</p>\n\n### Don’t use protocol-relative URL for external resources\n\nWith protocol, you can load external resources reliably and safely.\n\nBad:\n\n    <script src=\"//example.com/js/library.js\">\n\nGood:\n\n    <script src=\"https://example.com/js/library.js\">\n","n":0.019}}},{"i":143,"$":{"0":{"v":"Viewport Meta Tag","n":0.577},"1":{"v":"\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n","n":0.5}}},{"i":144,"$":{"0":{"v":"Table","n":1},"1":{"v":"## UI/UX Best Practices from Pencil & Paper IO\n\nPart of this info comes from this guide: [pencilandpaper.io](https://pencilandpaper.io/articles/ux-pattern-analysis-enterprise-data-tables/)\n\n- Left Align Text Columns\n- Match Heading Alignment to Columns\n- Don't ever use center alignment\n- Avoid duplication of words between Headers and Content\n- Right align quantitative numberical values (money, quantities, measures, percentages)\n- Qualitative numbers can be left aligned (dates, postal codes, phone numbers)\n- Lots more check out that article\n\n## Styling Tips and Helper Elements & Attributes\n\n### The `<col>` & `<colgroup>` Elements\n\nThese can be used to style entire columns without having to style individual `<td>` or `<th>` elements.\n\nStyling columns like this is limited to a few properties: border, background, width, and visibility. To set other properties you'll have to either style every `<td>` or `<th>` in the column, or use a complex selector such as `:nth-child`.\n\nThe attribute `span` can also be used inside a `<col>` element to expand the styling size.\n\n### The `colspan` and `rowspan` attributed\n\nAllow us to expand a `<th>` or `<td>` element across several rows or columns.\n\n<table>\n  <tr>\n    <th colspan=\"2\">Animals</th>\n  </tr>\n  <tr>\n    <th colspan=\"2\">Hippopotamus</th>\n  </tr>\n  <tr>\n    <th rowspan=\"2\">Horse</th>\n    <td>Mare</td>\n  </tr>\n  <tr>\n    <td>Stallion</td>\n  </tr>\n  <tr>\n    <th colspan=\"2\">Crocodile</th>\n  </tr>\n  <tr>\n    <th rowspan=\"2\">Chicken</th>\n    <td>Hen</td>\n  </tr>\n  <tr>\n    <td>Rooster</td>\n  </tr>\n</table>\n\n## A11y Concerns and Helpers\n\n### The `<caption>` Element\n\nYou can give your table a caption by putting it inside a `<caption>` element and nesting that inside the `<table>` element. You should put it just below the opening `<table>` tag.\n\n### The `<thead>`, `<tfoor>` and `<tbody>` Elements\n\nThese elements don't make the table any more accessible to screenreader users, and don't result in any visual enhancement on their own. They are however very useful for styling and layout — acting as useful hooks for adding CSS to your table.\n\n### The `scope` Attribute\n\nThe Scope attribute, which can be added to the `<th>` element to tell screenreaders exactly what cells the header is a header for can use the scope attribute with values like `colgroup`, `rowgroup`, `col` or `row` to help screenreders determine what these subheadings are for.\n\n### Using `id` and `header` Attributes\n\nAn alternative to using the scope attribute is to use id and headers attributes to create associations between headers and cells. The way they are used is as follows:\n\n- You add a unique id to each <th> element.\n- You add a headers attribute to each <td> element. Each headers attribute has to contain a list of the ids of all the <th> elements that act as a header for that cell, separated by spaces.\n","n":0.05}}},{"i":145,"$":{"0":{"v":"HTML Landmarks","n":0.707},"1":{"v":"## General Info\n\nLandmarks are HTML elements that act as regions of a page. There are seven native HTML elements that define these landmark regions:\n\n- `<aside>`\n- `<footer>`\n- `<form>`\n- `<header>`\n- `<main>`\n- `<nav>`\n- `<section>`\n\nBy properly using landmarks and headings, you provide users of assistive technologies a more operable and understandbale page: not only can screen readers navigate a page via landmarks and headings by opening a menu in their screen reader, but these elements also have their roles announced to provide additional context.\n","n":0.112}}},{"i":146,"$":{"0":{"v":"Forms","n":1},"1":{"v":"## General Info\n\n## Tips\n\nNote: You can also use the `<input>` element with the corresponding type to produce a button, for example `<input type=\"submit\">`. The main advantage of the `<button>` element is that the `<input>` element only allows plain text in its label whereas the `<button>` element allows full HTML content, allowing more complex, creative button content.\n\nMany assistive technologies will use the `<legend>` element as if it is a part of the label of each control inside the corresponding `<fieldset>` element. For example, some screen readers such as Jaws and NVDA will speak the legend's content before speaking the label of each control.\n\nEach time you have a set of radio buttons, you should nest them inside a `<fieldset>` element. There are other use cases, and in general the `<fieldset>` element can also be used to section a form.\n\nTest forms you create on screen readers!\n\n## Best Practices\n\n[Best Practices from Smashing Magazine](https://www.smashingmagazine.com/2009/07/web-form-validation-best-practices-and-tutorials/)\n\nMost field types are obvious, but there are exceptions. For example, credit cards are numeric, but the increment/decrement spinner is useless and it’s too easy to press up or down when entering a 16-digit number. It’s better to use a standard `text` type, but set the `inputmode` attribute to `numeric`, which shows an appropriate keyboard. Setting `autocomplete=\"cc-number\"` also suggests any pre-configured or previously entered card numbers.\n\n## Constraint Validation API\n\nExtends the standard HTML form validation to other elements and provides JS support for different functions.\n\n`<form novalidate>` will disable browser automatic validation and will allow validation scripts to take over.\n\nExample Usage:\n\n```html\n<form>\n  <label for=\"name\">Enter username (upper and lowercase letters): </label>\n  <input type=\"text\" name=\"name\" id=\"name\" required pattern=\"[A-Za-z]+\">\n  <button>Submit</button>\n</form>\n```\n\nThe basic HTML form validation features will cause this to produce a default error message if you try to submit the form with either no value filled in, or a value that does not match the pattern.\n\nIf you wanted to instead display custom error messages, you could use JavaScript like the following:\n\n```javascript\nconst nameInput = document.querySelector('input');\n\nnameInput.addEventListener('input', () => {\n  nameInput.setCustomValidity('');\n  nameInput.checkValidity();\n});\n\nnameInput.addEventListener('invalid', () => {\n  if(nameInput.value === '') {\n    nameInput.setCustomValidity('Enter your username!');\n  } else {\n    nameInput.setCustomValidity('Usernames can only contain upper and lowercase letters. Try again!');\n  }\n});\n```\n","n":0.054}}},{"i":147,"$":{"0":{"v":"Github_Actions","n":1},"1":{"v":"\n\n```yaml\nname: GitHub Actions Demo\non: [push]\njobs:\n  Explore-GitHub-Actions:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"🎉 The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - run: echo \"🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!\"\n      - run: echo \"🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.\"\n      - name: Check out repository code\n        uses: actions/checkout@v2\n      - run: echo \"💡 The ${{ github.repository }} repository has been cloned to the runner.\"\n      - run: echo \"🖥️ The workflow is now ready to test your code on the runner.\"\n      - name: List files in the repository\n        run: |\n          ls ${{ github.workspace }}\n      - run: echo \"🍏 This job's status is ${{ job.status }}.\"\n```\n","n":0.089}}},{"i":148,"$":{"0":{"v":"Git","n":1},"1":{"v":"## General Info\n\nGit is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).\n\n## Git Branch\n\nA branch is actually a pointer to a single commit! Hearing this, your first thought might be “Well if a branch is just a finger pointing at a single commit, how does that single commit know about all the commits that came before it?” The answer to this question is very simple: Each commit is also a pointer that points to the commit that came before it!\n\n![Git Branch and History](/assets/git-branch-and-history.png)\n\nBecause a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy. Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).\n\n## Git Commands\n\n### Git Squash (combining commits)\n\n```bash\ngit rebase -i --root\n```\n\n then\n\n ```text\npick e30ff48 Create first file\nsquash 92aa6f3 Create second file\npick 05e5413 Create third file and create fourth file\n```\n\nthen\n\n```bash\ngit rebase --continue\n```\n\n### Splitting Commits\n\n```bash\ngit rebase -i --root\n```\n\n ```text\npick e30ff48 Create first and second file\nedit 05e5413 Create third file and create fourth file\n```\n\n```bash\ngit reset HEAD^  # HEAD^ means 1 before the head\ngit add test3.md && git commit -m 'Create third file'\ngit add test4.md && git commit -m 'Create fourth file'\ngit rebase --continue\n```\n\n### Git Push Force\n\nThis is a very dangerous command, the `--force` option should be used only when you are certain that it is appropriate.\n\nFor git push --force only use it when appropriate, use it with caution, and preferably default to using git push --force-with-lease.\n\n### Git Amend\n\nFor git amend never amend commits that have been pushed to remote repositories.\n\n### Git Rebase\n\nIn Git, there are two main ways to integrate changes from one branch into another: the `merge` and the `rebase`.\n\nFor `git rebase` never rebase a repository that others may work off of.\n\n### Git Reset\n\nFor git reset never reset commits that have been pushed to remote repositories.\n\n### Git cherry-pick\n\nTakes a commit from somewhere else, and \"play it back\" wherever you are right now. Because this introduces the same change with a different parent, Git builds a new commit with a different ID.\n\n### Git Merge\n\n It performs a three-way merge between the two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2), creating a new snapshot (and commit).\n\n ![Basic Merge](/assets/basic-merge-1.png)\n","n":0.049}}},{"i":149,"$":{"0":{"v":"Merge Conflicts","n":0.707},"1":{"v":"## General Info\n\nMerge conflicts happen when you merge branches that have competing commits, and Git needs your help to decide which changes to incorporate in the final merge.\n\nIf your merge conflict is caused by competing line changes, such as when people make different changes to the same line of the same file on different branches in your Git repository, you can resolve it on GitHub using the conflict editor.\n\nFor all other types of merge conflicts, you must resolve the merge conflict in a local clone of the repository and push the change to your branch on GitHub. You can use the command line or a tool like GitHub Desktop to push the change.\n","n":0.094}}},{"i":150,"$":{"0":{"v":"DNS","n":1},"1":{"v":"When Fing DNS Is not Propagating and you think its Cox's Fault...\n\n`Powershell > ipconfig / flushdns`\n\nAnd then Chrome Decides to be a Turd\nchrome://net-internals/`#dns`\n","n":0.209}}},{"i":151,"$":{"0":{"v":"Dart Programming Language","n":0.577},"1":{"v":"## General Info\n\nDart is a programming language designed for client development, such as for the web and mobile apps. It is developed by Google and can also be used to build server and desktop applications.\n","n":0.169}}},{"i":152,"$":{"0":{"v":"CSS","n":1},"1":{"v":"## Cool Tools\n\n[Browser Default Styles](https://browserdefaultstyles.com/)\n\n### Box Model\n\nMargin collapses between elements.\n\n### Standard Box Model\n\n![Standard Box Model](/assets/images/2022-02-04-09-19-24.png)\n\nAlternate Box Model\n\n```CSS\nhtml {\n  box-sizing: border-box;\n}\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n```\n\n![Alternate Box Model](/assets/images/alternate-box-model.png)\n\n**Note:** The margin is not counted towards the actual size of the box — sure, it affects the total space that the box will take up on the page, but only the space outside the box. The box's area stops at the border — it does not extend into the margin.\n\n### Flex Box\n\nCentered on X and Y axis `justify-content: center` is the X axis `align-items: center` is the Y axis if the `flex-direction` is default `flex-direction: row`\n\n```CSS\n.box {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.box div {\n  width: 50px;\n  height: 50px;\n}\n```\n\n```HTML\n<div class=\"box\">\n  <div></div>\n</div>\n```\n\n### CSS Colors\n\n3 Digit Hex Code: The 3-digit hex code can only be used when both the values (RR, GG, and BB) are the same for each components. So, if we have #ff00cc, it can be written like this: #f0c.\n\n## Margins\n\n### Margin Auto\n\nMargin `auto` will center an element in the middle of the page.\n\n### Margin Collapse\n\nOnly happens in top or bottom margins, if two consecutive elements have top or bottom margins they are not additive but the greater of the two will be displayed.\n\n### Lists\n\n```css\nul {\n  /* To replace list marker with image */\n  list-style-image: url('sqpurple.gif');\n  /* To place list marker outside the list item, outside is default */\n  list-style-position: inside;\n  \n}\n```\n\n### Tables\n\nRemoving double borders on tables:\n\n```css\ntable {\n  border-collapse: collapse;\n}\n```\n\nResponsive Table: place the table in an element with `overflow-x: auto`\n\n```css\n<div style=\"overflow-x:auto;\">\n\n<table>\n... table content ...\n</table>\n\n</div>\n```\n\n### Z-Index\n\nz-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and flex items (elements that are direct children of display: flex elements).\n\nIf two positioned elements overlap each other without a z-index specified, the element defined last in the HTML code will be shown on top.\n\n### Clear-Fix Hack\n\nIf a floated element is taller than the containing element, it will \"overflow\" outside of its container.\n\n```css\n.clearfix::after {\n  content: \"\";\n  clear: both;\n  display: table;\n}\n```\n\n![Clearfix Problem](/assets/images/clearfix_prob.jpg)\n\n![Clearfix Solution](/assets/images/clearfix_solution.jpg)\n\n### Inline-Block\n\n- Compared to `display: inline`, the major difference is that `display: inline-block` allows to set a width and height on the element.\n\n- Also, with `display: inline-block`, the top and bottom margins/paddings are respected, but with `display: inline` they are not.\n\n- Compared to `display: block`, the major difference is that `display: inline-block` does not add a line-break after the element, so the element can sit next to other elements.\n\n<style>\nspan.a {\n  display: inline; /*the default for span*/\n  width: 100px;\n  height: 100px;\n  padding: 5px;\n  border: 1px solid blue;  \n  background-color: yellow;\n  color: black;\n}\n\nspan.b {\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n  padding: 5px;\n  border: 1px solid blue;\n  background-color: yellow;\n  color: black;\n}\n\nspan.c {\n  display: block;\n  width: 100px;\n  height: 100px;\n  padding: 5px;\n  border: 1px solid blue;\n  background-color: yellow;\n  color: black;\n}\n</style>\n</head>\n<body>\n\n<h3>display: inline</h3>\n<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum consequat scelerisque elit sit amet consequat. Aliquam erat volutpat. <span class=\"a\">Aliquam</span> <span class=\"a\">venenatis</span> gravida nisl sit amet facilisis. Nullam cursus fermentum velit sed laoreet. </div>\n\n<h3>display: inline-block</h3>\n<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum consequat scelerisque elit sit amet consequat. Aliquam erat volutpat. <span class=\"b\">Aliquam</span> <span class=\"b\">venenatis</span> gravida nisl sit amet facilisis. Nullam cursus fermentum velit sed laoreet. </div>\n\n<h3>display: block</h3>\n<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum consequat scelerisque elit sit amet consequat. Aliquam erat volutpat. <span class=\"c\">Aliquam</span> <span class=\"c\">venenatis</span> gravida nisl sit amet facilisis. Nullam cursus fermentum velit sed laoreet. </div>\n\n</body>\n</html>\n\n### Centering Elements\n\n**Center Align Element:** To horizontally center a block element (like `<div>`), use `margin: auto;` **Note**: Center aligning has no effect if the width property is not set (or set to 100%).\n\n**Center Align Text:** To just center the text inside an element, use text-align: center;\n\n**Center An Image:** To center an image, set left and right margin to auto and make it into a block element:\n\n**Center Vertically:**\n\n- Use bottom and top padding.\n\n-You can also use `line-height` with a value equal to the height property of the element.\n\n- If padding and line-height are not options, another solution is to use positioning and the transform property: `transform: translate(-50%, -50%);`\n\n- You can also use flexbox to center things. Just note that flexbox is not supported in IE10 and earlier versions:\n\n```css\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  border: 3px solid green;\n}\n```\n\n### CSS Combinators\n\n#### Descendant Selector\n\n```css\ndiv p {\n  background-color: yellow;\n}\n```\n\nSelects all P elements inside a div.\n\n#### Child Selector (>)\n\n```css\ndiv > p {\n  background-color: yellow;\n}\n```\n\nSelects all direct child P elements inside a div.\n\n#### Adjacent Sibling Selector (+)\n\nThe adjacent sibling selector is used to select an element that is directly after another specific element.\n\n```css\ndiv + p {\n  background-color: yellow;\n}\n```\n\nSelects the first `<p>` element that are placed immediately after `<div>` elements\n\n#### General Sibling Selector\n\nThe general sibling selector selects all elements that are next siblings of a specified element.\n\n```css\ndiv ~ p {\n  background-color: yellow;\n}\n```\n\nSelects all `<p>` elements that are next siblings of `<div>` elements:\n\n### Pseudo Classes\n\nA pseudo-class is used to define a special state of an element.\n\n**Note:** `a:hover` MUST come after `a:link` and `a:visited` in the CSS definition in order to be effective! `a:active` MUST come after `a:hover` in the CSS definition in order to be effective!\n\nPseudo-class names are not case-sensitive.\n\n`:first-child`\n\n`:lang(es)` usage `<q lang=\"es\">`\n\n<table class=\"ws-table-all notranslate\">\n  <tbody><tr>\n    <th style=\"width:20%\">Selector</th>\n    <th style=\"width:20%\">Example</th>\n    <th>Example description</th>\n  </tr>\n  <tr>\n    <td>:active</td>\n    <td>a:active</td>\n    <td>Selects the active link</td>\n  </tr>\n  <tr>\n    <td>:checked</td>\n    <td>input:checked</td>\n    <td>Selects every checked &lt;input&gt; element</td>\n  </tr>\n  <tr>\n    <td>:disabled</td>\n    <td>input:disabled</td>\n    <td>Selects every disabled &lt;input&gt; element</td>\n  </tr>\n  <tr>\n    <td>:empty</td>\n    <td>p:empty</td>\n    <td>Selects every &lt;p&gt; element that has no children</td>\n  </tr>\n  <tr>\n    <td>:enabled</td>\n    <td>input:enabled</td>\n    <td>Selects every enabled &lt;input&gt; element</td>\n  </tr>\n  <tr>\n    <td>:first-child</td>\n    <td>p:first-child</td>\n    <td>Selects every &lt;p&gt; elements that is the first child of its parent</td>\n  </tr>\n  <tr>\n    <td>:first-of-type</td>\n    <td>p:first-of-type</td>\n    <td>Selects every &lt;p&gt; element that is the first &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:focus</td>\n    <td>input:focus</td>\n    <td>Selects the &lt;input&gt; element that has focus</td>\n  </tr>\n  <tr>\n    <td>:hover</td>\n    <td>a:hover</td>\n    <td>Selects links on mouse over</td>\n  </tr>\n  <tr>\n    <td>:in-range</td>\n    <td>input:in-range</td>\n    <td>Selects &lt;input&gt; elements with a value within a specified range</td>\n  </tr>\n  <tr>\n    <td>:invalid</td>\n    <td>input:invalid</td>\n    <td>Selects all &lt;input&gt; elements with an invalid value</td>\n  </tr>\n  <tr>\n    <td>:lang(<i>language</i>)</td>\n    <td>p:lang(it)</td>\n    <td>Selects every &lt;p&gt; element with a lang attribute value starting with \"it\"</td>\n  </tr>\n  <tr>\n    <td>:last-child</td>\n    <td>p:last-child</td>\n    <td>Selects every &lt;p&gt; elements that is the last child of its parent</td>\n  </tr>\n  <tr>\n    <td>:last-of-type</td>\n    <td>p:last-of-type</td>\n    <td>Selects every &lt;p&gt; element that is the last &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:link</td>\n    <td>a:link</td>\n    <td>Selects all unvisited links</td>\n  </tr>\n  <tr>\n    <td>:not(selector)</td>\n    <td>:not(p)</td>\n    <td>Selects every element that is not a &lt;p&gt; element</td>\n  </tr>\n  <tr>\n    <td>:nth-child(n)</td>\n    <td>p:nth-child(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second child of its parent</td>\n  </tr>\n  <tr>\n    <td>:nth-last-child(n)</td>\n    <td>p:nth-last-child(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second child of its parent, counting from the last child</td>\n  </tr>\n  <tr>\n    <td>:nth-last-of-type(n)</td>\n    <td>p:nth-last-of-type(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second &lt;p&gt; element of its parent, counting from the last child</td>\n  </tr>\n  <tr>\n    <td>:nth-of-type(n)</td>\n    <td>p:nth-of-type(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:only-of-type</a></td>\n    <td>p:only-of-type</td>\n    <td>Selects every &lt;p&gt; element that is the only &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:only-child</a></td>\n    <td>p:only-child</td>\n    <td>Selects every &lt;p&gt; element that is the only child of its parent</td>\n  </tr>\n  <tr>\n    <td>:optional</a></td>\n    <td>input:optional</td>\n    <td>Selects &lt;input&gt; elements with no \"required\" attribute</td>\n  </tr>\n  <tr>\n    <td>:out-of-range</a></td>\n    <td>input:out-of-range</td>\n    <td>Selects &lt;input&gt; elements with a value outside a specified range</td>\n  </tr>\n  <tr>\n    <td>:read-only</a></td>\n    <td>input:read-only</td>\n    <td>Selects &lt;input&gt; elements with a \"readonly\" attribute specified</td>\n  </tr>\n  <tr>\n    <td>:read-write</a></td>\n    <td>input:read-write</td>\n    <td>Selects &lt;input&gt; elements with no \"readonly\" attribute</td>\n  </tr>\n  <tr>\n    <td>:required</a></td>\n    <td>input:required</td>\n    <td>Selects &lt;input&gt; elements with a \"required\" attribute specified</td>\n  </tr>\n  <tr>\n    <td>:root</a></td>\n    <td>root</td>\n    <td>Selects the document's root element</td>\n  </tr>\n  <tr>\n    <td>:target</a></td>\n    <td>#news:target</td>\n    <td>Selects the current active #news element (clicked on a URL containing that anchor name)</td>\n  </tr>\n  <tr>\n    <td>:valid</a></td>\n    <td>input:valid</td>\n    <td>Selects all &lt;input&gt; elements with a valid value</td>\n  </tr>\n  <tr>\n    <td>:visited</a></td>\n    <td>a:visited</td>\n    <td>Selects all visited links</td>\n  </tr>\n</tbody></table>\n\n## Resizing Text\n\nYou can use `calc()` to create a resizing rule that keeps a baseline size but allows you to enlarge as the viewport increases.\n\n```css\nbody {\n  // font grows 1px for every 100px of viewport width\n  font-size: calc(16px + 1vw);\n  // leading grows along with font,\n  // with an additional 0.1em + 0.5px per 100px of the viewport\n  line-height: calc(1.1em + 0.5vw);\n}\n```\n\n## Fluid Aspect Ratios\n\n```css\n/* full-width * aspect-ratio */\n.full-width {\n  width: 100vw;\n  height: calc(100vw * (9/16));\n}\n```\n\n## CSS Truncate\n\nAllows you to truncate a line of text. [CSS Tricks Page](https://css-tricks.com/snippets/css/truncate-string-with-ellipsis/)\n\n```css\n.truncate {\n  width: 250px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n## Opacity\n\nIf you dont want to apply opacity to child elements you can use RGBA colors instead of the `opacity` css property.\n","n":0.027}}},{"i":153,"$":{"0":{"v":"CSS Variables","n":0.707},"1":{"v":"## CSS Variable Scope\n\nSimilar to Scope in JS, where the variable is decalred in the HTML tree defines where it can be used within that element or its children but does not work on its sibling or parent elements.\n\n## Theme Example\n\n```javascript\nfunction setTheme() {\n  const root = document.documentElement;\n  const newTheme = root.className === 'dark' ? 'light' : 'dark';\n  root.className = newTheme;\n  \n  document.querySelector('.theme-name').textContent = newTheme;\n}\n\ndocument.querySelector('.theme-toggle').addEventListener('click', setTheme)\n```\n\n```css\n:root.dark{\n  --border-btn: 1px solid rgb(220, 220, 220);\n  --color-base-bg: rgb(18, 18, 18);\n  --color-base-text: rgb(240, 240, 240);\n  --color-btn-bg: rgb(36, 36, 36);\n}\n\n:root.light {\n  --border-btn: 1px solid rgb(36, 36, 36);\n  --color-base-bg: rgb(240, 240, 240);\n  --color-base-text: rgb(18, 18, 18);\n  --color-btn-bg: rgb(220, 220, 220);\n}\n```\n\n## User Agent Theme with Media Query\n\n```css\n@media (prefers-color-scheme: dark) {\n  :root {\n    --border-btn: 1px solid rgb(220, 220, 220);\n    --color-base-bg: rgb(18, 18, 18);\n    --color-base-text: rgb(240, 240, 240);\n    --color-btn-bg: rgb(36, 36, 36);\n    --theme-name: \"dark\";\n  }\n}\n```\n","n":0.086}}},{"i":154,"$":{"0":{"v":"Transform","n":1},"1":{"v":"## Chained Transforms\n\nThe transform functions are multiplied in order from left to right, meaning that composite transforms are e6ffectively applied in order from right to left.\n\n### Chained Transform Example\n\n```html\n<div class=\"red-box\"></div>\n<div class=\"blue-box\"></div>\n```\n\n```css\n.red-box,\n.blue-box {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n}\n\n.red-box {\n  background: red;\n  transform: rotate(45deg) translate(200%);\n}\n\n.blue-box {\n  background: blue;\n  transform: translate(200%) rotate(45deg);\n}\n```\n\nHere is the result:\n\n![Chain CSS Transform Result](/assets/css-chaining-transform.png)\n","n":0.134}}},{"i":155,"$":{"0":{"v":"CSS Specificity","n":0.707},"1":{"v":"## Calculating CSS Specificity Value\n\n- If the element has inline styling, that automatically1 wins (1,0,0,0 points)\n- For each ID value, apply 0,1,0,0 points\n- For each class value (or pseudo-class or attribute selector), apply 0,0,1,0 points\n-For each element reference, apply 0,0,0,1 point\n\n## Important Notes\n\n- The universal selector (*) has no specificity value (0,0,0,0)\n- Pseudo-elements (e.g. :first-line) get 0,0,0,1 unlike their psuedo-class brethren which get 0,0,1,0\n- The pseudo-class :not() adds no specificity by itself, only what’s inside it’s parentheses.\n- The !important value appended a CSS property value is an automatic win. It overrides even inline styles from the markup. The only way an !important value can be overridden is with another !important rule declared later in the CSS and with equal or great specificity value otherwise. You could think of it as adding 1,0,0,0,0 to the specificity value.\n\n## Examples\n\n![Specificity Explainer](assets\\images\\specificity_blank.webp){width: 300px}\n\n![Specificity Example 1](assets\\images\\cssspecificity_ex1.webp){width: 300px}\n\n![Specificity Example 2](assets\\images\\cssspecificity_ex2.webp){width: 300px}\n\n![Specificity Example 3](assets\\images\\cssspecificity_ex3.webp){width: 300px}\n\n![Specificity Example 4](assets\\images\\cssspecificity_ex4.webp){width: 300px}\n\n![Specificity Example 5](assets\\images\\cssspecificity_ex5.webp){width: 300px}\n","n":0.081}}},{"i":156,"$":{"0":{"v":"Selectors","n":1},"1":{"v":"\n## Attribute Spaced Selector\n\nAt times attribute values may be spaced apart, in which only one of the words needs to be matched in order to make a selection. In this event using the tilde character, ~, within the square brackets of a selector between the attribute name and equals sign denotes an attribute value that should be whitespace-separated, with one word matching the exact stated value.\n\n```css\na[rel~=\"tag\"] {...}\n```\n\n```html\n<a href=\"#\" rel=\"tag nofollow\">...</a>\n```\n\n## Attribute Hyphenated Selector\n\nWhen an attribute value is hyphen-separated, rather than whitespace-separated, the vertical line character, |, may be used within the square brackets of a selector between the attribute name and equals sign. The vertical line denotes that the attribute value may be hyphen-separated however the hyphen-separated words must begin with the stated value.\n\n```css\na[lang|=\"en\"] {...}\n```\n\n```html\n<a href=\"#\" lang=\"en-US\">...</a>\n```\n\n## Negative Pseudo-class Numbers & Expressions\n\nTo make things a bit more complicated negative numbers may also be used. For example, the li:nth-child(6n-4) selector will start counting every sixth list item starting at negative four, selecting the second, eighth, and fourteenth list items and so forth. The same selector, li:nth-child(6n-4), could also be written as li:nth-child(6n+2), without the use of a negative b variable.\n\nA negative a variable, or a negative n argument, must be followed by a positive b variable. When preceded by a negative a variable or negative n argument the b variable identifies how high the counting will reach. For example, the li:nth-child(-3n+12) selector will select every third list item within the first twelve list items. The selector li:nth-child(-n+9) will select the first nine list items within a list, as the n argument, without any stated a variable, is defaulted to -1.\n\n## Target Pseudo-class\n\nThe :target pseudo-class is used to style elements when an element’s ID attribute value matches that of the URI fragment identifier. The fragment identifier within a URI can be recognized by the hash character, #, and what directly follows it. The URL [http://example.com/index.html#hello](http://example.com/index.html#hello) includes the fragment identifier of hello. When this identifier matches the ID attribute value of an element on the page, `<section id=\"hello\">` for example, that element may be identified and stylized using the `:target` pseudo-class. Fragment identifiers are most commonly seen when using on page links, or linking to another part of the same page.\n\n## Textual Pseudo-elements\n\nThe first pseudo-elements ever released were the :first-letter and :first-line textual pseudo-elements. The :first-letter pseudo-element will identify the first letter of text within an element, while the :first-line pseudo-element will identify the first line of text within an element.\n","n":0.05}}},{"i":157,"$":{"0":{"v":"Responsive Image","n":0.707},"1":{"v":"## Basic Responsiveness\n\n- Do not set width\n- Set height to auto\n\n## Background Image\n\n```css\nbackground-position: center;\nbackground-size: cover\n```\n\n## Object Fit Property\n\nWorks on `<img>` tags\n\n```css\nobject-fit: cover;\n```\n\nor\n\n```css\nobject-fit: contain;\n```\n\n## SRCSETs\n\nThe srcset and sizes attributes look complicated, but they're not too hard to understand if you format them as shown below, with a different part of the attribute value on each line. Each value contains a comma-separated list, and each part of those lists is made up of three sub-parts.\n\n```html\n<img srcset=\"elva-fairy-480w.jpg 480w,\n             elva-fairy-800w.jpg 800w\"\n     sizes=\"(max-width: 600px) 480px,\n            800px\"\n     src=\"elva-fairy-800w.jpg\"\n     alt=\"Elva dressed as a fairy\">\n```\n\n`srcset` defines the set of images we will allow the browser to choose between, and what size each image is. Each set of image information is separated from the previous one by a comma. For each one, we write:\n\n1. An image filename (elva-fairy-480w.jpg)\n2. A space\n3. The image's intrinsic width in pixels (480w) — note that this uses the w unit, not px as you might expect. An image's intrinsic size is its real size, which can be found by inspecting the image file on your computer (for example, on a Mac you can select the image in Finder and press Cmd + I to bring up the info screen).\n\n`sizes` defines a set of media conditions (e.g. screen widths) and indicates what image size would be best to choose, when certain media conditions are true — these are the hints we talked about earlier. In this case, before each comma we write:\n\n1. A media condition ((max-width:600px)) — you'll learn more about these in the CSS topic, but for now let's just say that a media condition describes a possible state that the screen can be in. In this case, we are saying \"when the viewport width is 600 pixels or less\".\n2. A space\n3. The width of the slot the image will fill when the media condition is true (480px)\n\n### SRCSET Resolution Switching: Same size, different resolutions\n\nIf you're supporting multiple display resolutions, but everyone sees your image at the same real-world size on the screen, you can allow the browser to choose an appropriate resolution image by using srcset with x-descriptors and without sizes — a somewhat easier syntax!\n\n```html\n<img srcset=\"elva-fairy-320w.jpg,\n             elva-fairy-480w.jpg 1.5x,\n             elva-fairy-640w.jpg 2x\"\n     src=\"elva-fairy-640w.jpg\"\n     alt=\"Elva dressed as a fairy\">\n```\n\nIn this example, the following CSS is applied to the image so that it will have a width of 320 pixels on the screen (also called CSS pixels):\n\n```css\nimg {\n    width: 320px;\n}\n```\n\nIn this case, sizes is not needed — the browser works out what resolution the display is that it is being shown on, and serves the most appropriate image referenced in the srcset. So if the device accessing the page has a standard/low resolution display, with one device pixel representing each CSS pixel, the `elva-fairy-320w.jpg` image will be loaded (the 1x is implied, so you don't need to include it.) If the device has a high resolution of two device pixels per CSS pixel or more, the `elva-fairy-640w.jpg` image will be loaded. The 640px image is 93KB, whereas the 320px image is only 39KB.\n\n## `<Picture>` Element\n\nThe `<picture>` element is a wrapper containing several `<source>` elements that provide different sources for the browser to choose from, followed by the all-important `<img>` element.\n\n```html\n<picture>\n  <source media=\"(max-width: 799px)\" srcset=\"elva-480w-close-portrait.jpg\">\n  <source media=\"(min-width: 800px)\" srcset=\"elva-800w.jpg\">\n  <img src=\"elva-800w.jpg\" alt=\"Chris standing up holding his daughter Elva\">\n</picture>\n```\n\n- The `<source>` elements include a media attribute that contains a media condition — as with the first srcset example, these conditions are tests that decide which image is shown — the first one that returns true will be displayed. In this case, if the viewport width is 799px wide or less, the first `<source>` element's image will be displayed. If the viewport width is 800px or more, it'll be the second one.\n- The srcset attributes contain the path to the image to display. Just as we saw with `<img>` above, `<source>` can take a srcset attribute with multiple images referenced, as well as a sizes attribute. So, you could offer multiple images via a `<picture>` element, but then also offer multiple resolutions of each one. Realistically, you probably won't want to do this kind of thing very often.\n- In all cases, you must provide an `<img>` element, with src and alt, right before `</picture>`, otherwise no images will appear. This provides a default case that will apply when none of the media conditions return true (you could actually remove the second `<source>` element in this example), and a fallback for browsers that don't support the `<picture>` element.\n\n## Reference Links\n\n[CSS Tricks Article](https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/)\n\n[MDN Page](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\n","n":0.037}}},{"i":158,"$":{"0":{"v":"Pseudo Classes","n":0.707},"1":{"v":"## General Info\n\nA pseudo-class is used to define a special state of an element.\n\n**Note:** `a:hover` MUST come after `a:link` and `a:visited` in the CSS definition in order to be effective! `a:active` MUST come after `a:hover` in the CSS definition in order to be effective!\n\nPseudo-class names are not case-sensitive.\n\n`:first-child`\n\n`:lang(es)` usage `<q lang=\"es\">`\n\n<table class=\"ws-table-all notranslate\">\n  <tbody><tr>\n    <th style=\"width:20%\">Selector</th>\n    <th style=\"width:20%\">Example</th>\n    <th>Example description</th>\n  </tr>\n  <tr>\n    <td>:active</td>\n    <td>a:active</td>\n    <td>Selects the active link</td>\n  </tr>\n  <tr>\n    <td>:checked</td>\n    <td>input:checked</td>\n    <td>Selects every checked &lt;input&gt; element</td>\n  </tr>\n  <tr>\n    <td>:disabled</td>\n    <td>input:disabled</td>\n    <td>Selects every disabled &lt;input&gt; element</td>\n  </tr>\n  <tr>\n    <td>:empty</td>\n    <td>p:empty</td>\n    <td>Selects every &lt;p&gt; element that has no children</td>\n  </tr>\n  <tr>\n    <td>:enabled</td>\n    <td>input:enabled</td>\n    <td>Selects every enabled &lt;input&gt; element</td>\n  </tr>\n  <tr>\n    <td>:first-child</td>\n    <td>p:first-child</td>\n    <td>Selects every &lt;p&gt; elements that is the first child of its parent</td>\n  </tr>\n  <tr>\n    <td>:first-of-type</td>\n    <td>p:first-of-type</td>\n    <td>Selects every &lt;p&gt; element that is the first &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:focus</td>\n    <td>input:focus</td>\n    <td>Selects the &lt;input&gt; element that has focus</td>\n  </tr>\n  <tr>\n    <td>:hover</td>\n    <td>a:hover</td>\n    <td>Selects links on mouse over</td>\n  </tr>\n  <tr>\n    <td>:in-range</td>\n    <td>input:in-range</td>\n    <td>Selects &lt;input&gt; elements with a value within a specified range</td>\n  </tr>\n  <tr>\n    <td>:invalid</td>\n    <td>input:invalid</td>\n    <td>Selects all &lt;input&gt; elements with an invalid value</td>\n  </tr>\n  <tr>\n    <td>:lang(<i>language</i>)</td>\n    <td>p:lang(it)</td>\n    <td>Selects every &lt;p&gt; element with a lang attribute value starting with \"it\"</td>\n  </tr>\n  <tr>\n    <td>:last-child</td>\n    <td>p:last-child</td>\n    <td>Selects every &lt;p&gt; elements that is the last child of its parent</td>\n  </tr>\n  <tr>\n    <td>:last-of-type</td>\n    <td>p:last-of-type</td>\n    <td>Selects every &lt;p&gt; element that is the last &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:link</td>\n    <td>a:link</td>\n    <td>Selects all unvisited links</td>\n  </tr>\n  <tr>\n    <td>:not(selector)</td>\n    <td>:not(p)</td>\n    <td>Selects every element that is not a &lt;p&gt; element</td>\n  </tr>\n  <tr>\n    <td>:nth-child(n)</td>\n    <td>p:nth-child(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second child of its parent</td>\n  </tr>\n  <tr>\n    <td>:nth-last-child(n)</td>\n    <td>p:nth-last-child(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second child of its parent, counting from the last child</td>\n  </tr>\n  <tr>\n    <td>:nth-last-of-type(n)</td>\n    <td>p:nth-last-of-type(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second &lt;p&gt; element of its parent, counting from the last child</td>\n  </tr>\n  <tr>\n    <td>:nth-of-type(n)</td>\n    <td>p:nth-of-type(2)</td>\n    <td>Selects every &lt;p&gt; element that is the second &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:only-of-type</a></td>\n    <td>p:only-of-type</td>\n    <td>Selects every &lt;p&gt; element that is the only &lt;p&gt; element of its parent</td>\n  </tr>\n  <tr>\n    <td>:only-child</a></td>\n    <td>p:only-child</td>\n    <td>Selects every &lt;p&gt; element that is the only child of its parent</td>\n  </tr>\n  <tr>\n    <td>:optional</a></td>\n    <td>input:optional</td>\n    <td>Selects &lt;input&gt; elements with no \"required\" attribute</td>\n  </tr>\n  <tr>\n    <td>:out-of-range</a></td>\n    <td>input:out-of-range</td>\n    <td>Selects &lt;input&gt; elements with a value outside a specified range</td>\n  </tr>\n  <tr>\n    <td>:read-only</a></td>\n    <td>input:read-only</td>\n    <td>Selects &lt;input&gt; elements with a \"readonly\" attribute specified</td>\n  </tr>\n  <tr>\n    <td>:read-write</a></td>\n    <td>input:read-write</td>\n    <td>Selects &lt;input&gt; elements with no \"readonly\" attribute</td>\n  </tr>\n  <tr>\n    <td>:required</a></td>\n    <td>input:required</td>\n    <td>Selects &lt;input&gt; elements with a \"required\" attribute specified</td>\n  </tr>\n  <tr>\n    <td>:root</a></td>\n    <td>root</td>\n    <td>Selects the document's root element</td>\n  </tr>\n  <tr>\n    <td>:target</a></td>\n    <td>#news:target</td>\n    <td>Selects the current active #news element (clicked on a URL containing that anchor name)</td>\n  </tr>\n  <tr>\n    <td>:valid</a></td>\n    <td>input:valid</td>\n    <td>Selects all &lt;input&gt; elements with a valid value</td>\n  </tr>\n  <tr>\n    <td>:visited</a></td>\n    <td>a:visited</td>\n    <td>Selects all visited links</td>\n  </tr>\n</tbody></table>\n","n":0.046}}},{"i":159,"$":{"0":{"v":"Position","n":1},"1":{"v":"## General Info\n\n![CSS Positioning Cheatsheet](assets/images/cssposition.png){width:700px}\n\n## Static\n\n- The element is positioned according to the normal flow of the document.\n- The top, right, bottom, left, and z-index properties have no effect.\n\n## Relative\n\n- The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left.\n- The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were static.\n- Child absolute elements how remain within the bounds of a relative element.\n\n## Absolute\n\n- Removes from document order flow\n- Allows use of top, right, etc\n- Absolute elements will remain within the bounds of any relative and absolute parent element or the root of the document.\n\n## Fixed\n\n- Removes from document order flow\n- Fixed element to the viewport\n- Allows use of top, right, etc\n- Fixed position when you scroll\n\n## Sticky\n\n- Combination between relative and absolute\n- It is part of the normal document flow until it is scrolled past\n- Once scrolled it becomes fixed to based on its position\n","n":0.074}}},{"i":160,"$":{"0":{"v":"Media Queries","n":0.707},"1":{"v":"## General Info\n\nWith media queries it is possible to completely restyle your web projects based on the size of a user’s screen.\n\n## Syntax\n\n```css\nbody {\n  margin: 24px;\n}\n\n@media (max-width: 600px) {\n  body {\n    margin: 8px;\n  }\n}\n```\n\nIn the above example, margin is changed based on screen size. Specifically, on all screens below or equal to 600px, the margin will be 8px, and on all screens above 600px, it will be 24px.\n\n## Best Practices\n\n1. Limit Media Queries: minimize your media-query usage and rely more on the natural flexibility of your layouts.\n2. Common Breakpoints:\n    - < 600px Mobile\n    - 600px - 1200px Tablet\n    - `>` 1200px Desktop\n    - `>` 2000px Ultra Wide\n3. Zooming: in most browsers, zooming in on a webpage will change the effective resolution of that page.\n4. Other Queries: `min-width` (screens larger than a given value), `max-height` & `min-height`\n\n## More Complex Queries\n\n### Combining Multiple Types of Features\n\n```css\n@media (min-width: 30em) and (orientation: landscape) { ... }\n@media screen and (min-width: 30em) and (orientation: landscape) { ... }\n```\n\n### Testing for Multiple Queries\n\nYou can use a comma-separated list to apply styles when the user's device matches any one of various media types, features, or states. For instance, the following rule will apply its styles if the user's device has either a minimum height of 680px or is a screen device in portrait mode:\n\n```css\n@media (min-height: 680px), screen and (orientation: portrait) { ... }\n```\n\nTaking the above example, if the user had a printer with a page height of 800px, the media statement would return true because the first query would apply. Likewise, if the user were on a smartphone in portrait mode with a viewport height of 480px, the second query would apply and the media statement would still return true.\n\n### Inverting a Query's Meaning\n\nThe not keyword inverts the meaning of an entire media query. It will only negate the specific media query it is applied to. (Thus, it will not apply to every media query in a comma-separated list of media queries.) The not keyword can't be used to negate an individual feature query, only an entire media query. The not is evaluated last in the following query:\n\n```css\n@media not all and (monochrome) { ... }\n```\n\n... so that the above query is evaluated like this:\n\n```css\n@media not (all and (monochrome)) { ... }\n```\n\n### Improving compatibility with older browsers\n\nThe only keyword prevents older browsers that do not support media queries with media features from applying the given styles. It has no effect on modern browsers.\n\n```css\n@media only screen and (color) { ... }\n```\n","n":0.049}}},{"i":161,"$":{"0":{"v":"Image Sprites","n":0.707},"1":{"v":"## General Info\n\n![Image Sprites](/assets/images/img_navsprites_hover.gif)\n\nYou can use an image sprite to reduce the number of requests done for images and then use css to select a part of the sprite for your image. Here is an example\n\n```css\n#home {\n  width: 46px; /* Width of the Sprite You Want Selected */\n  height: 44px; /* Height of the Sprite You Want Selected */\n  background: url(img_navsprites.gif) 0 0; /* Image has to be pulled as a background for this to work, the numbers at the end indicate location of the sprite in x(left) and y(top) axis */\n}\n\n\n#next {\n  width: 46px; \n  height: 44px; \n  background: url(img_navsprites.gif) 46 0; \n  }\n```\n","n":0.098}}},{"i":162,"$":{"0":{"v":"Grid","n":1},"1":{"v":"## Grid Template Shorthand\n\n```css\n.container {\n  display: grid;\n  grid-template: 50px 50px / 50px 50px 50px;\n}\n```\n\nis the same as:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px;\n  grid-template-rows: 50px 50px;\n}\n```\n\n## Implicit Grid\n\nIf we add additional items from to those defined in the template they will be placed on the grid but they will not have explicit size values assigned to them unless you use `grid-auto-rows: 50px;` css property.\n\n## Span\n\nGrid defaults to spanning one track. You can use the span keyword when setting up grid columns or rows to extend the length based on the number of spans. For example:\n\n```css\n.box1 {\n    grid-column: 1;\n    grid-row: 1 / span 3;\n}\n```\n\n## Grid Area Property\n\nShorthand for:\n\n- grid-row-start\n- grid-column-start\n- grid-row-end\n- grid-column-end\n\n```css\n.box1 {\n   grid-area: 1 / 1 / 4 / 2;\n}\n```\n\n## The Repeat CSS Function\n\n```css\n.grid-container {\n  grid-template-rows: 150px 150px;\n  grid-template-columns: 150px 150px 150px 150px 150px;\n}\n```\n\ncan be written as\n\n```css\n.grid-container {\n  grid-template-rows: repeat(2, 150px);\n  grid-template-columns: repeat(5, 150px);\n}\n```\n","n":0.083}}},{"i":163,"$":{"0":{"v":"Functions","n":1},"1":{"v":"## Use Cases\n\n- [Web.dev Examples for min(), max() and clamp()](https://web.dev/min-max-clamp/)\n- [MDN List of all CSS Functions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions)\n\n### calc()\n\n- Mixing Units, ex:\n\n```css\n:root {\n    --header: 3rem;\n    --footer: 40px;\n    --main: calc(100vh - calc(var(--header) + var(--footer)));\n}\n```\n\n### min() & max()\n\n- Allows you to set different types of behaviors based on elements current size.\n\n```css\n#iconHolder {\n  width: min(150px, 100%);\n  height: min(150px, 100%);\n  box-sizing: border-box;\n  border: 6px solid blue;\n}\n```\n\n### clamp()\n\n- Great way to make elements fluid and responsive. clamp() takes 3 values:\n\n    1. the smallest value (320px)\n    2. the ideal value (80vw)\n    3. the largest value (60rem)\n\n### conic-gradient()\n\n- Cool Stuff\n\n```css\nbackground: conic-gradient( \n    red 6deg, orange 6deg 18deg, yellow 18deg 45deg, \n    green 45deg 110deg, blue 110deg 200deg, purple 200deg);\n```\n\n<div style=\"background: conic-gradient(red 6deg, orange 6deg 18deg, yellow 18deg 45deg, green 45deg 110deg, blue 110deg 200deg, purple 200deg);width:200px;height:200px\" ></div>\n\n### cross-fade\n","n":0.088}}},{"i":164,"$":{"0":{"v":"CSS Only Scroll","n":0.577},"1":{"v":"Here is the code from CSS Tricks on how to create a scroll tracker that is made only with css.\n\n```scss\nmain{\nmargin-top: 128px;\n}\n\n@supports (height: 100vh) {\nbody{\nbackground: linear-gradient(to right top, #0089f2 50%, #DDD 50%);\nbackground-size: 100% calc(100% - 100vh + 129px);\nbackground-repeat: no-repeat;\n}\n\nbody:before{\ncontent:'';\nposition: fixed;\ntop: 128px;\nbottom: 0;\nwidth: 100%;\nz-index: -1;\nbackground: white;\n}\n}\n```\n\n```html\n<header>\n<h1>Scroll Indicator</h1>\n</header>\n<main>\n<h2>I was interested to see if I could make a scroll indicator <a href=\"https://codepen.io/derekjp/pen/pJzpxB\" target=\"_blank\">like this</a> with just CSS.</h2>\n<p>You can! But maybe you shouldn't. This is an interesting consequence of a bunch of hacks held together with duct tape. It uses z-index hacks, gradient hacks and tricks with calc and viewport units.</p>\n<p>Having said that, hacks are not always bad. I love hacks and many of us have made quite a good living selling floats and clearfixes.</p>\n<p>The techniques used here are well supported, if not conventional. If you can read the CSS, understand how it works, and how to change it, and you think this works better for you than JavaScript, feel free to implement it. Just be aware of the z-index behaviour and possible conflict with other CSS using negative z-index.</p>\n<hr>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Donec id elit non mi porta gravida at eget metus. Aenean lacinia bibendum nulla sed consectetur.</p>\n<h3>Tristique Aenean Etiam Cras</h3>\n<p>Donec id elit non mi porta gravida at eget metus. Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue. Donec sed odio dui. Donec id elit non mi porta gravida at eget metus. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.</p>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n<h3>Bibendum Aenean Dapibus Tristique</h3>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n<h2>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</h2>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Donec id elit non mi porta gravida at eget metus. Aenean lacinia bibendum nulla sed consectetur.</p>\n<h3>Tristique Aenean Etiam Cras</h3>\n<p>Donec id elit non mi porta gravida at eget metus. Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue. Donec sed odio dui. Donec id elit non mi porta gravida at eget metus. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.</p>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n<h3>Bibendum Aenean Dapibus Tristique</h3>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n<h3>Tristique Aenean Etiam Cras</h3>\n<p>Donec id elit non mi porta gravida at eget metus. Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue. Donec sed odio dui. Donec id elit non mi porta gravida at eget metus. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.</p>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n<h3>Bibendum Aenean Dapibus Tristique</h3>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n<h2>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</h2>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Donec id elit non mi porta gravida at eget metus. Aenean lacinia bibendum nulla sed consectetur.</p>\n<h3>Tristique Aenean Etiam Cras</h3>\n<p>Donec id elit non mi porta gravida at eget metus. Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue. Donec sed odio dui. Donec id elit non mi porta gravida at eget metus. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.</p>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n<h3>Bibendum Aenean Dapibus Tristique</h3>\n<p>Cras mattis consectetur purus sit amet fermentum. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla.</p>\n<p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Donec ullamcorper nulla non metus auctor fringilla. Sed posuere consectetur est at lobortis. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</p>\n<p>Donec sed odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n<ul>\n<li>Ullamcorper Aenean Ornare</li>\n<li>Ridiculus Lorem Malesuada Consectetur</li>\n<li>Aenean Tristique Sit Lorem Purus</li>\n<li>Vehicula Egestas Mollis Cursus Nibh</li>\n</ul>\n<p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Nullam quis risus eget urna mollis ornare vel eu leo.</p>\n</main>\n```\n","n":0.021}}},{"i":165,"$":{"0":{"v":"CSS Animations","n":0.707},"1":{"v":"## General Info\n\nAnimations let you animate elements from one style configuration to another.\n\nAnimations consist of two components, a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation's style, as well as possible intermediate waypoints.\n\nThey are similar to transitions but differ in the following ways:\n\n- Transitions were designed to animate an element from one state to another. They can loop, but they weren’t designed for that. Animations, on the other hand, were designed with the purpose of explicitly enabling loops.\n\n- Transitions need a trigger, such as the use of pseudo-classes like :hover or :focus, or by adding/removing a class via JavaScript. Animations, on the other hand, do not need such a trigger. Once you have your elements in place and CSS defined, an animation will start running immediately if that’s what you told it to do.\n\n- Transitions are not as flexible as using animations. When you define a transition, imagine you are sending that element on a journey in a straight line from point A to point B. Yes, the transition-timing-function can add some variation to the timing of this change, but it doesn’t compare to the amount of flexibility added by using animations.\n\n## Animation Properties\n\nThe main animation property is `animation` and it can be used as a shorthand for:\n\n`animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state`\n\n### Animation Name\n\nSpecifies the name of the `@keyframes` rule but this can be chosen by the user it is not a keyword\n\n`animation-name: change-color;`\n\n### Animation Duration\n\nConfigures the length of time that an animation should take to complete one cycle.\n\n`animation-duration: 2s;`\n\n### Animation Timing Function\n\nConfigures the timing of the animation; that is, how the animation transitions through keyframes, by establishing acceleration curves.\n\n`animation-timing-function: ease-in;`\n\nor\n\n`animation-timing-function: steps(6, start);`\n\nor\n\n`animation-timing-function: cubic-bezier(0.1, 0.7, 1.0, 0.1);`\n\n### Animation Delay\n\nConfigures the delay between the time the element is loaded and the beginning of the animation sequence.\n\n`animation-delay: 2s;`\n\n### Animation Iteration Count\n\nConfigures the number of times the animation should repeat; you can specify infinite to repeat the animation indefinitely.\n\n`animation-iteration-count: infinite;`\n\nor\n\n`animation-iteration-count: 3;`\n\n### Animation Direction\n\nSets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n\n`animation-direction: normal;`\n\n`animation-direction: reverse;`\n\n### Animation Fill Mode\n\nConfigures what values are applied by the animation before and after it is executing.\n\n`animation-fill-mode: forwards;`\n\n### Animation Play State\n\nLets you pause and resume the animation sequence.\n\n`animation-play-state: running;`\n\nor\n\n`animation-play-state: paused;`\n\n## Keyframes\n\nThis is done by establishing two or more keyframes using the `@keyframes` at-rule. Each keyframe describes how the animated element should render at a given time during the animation sequence.\n\nSince the timing of the animation is defined in the CSS style that configures the animation, keyframes use a `<percentage>`to indicate the time during the animation sequence at which they take place. 0% indicates the first moment of the animation sequence, while 100% indicates the final state of the animation. Because these two times are so important, they have special aliases: from and to. Both are optional. If from/0% or to/100% is not specified, the browser starts or finishes the animation using the computed values of all attributes.\n\n## Color Changing Circle Example\n\n```css\n.container {\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#ball {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  border: 1px solid black;\n  border-radius: 50%;\n  animation-duration: 2s;\n  animation-name: change-color;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n\n@keyframes change-color {\n  from {\n    background-color: red;\n  }\n\n  to {\n    background-color: green;\n  }\n}\n```\n\n```html\n<div class=\"container\">\n  <div id=\"ball\"></div>\n</div>\n```\n","n":0.042}}},{"i":166,"$":{"0":{"v":"Continous_Deployment","n":1},"1":{"v":"\nWhen deploying from a project made in Windows or OSX you may run into the build failing due to case sensitive file names... happened to me on Netlify see below to fix...\n\n[See This Issue](https://answers.netlify.com/t/support-guide-netlify-app-builds-locally-but-fails-on-deploy-case-sensitivity/10754)\n\n[Here is the stack overflow for the fix](https://stackoverflow.com/questions/17683458/how-do-i-commit-case-sensitive-only-filename-changes-in-git)\n","n":0.156}}},{"i":167,"$":{"0":{"v":"Content Security Policy (CSP)","n":0.5},"1":{"v":"## General Info\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft, to site defacement, to malware distribution.\n\n## Cheat Sheet\n\n[Here is the cheat sheet with all the things](https://content-security-policy.com/)","n":0.135}}},{"i":168,"$":{"0":{"v":"Comments","n":1},"1":{"v":"\n## General Notes\n\n1. We dont need comments to tell us how the code works but why the code works. The code should tell us how it works.\n\n2. Self Documenting Code\n\n## Books to Maybe Read but Probably Wont\n\n1. Code Complete by Steve McConnell\n\n2. Refactoring by Martin Fowler\n\n3. Refactoring to Patterns by Martin Fowler\n","n":0.139}}},{"i":169,"$":{"0":{"v":"C","n":1},"1":{"v":"\n```c\n#include <stdio.h>\n\nint main(void)\n{\n    \n    printf(\"Hello, world\\n\");\n}\n```\n","n":0.408}}},{"i":170,"$":{"0":{"v":"C#","n":1},"1":{"v":"## General Info\n\n## Try/Catch Exceptions\n\n```csharp\n        static void Main(string[] args)\n        {\n            string input = Console.ReadLine();\n            try\n            {\n                int parsedInput = int.Parse(input);\n                Console.WriteLine(parsedInput * 2);\n            }\n            catch (FormatException)\n            {\n                Console.WriteLine(\"Format exception please enter the correct type\");\n            }\n            catch(OverflowException)\n            {\n                Console.WriteLine(\"Overflow Exception!\");\n            }\n            catch(Exception)\n            {\n                Console.WriteLine(\"I dont know all the exceptions\");\n            }\n```\n\n## Unary Operators\n\n`num2 = -num3` negative operator\n\n`!` logical negation operator\n\n## Increment Operators\n\n`num++` or `++num`\n\n## TryParse\n\n```csharp\nstring numberAsString = \"128\"\nint parsedValue\nbool success = int.TryParse(numberAsString, out parsedValue);\nif (success)\n    Console.WriteLine(\"Parsing Successful - number is \" + parsedValue);\nelse \n    Console.WriteLine(\"Parsing Failed\");\n```\n\n## .Equals()\n\nDetermines whether two object instances are equal.\n\n## Ternary Operator If Statements\n\n```csharp\nstateOfMatter = temp > 100 ? \"gas\" : temp < 0 ? \"solid\" : \"liquid\";\n```\n","n":0.096}}},{"i":171,"$":{"0":{"v":"XML Comments","n":0.707},"1":{"v":"You can create comments that give you variable summary with xml.\n\n```csharp\n///<summary>\n//\n///</summary>\n```\n","n":0.302}}},{"i":172,"$":{"0":{"v":"Objects","n":1},"1":{"v":"## General Info\n\nConverting a string to a native object is called deserialization, while converting a native object to a string so it can be transmitted across the network is called serialization.\n","n":0.18}}},{"i":173,"$":{"0":{"v":"Datatypes","n":1},"1":{"v":"## Data Types\n\n### Integral Numeric Types\n\n<table aria-label=\"Characteristics of the integral types\" class=\"table table-sm\">\n<thead>\n<tr>\n<th>C# type/keyword</th>\n<th>Range</th>\n<th>Size</th>\n<th>.NET type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sbyte</code></td>\n<td>-128 to 127</td>\n<td>Signed 8-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.sbyte\" class=\"no-loc\" data-linktype=\"absolute-path\">System.SByte</a></td>\n</tr>\n<tr>\n<td><code>byte</code></td>\n<td>0 to 255</td>\n<td>Unsigned 8-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.byte\" class=\"no-loc\" data-linktype=\"absolute-path\">System.Byte</a></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>-32,768 to 32,767</td>\n<td>Signed 16-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.int16\" class=\"no-loc\" data-linktype=\"absolute-path\">System.Int16</a></td>\n</tr>\n<tr>\n<td><code>ushort</code></td>\n<td>0 to 65,535</td>\n<td>Unsigned 16-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.uint16\" class=\"no-loc\" data-linktype=\"absolute-path\">System.UInt16</a></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>-2,147,483,648 to 2,147,483,647</td>\n<td>Signed 32-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.int32\" class=\"no-loc\" data-linktype=\"absolute-path\">System.Int32</a></td>\n</tr>\n<tr>\n<td><code>uint</code></td>\n<td>0 to 4,294,967,295</td>\n<td>Unsigned 32-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.uint32\" class=\"no-loc\" data-linktype=\"absolute-path\">System.UInt32</a></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td>\n<td>Signed 64-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.int64\" class=\"no-loc\" data-linktype=\"absolute-path\">System.Int64</a></td>\n</tr>\n<tr>\n<td><code>ulong</code></td>\n<td>0 to 18,446,744,073,709,551,615</td>\n<td>Unsigned 64-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.uint64\" class=\"no-loc\" data-linktype=\"absolute-path\">System.UInt64</a></td>\n</tr>\n<tr>\n<td><code>nint</code></td>\n<td>Depends on platform</td>\n<td>Signed 32-bit or 64-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.intptr\" class=\"no-loc\" data-linktype=\"absolute-path\">System.IntPtr</a></td>\n</tr>\n<tr>\n<td><code>nuint</code></td>\n<td>Depends on platform</td>\n<td>Unsigned 32-bit or 64-bit integer</td>\n<td><a href=\"/en-us/dotnet/api/system.uintptr\" class=\"no-loc\" data-linktype=\"absolute-path\">System.UIntPtr</a></td>\n</tr>\n</tbody>\n</table>\n\n### Floating Point Numeric Types\n\n<table aria-label=\"Characteristics of the floating-point types\" class=\"table table-sm\">\n<thead>\n<tr>\n<th>C# type/keyword</th>\n<th>Approximate range</th>\n<th>Precision</th>\n<th>Size</th>\n<th>.NET type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>float</code></td>\n<td>±1.5 x 10<sup>−45</sup> to ±3.4 x 10<sup>38</sup></td>\n<td>~6-9 digits</td>\n<td>4 bytes</td>\n<td><a href=\"/en-us/dotnet/api/system.single\" class=\"no-loc\" data-linktype=\"absolute-path\">System.Single</a></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup></td>\n<td>~15-17 digits</td>\n<td>8 bytes</td>\n<td><a href=\"/en-us/dotnet/api/system.double\" class=\"no-loc\" data-linktype=\"absolute-path\">System.Double</a></td>\n</tr>\n<tr>\n<td><code>decimal</code></td>\n<td>±1.0 x 10<sup>-28</sup> to ±7.9228 x 10<sup>28</sup></td>\n<td>28-29 digits</td>\n<td>16 bytes</td>\n<td><a href=\"/en-us/dotnet/api/system.decimal\" class=\"no-loc\" data-linktype=\"absolute-path\">System.Decimal</a></td>\n</tr>\n</tbody>\n</table>\n\n### Boolean\n\n`bool`\n\n### Char\n\n`char`\n\n### Strings\n\n`string`\n","n":0.085}}},{"i":174,"$":{"0":{"v":"Type Conversion","n":0.707},"1":{"v":"## General Info\n\n[Microsoft Docs Reference](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions)\n\n### Implicit Conversions\n\nWhen no special syntax is required because the conversion always succeeds. For example conversions from a small integral type (ex `int`) to a larger one (ex `long`)\n\n### Casting (Explicit Conversions)\n\nCasting is required when information might be lost in the conversion, or when the conversion might not succeed for other reasons. Typical examples include numeric conversion to a type that has less precision or a smaller range, and conversion of a base-class instance to a derived class.\n\n```csharp\ndouble myDouble = 13.37;\nint myInt;\n\n//cast double to int\nmyInt = (int)myDouble;\n```\n\n### User-Defined Conversions\n\nUser-defined conversions are performed by special methods that you can define to enable explicit and implicit conversions between custom types that do not have a base class–derived class relationship.\n\n### Conversions with Helper Classes\n\nSuch as using `.ToBoolean()` or `.ToString()` or `.ToChar()`\n","n":0.087}}},{"i":175,"$":{"0":{"v":"Strings","n":1},"1":{"v":"## General Info\n\n### Verbatim Strings\n\nUsing an @ sign in the beginning of a large string copy will maintain string formatting in the console it also prevents using escaped characters to work.\n\n## Methods\n\n### String Formatting\n\n```csharp\nstring s = String.Format(\"The current price is {0} per ounce.\", pricePerOunce);\n```\n\n### String Interpolation\n\n```csharp\nstring name = \"Horace\";\nint age = 34;\nConsole.WriteLine($\"He asked, \\\"Is your name {name}?\\\", but didn't wait for a reply :-{{\");\nConsole.WriteLine($\"{name} is {age} year{(age == 1 ? \"\" : \"s\")} old.\");\n// Expected output is:\n// He asked, \"Is your name Horace?\", but didn't wait for a reply :-{\n// Horace is 34 years old.\n```\n\n\n### Substring\n\n```csharp\nstring firstName = \"Robert\";\nConsole.WriteLine(firstName.Substring(2)); // will output bert\n```\n\n`.IsNullOrWhiteSpace()`.\n","n":0.099}}},{"i":176,"$":{"0":{"v":"C# Classes","n":0.707},"1":{"v":"## General Info\n\n- A class is a blueprint of an Object\n- It has actions/abilities (member functions and methods)\n- It has properties (called member variables)\n- Inheretance is possible in classes\n- Can be used like a Datatype\n\n\n","n":0.169}}},{"i":177,"$":{"0":{"v":"Browser","n":1},"1":{"v":"\nYou can use ` <video> <canvas> opacity, transform ` or ` will change ` to force GPU to paint at a trade off between web performance vs memory management in an app.\n","n":0.177}}},{"i":178,"$":{"0":{"v":"BDD","n":1},"1":{"v":"## General Info\n\nIn software engineering, behavior-driven development (BDD) is an agile software development process that encourages collaboration among developers, quality assurance testers, and customer representatives in a software project.It encourages teams to use conversation and concrete examples to formalize a shared understanding of how the application should behave. It emerged from test-driven development (TDD).Behavior-driven development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development.\n","n":0.104}}},{"i":179,"$":{"0":{"v":"A11y","n":1},"1":{"v":"## General Notes\n\nYou Are Not the User: The False-Consensus Effect, [Link](https://www.nngroup.com/articles/false-consensus/)\n\nThe ` <button> ` element should be used for any interaction that performs an action on the current page. The ` <a> ` element should be used for any interaction that navigates to another view.\n\nAdding an HTML Attribute ` tabindex=\"0\" ` allows tab focus. These can also be numbered to order tabbing.\n\nSynthetic Click Activator\n\nScreen reader users generally use headings to navigate a page quickly. Using heading in orders is super important.\n\n### Cool Examples of All the Things\n\n[A Complete Guide to A11y Components](https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/)\n\n### Modals\n\nThe final boss battle of a11y! 😂\n\nWith Modals make sure that when you close a modal focus is returned to where the modal was opened.\n\nMake sure that the modal is a created just as child of the body, do not nest it far in the document or it will make it harder to navigate.\n\n[WICG Inert Polyfill](https://github.com/WICG/inert) was created to make a DOM Node uninteractable and prevent the user from navigating to that node.\n\n### Contrast Ratio from WCAG 2\n\nMinimum for Text & Images: 4.5:1\n\nMinimum for Large Text: 3:1\n\nEnhanced for Text & Images: 7:1\n\nEnhanced for Large Text: 4:1\n\n#### Tools for Contrast Checking\n\n1. [WCAG Color Contrast Analyzer](https://goo.gl/YVcYIS)\n\n2. [aXe Chrome Extension](https://goo.gl/TMZoBP)\n\n3. [Lea Verous Contrast Ratio](https://goo.gl/0fqfVo)\n\n4. [Automated Testing with aXe](https://goo.gl/Nj31Jj)\n\n### Assistive Tech\n\n1. TalkBack: assistive reader for Mobile Devices.\n\n2. Switch Device: button switch device for low dexterity users.\n\n3. NVDA: Windows Screen Reader\n\n4. VoiceOver: IOS Screen Reader\n","n":0.066}}},{"i":180,"$":{"0":{"v":"WAI-ARIA","n":1},"1":{"v":"## General Info\n\nWeb Accessibility Initiative’s Accessible Rich Internet Applications specification. The purpose of WAI-ARIA (often referred to as just ARIA) is to define a way to make web content more accessible when native HTML is unable to do so. Think of ARIA as something that fills in the accessible gaps left by native HTML.\n\n## 5 Rules of ARIA\n\n1. Always use native HTML elements and attributes over ARIA when possible.\n\n2. Never change native semantics, unless you have no other choice.\n\n3. All interactive ARIA controls must be usable with a keyboard.\n\n4. Never use role='presentation' or aria-hidden='true' on focusable elements.\n\n5. All interactive elements must have an accessible name.\n","n":0.098}}},{"i":181,"$":{"0":{"v":"README","n":1},"1":{"v":"## Dendron Note Vault\n\n![Dendron Logo](/assets/images/logo_small.png)\n\nThis is where I will be maintaining general knowledge notes and reminders.\n\n[Link to Published Vault](https://rperez2021.github.io/DevNotes/)\n","n":0.229}}}]}
